# Command Pipeline Analysis Results

## Summary

- Total files analyzed: 1970
- Total commands found: 83
- Unsafe database access patterns: 1502
- Files with unsafe access: 147
- Unique premium features: 2
- Premium verification methods: comparison, utility
- Inconsistent premium checks: 1
- Missing error handlers: 0

## Unsafe Access Patterns

- database.py:73 - truthiness access to canvases.find_one
  Context: `canvas = db.canvases.find_one({"guild_id": guild_id})`

- database.py:83 - truthiness access to canvases.insert_one
  Context: `db.canvases.insert_one(canvas)`

- database.py:92 - truthiness access to pixels.find_one
  Context: `return db.pixels.find_one({
        "canvas_id": canvas_id,
        "x": x,
        "y": y
    })`

- database.py:102 - truthiness access to pixels.update_one
  Context: `result = db.pixels.update_one(
        {"canvas_id": canvas_id, "x": x, "y": y},
        {"$set": {
            "color": color,
            "last_modified_by": user_id,
            "last_modified": pymongo.datetime.datetime.utcnow()`

- database.py:113 - truthiness access to users.update_one
  Context: `db.users.update_one(
        {"user_id": user_id},
        {"$inc": {"pixels_placed": 1}},
        upsert=True
    )`

- database.py:125 - truthiness access to users.find_one
  Context: `user = db.users.find_one({"user_id": user_id})`

- database.py:132 - truthiness access to users.insert_one
  Context: `db.users.insert_one(user)`

- database.py:143 - direct access to _id
  Context: `result = db.pixels.delete_many({"canvas_id": canvas["_id"]})`

- force_check_servers.py:36 - truthiness access to servers.find
  Context: `servers = await db.servers.find({}).to_list(length=100)`

- force_check_servers.py:46 - truthiness access to servers.find
  Context: `true_servers = await db.servers.find({"sftp_enabled": True}).to_list(length=100)`

- force_check_servers.py:49 - truthiness access to servers.find
  Context: `string_true_servers = await db.servers.find({"sftp_enabled": "True"}).to_list(length=100)`

- force_check_servers.py:52 - truthiness access to servers.find
  Context: `string_true_lower_servers = await db.servers.find({"sftp_enabled": "true"}).to_list(length=100)`

- force_check_servers.py:57 - truthiness access to game_servers.find
  Context: `game_servers = await db.game_servers.find({}).to_list(length=100)`

- force_check_servers.py:67 - truthiness access to servers.find
  Context: `fake_servers = await db.servers.find({"this_field_doesnt_exist": True}).to_list(length=100)`

- force_check_servers.py:79 - truthiness access to servers.update_one
  Context: `result = await db.servers.update_one({"_id": server_id}, {"$set": {"sftp_enabled": new_value}})`

- force_check_servers.py:83 - truthiness access to servers.update_one
  Context: `result = await db.servers.update_one({"_id": server_id}, {"$set": {"sftp_enabled": current_sftp}})`

- list_server_configs.py:50 - truthiness access to servers.count_documents
  Context: `servers_count = await db.servers.count_documents({})`

- list_server_configs.py:53 - truthiness access to servers.find
  Context: `async for server in db.servers.find({}):`

- list_server_configs.py:62 - truthiness access to game_servers.count_documents
  Context: `game_servers_count = await db.game_servers.count_documents({})`

- list_server_configs.py:65 - truthiness access to game_servers.find
  Context: `async for server in db.game_servers.find({}):`

- list_server_configs.py:74 - truthiness access to guilds.count_documents
  Context: `guilds_count = await db.guilds.count_documents({})`

- list_server_configs.py:77 - truthiness access to guilds.find
  Context: `async for guild in db.guilds.find({}):`

- list_server_configs.py:97 - truthiness access to servers.find
  Context: `emerald_servers = await db.servers.find({"original_server_id": "7020"}).to_list(10)`

- list_server_configs.py:107 - truthiness access to servers.find
  Context: `emerald_servers = await db.servers.find({"name": {"$regex": "Emerald", "$options": "i"}}).to_list(10)`

- maintenance.py:96 - truthiness access to guilds.update_many
  Context: `result = await db.guilds.update_many(
            {}, 
            {"$set": {
                "servers.$[].error_state": False,
                "servers.$[].last_error": None,
                "servers.$[].error_count": 0,
                "servers.$[].updated_at": datetime.utcnow().isoformat()`

- maintenance.py:118 - truthiness access to guilds.find
  Context: `guilds = await db.guilds.find({}).to_list(length=None)`

- maintenance.py:164 - truthiness access to guilds.count_documents
  Context: `guilds_count = await db.guilds.count_documents({})`

- maintenance.py:169 - truthiness access to guilds.find
  Context: `guilds = await db.guilds.find({}).to_list(length=None)`

- maintenance.py:211 - truthiness access to guilds.find
  Context: `guilds = await db.guilds.find({}).to_list(length=None)`

- maintenance.py:247 - direct access to _id
  Context: `result = await db.guilds.replace_one({"_id": guild_data["_id"]}, guild_data)`

- remove_all_servers.py:20 - truthiness access to game_servers.delete_many
  Context: `result = await db.game_servers.delete_many({})`

- remove_all_servers.py:24 - truthiness access to servers.delete_many
  Context: `result = await db.servers.delete_many({})`

- remove_all_servers.py:28 - truthiness access to guilds.update_many
  Context: `result = await db.guilds.update_many(
        {},
        {
            "$set": {
                "servers": [],
                "updated_at": datetime.utcnow()`

- routes.py:47 - truthiness access to session.add
  Context: `db.session.add(log)`

- routes.py:48 - truthiness access to session.commit
  Context: `db.session.commit()


# Routes
@app.route('/')`

- routes.py:116 - truthiness access to session.add
  Context: `db.session.add(user)`

- routes.py:117 - truthiness access to session.commit
  Context: `db.session.commit()
        
        flash('Congratulations, you are now registered!', 'success')`

- routes.py:143 - truthiness access to session.commit
  Context: `db.session.commit()
        flash('Your profile has been updated.', 'success')`

- routes.py:207 - truthiness access to session.add
  Context: `db.session.add(server)`

- routes.py:208 - truthiness access to session.commit
  Context: `db.session.commit()
        
        if current_user.is_admin:
            log_admin_action('server_add', f'Added server configuration for {form.server_name.data}')`

- routes.py:244 - truthiness access to session.commit
  Context: `db.session.commit()
        
        if current_user.is_admin:
            log_admin_action('server_edit', f'Edited server configuration for {server.server_name}')`

- routes.py:272 - truthiness access to session.delete
  Context: `db.session.delete(server)`

- routes.py:273 - truthiness access to session.commit
  Context: `db.session.commit()
    
    log_admin_action('server_delete', f'Deleted server configuration for {server_name}')`

- routes.py:316 - truthiness access to session.commit
  Context: `db.session.commit()
    
    action = 'Granted' if user.is_admin else 'Removed'
    log_admin_action('toggle_admin', f'{action} admin privileges for user {user.username}')`

- routes.py:338 - truthiness access to session.delete
  Context: `db.session.delete(user)`

- routes.py:339 - truthiness access to session.commit
  Context: `db.session.commit()
    
    log_admin_action('delete_user', f'Deleted user {username}')`

- routes.py:362 - truthiness access to session.add
  Context: `db.session.add(config)`

- routes.py:364 - truthiness access to session.commit
  Context: `db.session.commit()
        log_admin_action('update_config', 'Updated web configuration settings')`

- routes.py:384 - truthiness access to session.add
  Context: `db.session.add(config)`

- routes.py:387 - truthiness access to session.commit
  Context: `db.session.commit()
    
    return render_template('admin_config.html', title='Site Configuration',
                          configs=config_dict)`

- routes.py:452 - truthiness access to session.add
  Context: `db.session.add(stat)`

- routes.py:454 - truthiness access to session.commit
  Context: `db.session.commit()
        return jsonify({'success': True})`

- routes.py:470 - truthiness access to session.rollback
  Context: `db.session.rollback()
    return render_template('errors/500.html'), 500`

- run_premium_diagnostics.py:46 - truthiness access to guilds.find_one
  Context: `premium_guild = await db.guilds.find_one({"premium_tier": {"$gt": 0}})`

- run_premium_diagnostics.py:53 - truthiness access to guilds.find_one
  Context: `any_guild = await db.guilds.find_one({})`

- run_premium_diagnostics.py:70 - truthiness access to guilds.find_one
  Context: `guild_doc = await db.guilds.find_one({"guild_id": str(guild_id)})`

- run_premium_diagnostics.py:86 - direct access to _id
  Context: `update_result = await db.guilds.update_one(
                        {"_id": guild_doc["_id"]},
                        {"$set": {"premium_tier": corrected_tier}}
                    )`

- run_premium_diagnostics.py:242 - truthiness access to guilds.find_one
  Context: `updated_doc = await db.guilds.find_one({"guild_id": str(guild_id)})`

- run_premium_diagnostics.py:87 - direct access to _id
  Context: `{"_id": guild_doc["_id"]},`

- run_premium_diagnostics.py:71 - truthiness access to unknown
  Context: `if guild_doc:`

- run_premium_verification.py:48 - truthiness access to guilds.find_one
  Context: `db_doc = await db.guilds.find_one({"guild_id": str(guild_id)})`

- run_premium_verification.py:50 - truthiness access to guilds.find_one
  Context: `db_doc = await db.guilds.find_one({"guild_id": int(guild_id) if guild_id.isdigit() else None})`

- set_home_guild.py:20 - truthiness access to bot_config.update_one
  Context: `await db.bot_config.update_one(
        {"key": "home_guild_id"}, 
        {"$set": {"key": "home_guild_id", "value": str(guild_id)}},`

- set_home_guild.py:32 - truthiness access to bot_config.find_one
  Context: `config = await db.bot_config.find_one({"key": "home_guild_id"})`

- premium_migration.py:27 - truthiness access to guilds.find_one
  Context: `old_guild_doc = await db.guilds.find_one({"guild_id": guild_id})`

- premium_migration.py:232 - truthiness access to guilds.find
  Context: `async for doc in db.guilds.find({}):`

- premium_migration.py:274 - truthiness access to guilds.count_documents
  Context: `old_count = await db.guilds.count_documents({})`

- premium_migration.py:278 - truthiness access to premium_guilds.count_documents
  Context: `new_count = await db.premium_guilds.count_documents({})`

- premium_migration.py:282 - truthiness access to guilds.find
  Context: `async for old_guild in db.guilds.find({}):`

- premium_migration.py:288 - truthiness access to premium_guilds.find_one
  Context: `new_guild_doc = await db.premium_guilds.find_one({"guild_id": guild_id})`

- premium_migration.py:39 - direct access to premium_tier
  Context: `tier_raw = old_guild_doc['premium_tier']`

- premium_migration.py:63 - direct access to premium_expires
  Context: `if 'premium_expires' in old_guild_doc and old_guild_doc['premium_expires']:`

- premium_migration.py:64 - direct access to premium_expires
  Context: `premium_expires_at = old_guild_doc['premium_expires']`

- premium_migration.py:84 - direct access to color_primary
  Context: `new_guild.color_primary = old_guild_doc['color_primary']`

- premium_migration.py:86 - direct access to color_secondary
  Context: `new_guild.color_secondary = old_guild_doc['color_secondary']`

- premium_migration.py:88 - direct access to color_accent
  Context: `new_guild.color_accent = old_guild_doc['color_accent']`

- premium_migration.py:90 - direct access to icon_url
  Context: `new_guild.icon_url = old_guild_doc['icon_url']`

- premium_migration.py:94 - direct access to admin_role_id
  Context: `new_guild.admin_role_id = old_guild_doc['admin_role_id']`

- premium_migration.py:97 - direct access to servers
  Context: `if 'servers' in old_guild_doc and isinstance(old_guild_doc['servers'], list):`

- premium_migration.py:98 - direct access to servers
  Context: `for server_data in old_guild_doc['servers']:`

- premium_compatibility.py:42 - truthiness access to guilds.find_one
  Context: `guild_doc = await db.guilds.find_one({"guild_id": guild_id})`

- premium_compatibility.py:111 - truthiness access to guilds.find_one
  Context: `guild_doc = await db.guilds.find_one({"guild_id": guild_id})`

- premium_compatibility.py:65 - direct access to premium_expires
  Context: `if "premium_expires" in guild_doc and guild_doc["premium_expires"]:`

- premium_compatibility.py:67 - direct access to premium_expires
  Context: `if guild_doc["premium_expires"] < datetime.utcnow():`

- premium_compatibility.py:112 - truthiness access to unknown
  Context: `if guild_doc:`

- premium_mongodb_models.py:229 - truthiness access to premium_guilds.update_one
  Context: `result = await self.db.premium_guilds.update_one(
                    {"_id": self._id},
                    {"$set": data}
                )`

- premium_mongodb_models.py:236 - truthiness access to premium_guilds.insert_one
  Context: `result = await self.db.premium_guilds.insert_one(data)`

- premium_mongodb_models.py:301 - truthiness access to premium_guilds.find_one
  Context: `document = await db.premium_guilds.find_one({"guild_id": str_guild_id})`

- premium_mongodb_models.py:502 - truthiness access to premium_servers.update_one
  Context: `result = await self.db.premium_servers.update_one(
                    {"_id": self._id},
                    {"$set": data}
                )`

- premium_mongodb_models.py:509 - truthiness access to premium_servers.insert_one
  Context: `result = await self.db.premium_servers.insert_one(data)`

- premium_mongodb_models.py:52 - truthiness access to unknown
  Context: `if document:`

- premium_mongodb_models.py:303 - truthiness access to unknown
  Context: `if document:`

- premium_mongodb_models.py:396 - truthiness access to unknown
  Context: `if document:`

- initialize_premium_db.py:92 - truthiness access to premium_guilds.create_index
  Context: `await db.premium_guilds.create_index("guild_id", unique=True)`

- initialize_premium_db.py:97 - truthiness access to premium_servers.create_index
  Context: `await db.premium_servers.create_index("server_id", unique=True)`

- initialize_premium_db.py:98 - truthiness access to premium_servers.create_index
  Context: `await db.premium_servers.create_index("guild_id")`

- initialize_premium_db.py:104 - truthiness access to premium_payments.create_index
  Context: `await db.premium_payments.create_index("guild_id")`

- initialize_premium_db.py:105 - truthiness access to premium_payments.create_index
  Context: `await db.premium_payments.create_index("payment_id", unique=True)`

- premium_trace.py:48 - truthiness access to guilds.find_one
  Context: `guild_doc = await db.guilds.find_one({"guild_id": TEST_GUILD_ID})`

- direct_premium_diagnostic.py:134 - truthiness access to guilds.find_one
  Context: `guild_doc = await db.guilds.find_one({"guild_id": TEST_GUILD_ID})`

- direct_premium_diagnostic.py:135 - truthiness access to premium_guilds.find_one
  Context: `premium_guild_doc = await db.premium_guilds.find_one({"guild_id": TEST_GUILD_ID})`

- direct_premium_diagnostic.py:88 - direct access to servers
  Context: `logger.info(f"Servers count: {len(guild_doc['servers'])}")`

- direct_premium_diagnostic.py:118 - direct access to features_enabled
  Context: `logger.info(f"Features enabled: {premium_guild_doc['features_enabled']}")`

- debug_premium_system.py:94 - truthiness access to guilds.find_one
  Context: `guild_doc = await db.guilds.find_one({"guild_id": TEST_GUILD_ID})`

- debug_premium_system.py:108 - truthiness access to premium_guilds.find_one
  Context: `premium_guild_doc = await db.premium_guilds.find_one({"guild_id": TEST_GUILD_ID})`

- comprehensive_premium_fix.py:236 - truthiness access to guilds.find_one
  Context: `guild_doc = await db.guilds.find_one({"guild_id": guild_id_str})`

- comprehensive_premium_fix.py:242 - truthiness access to guilds.find_one
  Context: `guild_doc = await db.guilds.find_one({"guild_id": guild_id_int})`

- comprehensive_premium_fix.py:243 - truthiness access to unknown
  Context: `if guild_doc:`

- comprehensive_premium_fix.py:248 - truthiness access to unknown
  Context: `if guild_doc:`

- verify_premium_fixes.py:83 - truthiness access to guilds.find_one
  Context: `test_guild = await db.guilds.find_one({"guild_id": test_guild_id})`

- verify_premium_fixes.py:100 - truthiness access to guilds.find_one
  Context: `guild = await db.guilds.find_one({"premium_tier": tier})`

- verify_premium_fixes.py:131 - truthiness access to guilds.find_one
  Context: `guild_doc = await db.guilds.find_one({"guild_id": guild_id})`

- verify_premium_fixes.py:132 - truthiness access to unknown
  Context: `if guild_doc:`

- premium_dashboard.py:105 - truthiness access to guilds.find_one
  Context: `test_guild = await self.db.guilds.find_one({"guild_id": self.test_guild_id})`

- premium_dashboard.py:126 - truthiness access to guilds.find_one
  Context: `guild = await self.db.guilds.find_one({"premium_tier": tier})`

- premium_dashboard.py:158 - truthiness access to guilds.find_one
  Context: `guild_doc = await self.db.guilds.find_one({"guild_id": guild_id})`

- premium_dashboard.py:371 - truthiness access to guilds.count_documents
  Context: `total_guilds = await self.db.guilds.count_documents({})`

- premium_dashboard.py:375 - truthiness access to guilds.count_documents
  Context: `premium_guilds = await self.db.guilds.count_documents({"premium_tier": {"$gt": 0}})`

- premium_dashboard.py:380 - truthiness access to guilds.count_documents
  Context: `tier_count = await self.db.guilds.count_documents({"premium_tier": tier})`

- check_premium_feature.py:66 - truthiness access to guilds.find_one
  Context: `guild = await db.guilds.find_one({"premium_tier": tier})`

- check_premium_feature.py:71 - truthiness access to guilds.insert_one
  Context: `await db.guilds.insert_one({
                "guild_id": mock_guild_id,
                "name": f"Test Guild (Tier {tier})",`

- check_premium_feature.py:76 - truthiness access to guilds.find_one
  Context: `guild = await db.guilds.find_one({"guild_id": mock_guild_id})`

- temp_extract/Premdebug-main/database.py:73 - truthiness access to canvases.find_one
  Context: `canvas = db.canvases.find_one({"guild_id": guild_id})`

- temp_extract/Premdebug-main/database.py:83 - truthiness access to canvases.insert_one
  Context: `db.canvases.insert_one(canvas)`

- temp_extract/Premdebug-main/database.py:92 - truthiness access to pixels.find_one
  Context: `return db.pixels.find_one({
        "canvas_id": canvas_id,
        "x": x,
        "y": y
    })`

- temp_extract/Premdebug-main/database.py:102 - truthiness access to pixels.update_one
  Context: `result = db.pixels.update_one(
        {"canvas_id": canvas_id, "x": x, "y": y},
        {"$set": {
            "color": color,
            "last_modified_by": user_id,
            "last_modified": pymongo.datetime.datetime.utcnow()`

- temp_extract/Premdebug-main/database.py:113 - truthiness access to users.update_one
  Context: `db.users.update_one(
        {"user_id": user_id},
        {"$inc": {"pixels_placed": 1}},
        upsert=True
    )`

- temp_extract/Premdebug-main/database.py:125 - truthiness access to users.find_one
  Context: `user = db.users.find_one({"user_id": user_id})`

- temp_extract/Premdebug-main/database.py:132 - truthiness access to users.insert_one
  Context: `db.users.insert_one(user)`

- temp_extract/Premdebug-main/database.py:143 - direct access to _id
  Context: `result = db.pixels.delete_many({"canvas_id": canvas["_id"]})`

- temp_extract/Premdebug-main/force_check_servers.py:36 - truthiness access to servers.find
  Context: `servers = await db.servers.find({}).to_list(length=100)`

- temp_extract/Premdebug-main/force_check_servers.py:46 - truthiness access to servers.find
  Context: `true_servers = await db.servers.find({"sftp_enabled": True}).to_list(length=100)`

- temp_extract/Premdebug-main/force_check_servers.py:49 - truthiness access to servers.find
  Context: `string_true_servers = await db.servers.find({"sftp_enabled": "True"}).to_list(length=100)`

- temp_extract/Premdebug-main/force_check_servers.py:52 - truthiness access to servers.find
  Context: `string_true_lower_servers = await db.servers.find({"sftp_enabled": "true"}).to_list(length=100)`

- temp_extract/Premdebug-main/force_check_servers.py:57 - truthiness access to game_servers.find
  Context: `game_servers = await db.game_servers.find({}).to_list(length=100)`

- temp_extract/Premdebug-main/force_check_servers.py:67 - truthiness access to servers.find
  Context: `fake_servers = await db.servers.find({"this_field_doesnt_exist": True}).to_list(length=100)`

- temp_extract/Premdebug-main/force_check_servers.py:79 - truthiness access to servers.update_one
  Context: `result = await db.servers.update_one({"_id": server_id}, {"$set": {"sftp_enabled": new_value}})`

- temp_extract/Premdebug-main/force_check_servers.py:83 - truthiness access to servers.update_one
  Context: `result = await db.servers.update_one({"_id": server_id}, {"$set": {"sftp_enabled": current_sftp}})`

- temp_extract/Premdebug-main/list_server_configs.py:50 - truthiness access to servers.count_documents
  Context: `servers_count = await db.servers.count_documents({})`

- temp_extract/Premdebug-main/list_server_configs.py:53 - truthiness access to servers.find
  Context: `async for server in db.servers.find({}):`

- temp_extract/Premdebug-main/list_server_configs.py:62 - truthiness access to game_servers.count_documents
  Context: `game_servers_count = await db.game_servers.count_documents({})`

- temp_extract/Premdebug-main/list_server_configs.py:65 - truthiness access to game_servers.find
  Context: `async for server in db.game_servers.find({}):`

- temp_extract/Premdebug-main/list_server_configs.py:74 - truthiness access to guilds.count_documents
  Context: `guilds_count = await db.guilds.count_documents({})`

- temp_extract/Premdebug-main/list_server_configs.py:77 - truthiness access to guilds.find
  Context: `async for guild in db.guilds.find({}):`

- temp_extract/Premdebug-main/list_server_configs.py:97 - truthiness access to servers.find
  Context: `emerald_servers = await db.servers.find({"original_server_id": "7020"}).to_list(10)`

- temp_extract/Premdebug-main/list_server_configs.py:107 - truthiness access to servers.find
  Context: `emerald_servers = await db.servers.find({"name": {"$regex": "Emerald", "$options": "i"}}).to_list(10)`

- temp_extract/Premdebug-main/maintenance.py:96 - truthiness access to guilds.update_many
  Context: `result = await db.guilds.update_many(
            {}, 
            {"$set": {
                "servers.$[].error_state": False,
                "servers.$[].last_error": None,
                "servers.$[].error_count": 0,
                "servers.$[].updated_at": datetime.utcnow().isoformat()`

- temp_extract/Premdebug-main/maintenance.py:118 - truthiness access to guilds.find
  Context: `guilds = await db.guilds.find({}).to_list(length=None)`

- temp_extract/Premdebug-main/maintenance.py:164 - truthiness access to guilds.count_documents
  Context: `guilds_count = await db.guilds.count_documents({})`

- temp_extract/Premdebug-main/maintenance.py:169 - truthiness access to guilds.find
  Context: `guilds = await db.guilds.find({}).to_list(length=None)`

- temp_extract/Premdebug-main/maintenance.py:211 - truthiness access to guilds.find
  Context: `guilds = await db.guilds.find({}).to_list(length=None)`

- temp_extract/Premdebug-main/maintenance.py:247 - direct access to _id
  Context: `result = await db.guilds.replace_one({"_id": guild_data["_id"]}, guild_data)`

- temp_extract/Premdebug-main/remove_all_servers.py:20 - truthiness access to game_servers.delete_many
  Context: `result = await db.game_servers.delete_many({})`

- temp_extract/Premdebug-main/remove_all_servers.py:24 - truthiness access to servers.delete_many
  Context: `result = await db.servers.delete_many({})`

- temp_extract/Premdebug-main/remove_all_servers.py:28 - truthiness access to guilds.update_many
  Context: `result = await db.guilds.update_many(
        {},
        {
            "$set": {
                "servers": [],
                "updated_at": datetime.utcnow()`

- temp_extract/Premdebug-main/routes.py:47 - truthiness access to session.add
  Context: `db.session.add(log)`

- temp_extract/Premdebug-main/routes.py:48 - truthiness access to session.commit
  Context: `db.session.commit()


# Routes
@app.route('/')`

- temp_extract/Premdebug-main/routes.py:116 - truthiness access to session.add
  Context: `db.session.add(user)`

- temp_extract/Premdebug-main/routes.py:117 - truthiness access to session.commit
  Context: `db.session.commit()
        
        flash('Congratulations, you are now registered!', 'success')`

- temp_extract/Premdebug-main/routes.py:143 - truthiness access to session.commit
  Context: `db.session.commit()
        flash('Your profile has been updated.', 'success')`

- temp_extract/Premdebug-main/routes.py:207 - truthiness access to session.add
  Context: `db.session.add(server)`

- temp_extract/Premdebug-main/routes.py:208 - truthiness access to session.commit
  Context: `db.session.commit()
        
        if current_user.is_admin:
            log_admin_action('server_add', f'Added server configuration for {form.server_name.data}')`

- temp_extract/Premdebug-main/routes.py:244 - truthiness access to session.commit
  Context: `db.session.commit()
        
        if current_user.is_admin:
            log_admin_action('server_edit', f'Edited server configuration for {server.server_name}')`

- temp_extract/Premdebug-main/routes.py:272 - truthiness access to session.delete
  Context: `db.session.delete(server)`

- temp_extract/Premdebug-main/routes.py:273 - truthiness access to session.commit
  Context: `db.session.commit()
    
    log_admin_action('server_delete', f'Deleted server configuration for {server_name}')`

- temp_extract/Premdebug-main/routes.py:316 - truthiness access to session.commit
  Context: `db.session.commit()
    
    action = 'Granted' if user.is_admin else 'Removed'
    log_admin_action('toggle_admin', f'{action} admin privileges for user {user.username}')`

- temp_extract/Premdebug-main/routes.py:338 - truthiness access to session.delete
  Context: `db.session.delete(user)`

- temp_extract/Premdebug-main/routes.py:339 - truthiness access to session.commit
  Context: `db.session.commit()
    
    log_admin_action('delete_user', f'Deleted user {username}')`

- temp_extract/Premdebug-main/routes.py:362 - truthiness access to session.add
  Context: `db.session.add(config)`

- temp_extract/Premdebug-main/routes.py:364 - truthiness access to session.commit
  Context: `db.session.commit()
        log_admin_action('update_config', 'Updated web configuration settings')`

- temp_extract/Premdebug-main/routes.py:384 - truthiness access to session.add
  Context: `db.session.add(config)`

- temp_extract/Premdebug-main/routes.py:387 - truthiness access to session.commit
  Context: `db.session.commit()
    
    return render_template('admin_config.html', title='Site Configuration',
                          configs=config_dict)`

- temp_extract/Premdebug-main/routes.py:452 - truthiness access to session.add
  Context: `db.session.add(stat)`

- temp_extract/Premdebug-main/routes.py:454 - truthiness access to session.commit
  Context: `db.session.commit()
        return jsonify({'success': True})`

- temp_extract/Premdebug-main/routes.py:470 - truthiness access to session.rollback
  Context: `db.session.rollback()
    return render_template('errors/500.html'), 500`

- temp_extract/Premdebug-main/run_premium_diagnostics.py:46 - truthiness access to guilds.find_one
  Context: `premium_guild = await db.guilds.find_one({"premium_tier": {"$gt": 0}})`

- temp_extract/Premdebug-main/run_premium_diagnostics.py:53 - truthiness access to guilds.find_one
  Context: `any_guild = await db.guilds.find_one({})`

- temp_extract/Premdebug-main/run_premium_diagnostics.py:70 - truthiness access to guilds.find_one
  Context: `guild_doc = await db.guilds.find_one({"guild_id": str(guild_id)})`

- temp_extract/Premdebug-main/run_premium_diagnostics.py:86 - direct access to _id
  Context: `update_result = await db.guilds.update_one(
                        {"_id": guild_doc["_id"]},
                        {"$set": {"premium_tier": corrected_tier}}
                    )`

- temp_extract/Premdebug-main/run_premium_diagnostics.py:242 - truthiness access to guilds.find_one
  Context: `updated_doc = await db.guilds.find_one({"guild_id": str(guild_id)})`

- temp_extract/Premdebug-main/run_premium_diagnostics.py:87 - direct access to _id
  Context: `{"_id": guild_doc["_id"]},`

- temp_extract/Premdebug-main/run_premium_diagnostics.py:71 - truthiness access to unknown
  Context: `if guild_doc:`

- temp_extract/Premdebug-main/run_premium_verification.py:48 - truthiness access to guilds.find_one
  Context: `db_doc = await db.guilds.find_one({"guild_id": str(guild_id)})`

- temp_extract/Premdebug-main/run_premium_verification.py:50 - truthiness access to guilds.find_one
  Context: `db_doc = await db.guilds.find_one({"guild_id": int(guild_id) if guild_id.isdigit() else None})`

- temp_extract/Premdebug-main/set_home_guild.py:20 - truthiness access to bot_config.update_one
  Context: `await db.bot_config.update_one(
        {"key": "home_guild_id"}, 
        {"$set": {"key": "home_guild_id", "value": str(guild_id)}},`

- temp_extract/Premdebug-main/set_home_guild.py:32 - truthiness access to bot_config.find_one
  Context: `config = await db.bot_config.find_one({"key": "home_guild_id"})`

- temp_extract/Premdebug-main/cogs/admin.py:56 - truthiness access to guilds.insert_one
  Context: `await self.bot.db.guilds.insert_one(guild.to_dict())`

- temp_extract/Premdebug-main/cogs/admin.py:134 - truthiness access to guilds.insert_one
  Context: `await self.bot.db.guilds.insert_one(target_guild.to_dict())`

- temp_extract/Premdebug-main/cogs/admin.py:223 - truthiness access to game_servers.count_documents
  Context: `server_count = await self.bot.db.game_servers.count_documents({})`

- temp_extract/Premdebug-main/cogs/admin.py:224 - truthiness access to players.count_documents
  Context: `player_count = await self.bot.db.players.count_documents({})`

- temp_extract/Premdebug-main/cogs/admin.py:225 - truthiness access to kills.count_documents
  Context: `kill_count = await self.bot.db.kills.count_documents({})`

- temp_extract/Premdebug-main/cogs/admin.py:288 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- temp_extract/Premdebug-main/cogs/admin.py:291 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- temp_extract/Premdebug-main/cogs/admin.py:321 - truthiness access to bot_config.update_one
  Context: `await self.bot.db.bot_config.update_one(
                    {"key": "home_guild_id"}, 
                    {"$set": {"key": "home_guild_id", "value": str(ctx.guild.id)}},`

- temp_extract/Premdebug-main/cogs/admin.py:390 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- temp_extract/Premdebug-main/cogs/admin.py:393 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- temp_extract/Premdebug-main/cogs/bounties.py:96 - truthiness access to guilds.find
  Context: `guilds_cursor = db.db.guilds.find({})`

- temp_extract/Premdebug-main/cogs/bounties.py:228 - truthiness access to guilds.find_one
  Context: `guild_data = await db.db.guilds.find_one({"guild_id": str(guild_id)})`

- temp_extract/Premdebug-main/cogs/bounties.py:231 - truthiness access to guilds.find_one
  Context: `guild_data = await db.db.guilds.find_one({"guild_id": int(guild_id)})`

- temp_extract/Premdebug-main/cogs/bounties.py:420 - truthiness access to players.find_one
  Context: `player_data = await db.db.players.find_one(player_query)`

- temp_extract/Premdebug-main/cogs/bounties.py:428 - truthiness access to players.find_one
  Context: `player_data = await db.db.players.find_one(player_query)`

- temp_extract/Premdebug-main/cogs/bounties.py:451 - truthiness access to player_links.find_one
  Context: `self_link = await db.db.player_links.find_one(link_query)`

- temp_extract/Premdebug-main/cogs/bounties.py:793 - truthiness access to guilds.find_one
  Context: `guild_data = await db.db.guilds.find_one({"guild_id": str(guild_id)})`

- temp_extract/Premdebug-main/cogs/bounties.py:796 - truthiness access to guilds.find_one
  Context: `guild_data = await db.db.guilds.find_one({"guild_id": int(guild_id)})`

- temp_extract/Premdebug-main/cogs/bounties.py:892 - truthiness access to guilds.update_one
  Context: `await db.db.guilds.update_one(
                {"guild_id": guild_id},
                {"$set": update}
            )`

- temp_extract/Premdebug-main/cogs/csv_processor.py:127 - truthiness access to csv_processor_state.find
  Context: `server_states_cursor = self.bot.db.csv_processor_state.find({})`

- temp_extract/Premdebug-main/cogs/csv_processor.py:169 - truthiness access to bot_config.find_one
  Context: `legacy_state = await self.bot.db.bot_config.find_one({"key": "csv_processor_state"})`

- temp_extract/Premdebug-main/cogs/csv_processor.py:193 - truthiness access to bot_config.delete_one
  Context: `await self.bot.db.bot_config.delete_one({"key": "csv_processor_state"})`

- temp_extract/Premdebug-main/cogs/csv_processor.py:235 - truthiness access to csv_processor_state.update_one
  Context: `await self.bot.db.csv_processor_state.update_one(
                    {"server_id": server_id},
                    {"$set": state},
                    upsert=True
                )`

- temp_extract/Premdebug-main/cogs/csv_processor.py:613 - truthiness access to servers.find
  Context: `servers_cursor = self.bot.db.servers.find({
                "$and": [
                    {"sftp_host": {"$exists": True}},
                    {"sftp_username": {"$exists": True}},
                    {"sftp_password": {"$exists": True}}
                ]
            })`

- temp_extract/Premdebug-main/cogs/csv_processor.py:652 - truthiness access to game_servers.find
  Context: `game_servers_cursor = self.bot.db.game_servers.find({
                "$and": [
                    {"sftp_host": {"$exists": True}},
                    {"sftp_username": {"$exists": True}},
                    {"sftp_password": {"$exists": True}}
                ]
            })`

- temp_extract/Premdebug-main/cogs/csv_processor.py:686 - truthiness access to guilds.find
  Context: `guilds_cursor = self.bot.db.guilds.find({})`

- temp_extract/Premdebug-main/cogs/csv_processor.py:2434 - truthiness access to kills.insert_many
  Context: `result = await self.bot.db.kills.insert_many(kill_docs, ordered=False)`

- temp_extract/Premdebug-main/cogs/csv_processor.py:2469 - truthiness access to kills.insert_many
  Context: `result = await self.bot.db.kills.insert_many(suicide_docs, ordered=False)`

- temp_extract/Premdebug-main/cogs/csv_processor.py:2549 - truthiness access to kills.insert_many
  Context: `result = await self.bot.db.kills.insert_many(suicide_docs, ordered=False)`

- temp_extract/Premdebug-main/cogs/csv_processor.py:2577 - truthiness access to kills.insert_many
  Context: `result = await self.bot.db.kills.insert_many(kill_docs, ordered=False)`

- temp_extract/Premdebug-main/cogs/csv_processor.py:2816 - truthiness access to kills.delete_many
  Context: `kill_result = await self.bot.db.kills.delete_many({"server_id": server_id})`

- temp_extract/Premdebug-main/cogs/csv_processor.py:2823 - truthiness access to players.update_many
  Context: `player_result = await self.bot.db.players.update_many(
                    {"server_id": server_id},
                    {"$set": {
                        "kills": 0,
                        "deaths": 0,
                        "last_updated": datetime.now(),`

- temp_extract/Premdebug-main/cogs/csv_processor.py:2838 - truthiness access to rivalries.delete_many
  Context: `rivalry_result = await self.bot.db.rivalries.delete_many({"server_id": server_id})`

- temp_extract/Premdebug-main/cogs/csv_processor.py:2968 - truthiness access to kills.delete_many
  Context: `kill_result = await self.bot.db.kills.delete_many({"server_id": resolved_server_id})`

- temp_extract/Premdebug-main/cogs/csv_processor.py:2975 - truthiness access to players.update_many
  Context: `player_reset = await self.bot.db.players.update_many(
                            {"server_id": resolved_server_id},
                            {"$set": {"kills": 0, "deaths": 0, "suicides": 0, "updated_at": datetime.utcnow()}}`

- temp_extract/Premdebug-main/cogs/csv_processor.py:2985 - truthiness access to rivalries.delete_many
  Context: `rivalry_result = await self.bot.db.rivalries.delete_many({"server_id": resolved_server_id})`

- temp_extract/Premdebug-main/cogs/csv_processor.py:3098 - truthiness access to csv_processor_state.delete_one
  Context: `state_result = await self.bot.db.csv_processor_state.delete_one({"server_id": server_id})`

- temp_extract/Premdebug-main/cogs/csv_processor.py:3112 - truthiness access to kills.delete_many
  Context: `kill_result = await self.bot.db.kills.delete_many({"server_id": server_id})`

- temp_extract/Premdebug-main/cogs/csv_processor.py:3116 - truthiness access to players.update_many
  Context: `player_reset = await self.bot.db.players.update_many(
                {"server_id": server_id},
                {"$set": {"kills": 0, "deaths": 0, "suicides": 0, "updated_at": datetime.utcnow()}}`

- temp_extract/Premdebug-main/cogs/csv_processor.py:3123 - truthiness access to rivalries.delete_many
  Context: `rivalry_result = await self.bot.db.rivalries.delete_many({"server_id": server_id})`

- temp_extract/Premdebug-main/cogs/csv_processor.py:3202 - truthiness access to guilds.find_one
  Context: `guild_doc = await self.bot.db.guilds.find_one({"guild_id": guild_id})`

- temp_extract/Premdebug-main/cogs/csv_processor.py:3354 - truthiness access to guilds.find_one
  Context: `guild_doc = await self.bot.db.guilds.find_one({"guild_id": guild_id})`

- temp_extract/Premdebug-main/cogs/csv_processor.py:3421 - truthiness access to kills.count_documents
  Context: `kills_count = await self.bot.db.kills.count_documents({
                        "server_id": server_id,
                        "is_suicide": False,
                        "timestamp": {"$gte": datetime.now() - timedelta(days=safe_days)}`

- temp_extract/Premdebug-main/cogs/csv_processor.py:3427 - truthiness access to kills.count_documents
  Context: `suicides_count = await self.bot.db.kills.count_documents({
                        "server_id": server_id,
                        "is_suicide": True,
                        "timestamp": {"$gte": datetime.now() - timedelta(days=safe_days)}`

- temp_extract/Premdebug-main/cogs/csv_processor.py:3446 - truthiness access to kills.aggregate
  Context: `result = await self.bot.db.kills.aggregate(pipeline).to_list(length=1)`

- temp_extract/Premdebug-main/cogs/csv_processor.py:3753 - truthiness access to kills.insert_one
  Context: `await self.bot.db.kills.insert_one(suicide_doc)`

- temp_extract/Premdebug-main/cogs/csv_processor.py:3792 - truthiness access to kills.insert_one
  Context: `await self.bot.db.kills.insert_one(kill_doc)`

- temp_extract/Premdebug-main/cogs/csv_processor.py:3876 - truthiness access to players.update_one
  Context: `result = await self.bot.db.players.update_one(
                {"player_id": player_id},  # Match by player_id
                {
                    "$set": player_data,
                    "$setOnInsert": {
                        "created_at": now,  # Only set on new records
                        "kills": 0,
                        "deaths": 0, 
                        "suicides": 0
                    }
                },
                upsert=True  # Create if doesn't exist
            )`

- temp_extract/Premdebug-main/cogs/csv_processor.py:3938 - truthiness access to csv_processor_state.delete_one
  Context: `state_result = await self.bot.db.csv_processor_state.delete_one({"server_id": server_id})`

- temp_extract/Premdebug-main/cogs/csv_processor_backup.py:139 - truthiness access to servers.find
  Context: `servers_cursor = self.bot.db.servers.find({
                "$and": [
                    {"sftp_host": {"$exists": True}},
                    {"sftp_username": {"$exists": True}},
                    {"sftp_password": {"$exists": True}}
                ]
            })`

- temp_extract/Premdebug-main/cogs/csv_processor_backup.py:165 - truthiness access to game_servers.find
  Context: `game_servers_cursor = self.bot.db.game_servers.find({
                "$and": [
                    {"sftp_host": {"$exists": True}},
                    {"sftp_username": {"$exists": True}},
                    {"sftp_password": {"$exists": True}}
                ]
            })`

- temp_extract/Premdebug-main/cogs/csv_processor_backup.py:196 - truthiness access to guilds.find
  Context: `guilds_cursor = self.bot.db.guilds.find({})`

- temp_extract/Premdebug-main/cogs/csv_processor_backup.py:1001 - truthiness access to guilds.find_one
  Context: `guild_doc = await self.bot.db.guilds.find_one({"guild_id": guild_id})`

- temp_extract/Premdebug-main/cogs/csv_processor_backup.py:1143 - truthiness access to guilds.find_one
  Context: `guild_doc = await self.bot.db.guilds.find_one({"guild_id": guild_id})`

- temp_extract/Premdebug-main/cogs/csv_processor_backup.py:1378 - truthiness access to kills.insert_one
  Context: `await self.bot.db.kills.insert_one(kill_doc)`

- temp_extract/Premdebug-main/cogs/csv_processor_backup.py:1415 - truthiness access to players.insert_one
  Context: `await self.bot.db.players.insert_one(player.__dict__)`

- temp_extract/Premdebug-main/cogs/csv_processor_backup.py:1003 - direct access to default_server_id
  Context: `raw_server_id = guild_doc["default_server_id"]`

- temp_extract/Premdebug-main/cogs/csv_processor_backup.py:1145 - direct access to default_server_id
  Context: `raw_server_id = guild_doc["default_server_id"]`

- temp_extract/Premdebug-main/cogs/economy.py:936 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- temp_extract/Premdebug-main/cogs/economy.py:939 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- temp_extract/Premdebug-main/cogs/events.py:51 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- temp_extract/Premdebug-main/cogs/events.py:54 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- temp_extract/Premdebug-main/cogs/events.py:140 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- temp_extract/Premdebug-main/cogs/events.py:143 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- temp_extract/Premdebug-main/cogs/events.py:160 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- temp_extract/Premdebug-main/cogs/events.py:163 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- temp_extract/Premdebug-main/cogs/events.py:263 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- temp_extract/Premdebug-main/cogs/events.py:266 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- temp_extract/Premdebug-main/cogs/events.py:327 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- temp_extract/Premdebug-main/cogs/events.py:330 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- temp_extract/Premdebug-main/cogs/events.py:343 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- temp_extract/Premdebug-main/cogs/events.py:346 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- temp_extract/Premdebug-main/cogs/events.py:454 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- temp_extract/Premdebug-main/cogs/events.py:457 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- temp_extract/Premdebug-main/cogs/events.py:476 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- temp_extract/Premdebug-main/cogs/events.py:479 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- temp_extract/Premdebug-main/cogs/events.py:600 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- temp_extract/Premdebug-main/cogs/events.py:603 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- temp_extract/Premdebug-main/cogs/events.py:616 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- temp_extract/Premdebug-main/cogs/events.py:619 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- temp_extract/Premdebug-main/cogs/events.py:730 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- temp_extract/Premdebug-main/cogs/events.py:733 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- temp_extract/Premdebug-main/cogs/events.py:864 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- temp_extract/Premdebug-main/cogs/events.py:867 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- temp_extract/Premdebug-main/cogs/events.py:989 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- temp_extract/Premdebug-main/cogs/events.py:992 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- temp_extract/Premdebug-main/cogs/events.py:1136 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"servers.server_id": server_id})`

- temp_extract/Premdebug-main/cogs/events.py:1179 - truthiness access to guilds.count_documents
  Context: `if await bot.db.guilds.count_documents({"guild_id": guild_id, "servers": {"$exists": True, "$ne": []}}) == 0:`

- temp_extract/Premdebug-main/cogs/events.py:1626 - truthiness access to guilds.find_one
  Context: `guild_data = await bot.db.guilds.find_one({"servers.server_id": server.server_id})`

- temp_extract/Premdebug-main/cogs/events.py:1687 - truthiness access to guilds.find_one
  Context: `guild_data = await bot.db.guilds.find_one({"servers.server_id": server.server_id})`

- temp_extract/Premdebug-main/cogs/killfeed.py:54 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- temp_extract/Premdebug-main/cogs/killfeed.py:57 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- temp_extract/Premdebug-main/cogs/killfeed.py:74 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- temp_extract/Premdebug-main/cogs/killfeed.py:77 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- temp_extract/Premdebug-main/cogs/killfeed.py:170 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- temp_extract/Premdebug-main/cogs/killfeed.py:173 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- temp_extract/Premdebug-main/cogs/killfeed.py:231 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- temp_extract/Premdebug-main/cogs/killfeed.py:234 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- temp_extract/Premdebug-main/cogs/killfeed.py:247 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- temp_extract/Premdebug-main/cogs/killfeed.py:250 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- temp_extract/Premdebug-main/cogs/killfeed.py:359 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"servers.server_id": server_id})`

- temp_extract/Premdebug-main/cogs/killfeed.py:402 - truthiness access to guilds.count_documents
  Context: `if await bot.db.guilds.count_documents({"guild_id": guild_id, "servers": {"$exists": True, "$ne": []}}) == 0:`

- temp_extract/Premdebug-main/cogs/killfeed.py:771 - truthiness access to kills.insert_one
  Context: `await bot.db.kills.insert_one(kill_event)`

- temp_extract/Premdebug-main/cogs/killfeed.py:784 - truthiness access to guilds.find_one
  Context: `guild_data = await bot.db.guilds.find_one({"servers.server_id": server.server_id})`

- temp_extract/Premdebug-main/cogs/killfeed.py:921 - truthiness access to guilds.find_one
  Context: `guild_data = await bot.db.guilds.find_one({"servers.server_id": server_id})`

- temp_extract/Premdebug-main/cogs/log_processor.py:532 - truthiness access to servers.find_one
  Context: `server_doc = await self.bot.db.servers.find_one({"_id": server_id})`

- temp_extract/Premdebug-main/cogs/log_processor.py:570 - truthiness access to servers.find
  Context: `server_docs = await self.bot.db.servers.find({"original_server_id": {"$exists": True}}).to_list(10)`

- temp_extract/Premdebug-main/cogs/log_processor.py:1106 - truthiness access to kills.insert_one
  Context: `await self.bot.db.kills.insert_one(kill_doc)`

- temp_extract/Premdebug-main/cogs/log_processor.py:1163 - truthiness access to connections.insert_one
  Context: `await self.bot.db.connections.insert_one(connection_doc)`

- temp_extract/Premdebug-main/cogs/log_processor.py:1214 - truthiness access to missions.insert_one
  Context: `await self.bot.db.missions.insert_one(mission_doc)`

- temp_extract/Premdebug-main/cogs/log_processor.py:1228 - truthiness access to game_events.insert_one
  Context: `await self.bot.db.game_events.insert_one(game_event_doc)`

- temp_extract/Premdebug-main/cogs/log_processor.py:1267 - truthiness access to players.insert_one
  Context: `await self.bot.db.players.insert_one(player.__dict__)`

- temp_extract/Premdebug-main/cogs/log_processor.py:534 - direct access to original_server_id
  Context: `path_server_id = server_doc["original_server_id"]`

- temp_extract/Premdebug-main/cogs/new_csv_processor.py:209 - truthiness access to servers.find
  Context: `async for server in self.bot.db.servers.find({"sftp_enabled": True}):`

- temp_extract/Premdebug-main/cogs/new_csv_processor.py:220 - truthiness access to game_servers.find
  Context: `async for server in self.bot.db.game_servers.find({"sftp_enabled": True}):`

- temp_extract/Premdebug-main/cogs/new_csv_processor.py:231 - truthiness access to guilds.find
  Context: `async for guild in self.bot.db.guilds.find({}):`

- temp_extract/Premdebug-main/cogs/new_csv_processor.py:741 - truthiness access to kills.insert_one
  Context: `await self.bot.db.kills.insert_one(kill_record)`

- temp_extract/Premdebug-main/cogs/new_csv_processor.py:748 - direct access to _id
  Context: `await self.bot.db.players.update_stats(killer["_id"], "kills")`

- temp_extract/Premdebug-main/cogs/new_csv_processor.py:749 - direct access to _id
  Context: `await self.bot.db.players.update_stats(victim["_id"], "deaths")`

- temp_extract/Premdebug-main/cogs/new_csv_processor.py:752 - direct access to _id
  Context: `await self.bot.db.rivalries.update_nemesis_and_prey(
                    killer_id=killer["_id"],
                    victim_id=victim["_id"],
                    server_id=server_id
                )`

- temp_extract/Premdebug-main/cogs/new_csv_processor.py:782 - truthiness access to players.find_one
  Context: `player = await self.bot.db.players.find_one({
                "player_id": player_id,
                "server_id": server_id
            })`

- temp_extract/Premdebug-main/cogs/new_csv_processor.py:796 - direct access to _id
  Context: `await self.bot.db.players.update_one(
                        {"_id": player["_id"]},
                        {"$set": {"name": player_name, "known_aliases": known_aliases}}
                    )`

- temp_extract/Premdebug-main/cogs/new_csv_processor.py:815 - truthiness access to players.insert_one
  Context: `result = await self.bot.db.players.insert_one(new_player)`

- temp_extract/Premdebug-main/cogs/new_csv_processor.py:818 - truthiness access to players.find_one
  Context: `return await self.bot.db.players.find_one({"_id": result.inserted_id})`

- temp_extract/Premdebug-main/cogs/premium.py:43 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- temp_extract/Premdebug-main/cogs/premium.py:46 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- temp_extract/Premdebug-main/cogs/setup.py:375 - truthiness access to servers.find_one
  Context: `server_doc = await self.bot.db.servers.find_one({"server_id": server_id})`

- temp_extract/Premdebug-main/cogs/setup.py:387 - truthiness access to game_servers.find_one
  Context: `server_doc = await self.bot.db.game_servers.find_one({"server_id": server_id})`

- temp_extract/Premdebug-main/cogs/setup.py:401 - truthiness access to guilds.find_one
  Context: `guild_doc = await self.bot.db.guilds.find_one({"guild_id": guild_id_str})`

- temp_extract/Premdebug-main/cogs/setup.py:441 - truthiness access to guilds.update_one
  Context: `await self.bot.db.guilds.update_one(
                                        {"guild_id": guild_id_str, "servers.server_id": server_id},
                                        {"$set": {"servers.$.historical_parse_done": True}}
                                    )`

- temp_extract/Premdebug-main/cogs/setup.py:634 - truthiness access to guilds.update_one
  Context: `await self.bot.db.guilds.update_one(
                                {"guild_id": guild_id_val, "servers.server_id": std_server_id},
                                {"$set": {"servers.$.historical_parse_done": False}}
                            )`

- temp_extract/Premdebug-main/cogs/setup.py:641 - truthiness access to servers.update_one
  Context: `await self.bot.db.servers.update_one(
                                {"server_id": std_server_id},
                                {"$set": {"historical_parse_done": False}}
                            )`

- temp_extract/Premdebug-main/cogs/setup.py:657 - truthiness access to game_servers.delete_many
  Context: `result = await self.bot.db.game_servers.delete_many({"server_id": std_server_id})`

- temp_extract/Premdebug-main/cogs/setup.py:661 - truthiness access to servers.delete_many
  Context: `result = await self.bot.db.servers.delete_many({"server_id": std_server_id})`

- temp_extract/Premdebug-main/cogs/setup.py:665 - truthiness access to players.update_many
  Context: `player_result = await self.bot.db.players.update_many(
                                {"server_id": std_server_id},
                                {"$set": {"active": False, "updated_at": datetime.utcnow()}}`

- temp_extract/Premdebug-main/cogs/setup.py:672 - truthiness access to kills.delete_many
  Context: `kills_result = await self.bot.db.kills.delete_many({"server_id": std_server_id})`

- temp_extract/Premdebug-main/cogs/setup.py:676 - truthiness access to rivalries.delete_many
  Context: `rivalries_result = await self.bot.db.rivalries.delete_many({"server_id": std_server_id})`

- temp_extract/Premdebug-main/cogs/setup.py:691 - truthiness access to csv_processor_state.delete_one
  Context: `state_result = await self.bot.db.csv_processor_state.delete_one({"server_id": std_server_id})`

- temp_extract/Premdebug-main/cogs/stats.py:88 - truthiness access to players.find
  Context: `players_cursor = interaction.client.db.players.find(
                    {"server_id": str(server_id), "active": True},`

- temp_extract/Premdebug-main/cogs/stats.py:588 - truthiness access to kills.aggregate
  Context: `cursor = self.bot.db.kills.aggregate(pipeline)`

- temp_extract/Premdebug-main/cogs/stats.py:675 - truthiness access to kills.aggregate
  Context: `cursor = self.bot.db.kills.aggregate(pipeline)`

- temp_extract/Premdebug-main/cogs/stats.py:789 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- temp_extract/Premdebug-main/cogs/stats.py:792 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- temp_extract/Premdebug-main/cogs/stats.py:805 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- temp_extract/Premdebug-main/cogs/stats.py:808 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- temp_extract/Premdebug-main/cogs/stats.py:1069 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- temp_extract/Premdebug-main/cogs/stats.py:1072 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- temp_extract/Premdebug-main/cogs/stats.py:1152 - truthiness access to kills.aggregate
  Context: `cursor = self.bot.db.kills.aggregate(pipeline)`

- temp_extract/Premdebug-main/cogs/stats.py:1249 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- temp_extract/Premdebug-main/cogs/stats.py:1252 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- temp_extract/Premdebug-main/cogs/stats.py:1265 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- temp_extract/Premdebug-main/cogs/stats.py:1268 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- temp_extract/Premdebug-main/cogs/stats.py:1335 - truthiness access to kills.aggregate
  Context: `cursor = self.bot.db.kills.aggregate(pipeline)`

- temp_extract/Premdebug-main/cogs/stats.py:1379 - truthiness access to kills.aggregate
  Context: `top_users_cursor = self.bot.db.kills.aggregate(top_users_pipeline)`

- temp_extract/Premdebug-main/diagnostics/server_trace.py:57 - truthiness access to guilds.find
  Context: `guilds_cursor = db.guilds.find(guild_query)`

- temp_extract/Premdebug-main/diagnostics/server_trace.py:101 - truthiness access to servers.find_one
  Context: `server_in_servers = await db.servers.find_one({"server_id": std_server_id})`

- temp_extract/Premdebug-main/diagnostics/server_trace.py:124 - truthiness access to game_servers.find_one
  Context: `server_in_game_servers = await db.game_servers.find_one({"server_id": std_server_id})`

- temp_extract/Premdebug-main/models/base_model.py:71 - direct access to key
  Context: `document[key] = value`

- temp_extract/Premdebug-main/models/bounty.py:94 - truthiness access to bounties.find_one
  Context: `document = await db.bounties.find_one({"bounty_id": bounty_id})`

- temp_extract/Premdebug-main/models/bounty.py:115 - truthiness access to bounties.find
  Context: `cursor = db.bounties.find(query)`

- temp_extract/Premdebug-main/models/bounty.py:147 - truthiness access to bounties.find
  Context: `cursor = db.bounties.find(query)`

- temp_extract/Premdebug-main/models/bounty.py:178 - truthiness access to bounties.find
  Context: `cursor = db.bounties.find(query)`

- temp_extract/Premdebug-main/models/bounty.py:203 - truthiness access to bounties.find
  Context: `cursor = db.bounties.find(query)`

- temp_extract/Premdebug-main/models/bounty.py:231 - truthiness access to bounties.find
  Context: `cursor = db.bounties.find(query)`

- temp_extract/Premdebug-main/models/bounty.py:264 - truthiness access to bounties.update_one
  Context: `result = await db.bounties.update_one(
            {"bounty_id": self.bounty_id},
            {"$set": {
                "status": self.status,
                "claimed_by_id": self.claimed_by_id,
                "claimed_by_name": self.claimed_by_name,
                "claimed_at": self.claimed_at,
                "updated_at": self.updated_at
            }}
        )`

- temp_extract/Premdebug-main/models/bounty.py:293 - truthiness access to bounties.update_one
  Context: `result = await db.bounties.update_one(
            {"bounty_id": self.bounty_id},
            {"$set": {
                "status": self.status,
                "updated_at": self.updated_at
            }}
        )`

- temp_extract/Premdebug-main/models/bounty.py:319 - truthiness access to bounties.update_one
  Context: `result = await db.bounties.update_one(
            {"bounty_id": self.bounty_id},
            {"$set": {
                "status": self.status,
                "updated_at": self.updated_at
            }}
        )`

- temp_extract/Premdebug-main/models/bounty.py:442 - truthiness access to bounties.insert_one
  Context: `await db.bounties.insert_one(bounty.to_document())`

- temp_extract/Premdebug-main/models/bounty.py:468 - truthiness access to players.find_one
  Context: `hunter_doc = await db.players.find_one({"player_id": killer_id})`

- temp_extract/Premdebug-main/models/bounty.py:502 - truthiness access to bounties.update_many
  Context: `result = await db.bounties.update_many(
            query,
            {
                "$set": {
                    "status": cls.STATUS_EXPIRED,
                    "updated_at": now
                }
            }
        )`

- temp_extract/Premdebug-main/models/bounty.py:574 - truthiness access to events.aggregate
  Context: `cursor = db.db.events.aggregate(pipeline)`

- temp_extract/Premdebug-main/models/economy.py:66 - truthiness access to economy.find_one
  Context: `document = await db.economy.find_one({"player_id": player_id})`

- temp_extract/Premdebug-main/models/economy.py:80 - truthiness access to economy.find_one
  Context: `document = await db.economy.find_one({"discord_id": discord_id})`

- temp_extract/Premdebug-main/models/economy.py:118 - truthiness access to economy.update_one
  Context: `result = await db.economy.update_one(
            {"player_id": self.player_id},
            {"$set": {
                "balance": self.balance,
                "lifetime_earnings": self.lifetime_earnings,
                "updated_at": self.updated_at
            },
            "$push": {
                "transactions": transaction
            }}
        )`

- temp_extract/Premdebug-main/models/economy.py:167 - truthiness access to economy.update_one
  Context: `result = await db.economy.update_one(
            {"player_id": self.player_id},
            {"$set": {
                "balance": self.balance,
                "lifetime_spent": self.lifetime_spent,
                "updated_at": self.updated_at
            },
            "$push": {
                "transactions": transaction
            }}
        )`

- temp_extract/Premdebug-main/models/economy.py:202 - truthiness access to economy.update_one
  Context: `await db.economy.update_one(
                    {"player_id": player_id},
                    {"$set": {"discord_id": discord_id, "updated_at": economy.updated_at}}
                )`

- temp_extract/Premdebug-main/models/economy.py:223 - truthiness access to economy.insert_one
  Context: `await db.economy.insert_one(economy.to_document())`

- temp_extract/Premdebug-main/models/economy.py:243 - truthiness access to economy.find
  Context: `cursor = db.economy.find(query).sort("balance", -1).limit(limit)`

- temp_extract/Premdebug-main/models/event.py:52 - truthiness access to events.insert_one
  Context: `result = await db.events.insert_one(event_data)`

- temp_extract/Premdebug-main/models/event.py:67 - truthiness access to events.find
  Context: `cursor = db.events.find(
            query,
            sort=[("timestamp", -1)],`

- temp_extract/Premdebug-main/models/event.py:81 - truthiness access to events.find_one
  Context: `event_data = await db.events.find_one(
            {
                "server_id": server_id,
                "event_type": event_type
            },
            sort=[("timestamp", -1)]`

- temp_extract/Premdebug-main/models/event.py:97 - truthiness access to events.count_documents
  Context: `return await db.events.count_documents({
            "server_id": server_id,
            "event_type": event_type
        })`

- temp_extract/Premdebug-main/models/event.py:117 - truthiness access to events.aggregate
  Context: `cursor = db.events.aggregate(pipeline)`

- temp_extract/Premdebug-main/models/event.py:156 - truthiness access to connections.insert_one
  Context: `result = await db.connections.insert_one(connection_data)`

- temp_extract/Premdebug-main/models/event.py:169 - direct access to player_id
  Context: `await db.players.update_one(
            {"player_id": player_data["player_id"], "server_id": player_data["server_id"]},
            {"$set": player_data},
            upsert=True
        )`

- temp_extract/Premdebug-main/models/event.py:182 - truthiness access to connections.find
  Context: `cursor = db.connections.find(
            {
                "server_id": server_id,
                "player_id": player_id
            },
            sort=[("timestamp", -1)],`

- temp_extract/Premdebug-main/models/event.py:200 - truthiness access to connections.find
  Context: `cursor = db.connections.find(
            {"server_id": server_id},
            sort=[("timestamp", -1)],`

- temp_extract/Premdebug-main/models/event.py:215 - truthiness access to events.find_one
  Context: `restart_event_data = await db.events.find_one(
            {"server_id": server_id, "event_type": "server_restart"},
            sort=[("timestamp", -1)]`

- temp_extract/Premdebug-main/models/event.py:236 - truthiness access to connections.aggregate
  Context: `cursor = db.connections.aggregate(pipeline)`

- temp_extract/Premdebug-main/models/guild.py:201 - truthiness access to guilds.update_one
  Context: `result = await self.db.guilds.update_one(
            {"guild_id": self.guild_id},
            {
                "$set": {
                    "servers": self.servers,
                    "updated_at": self.updated_at
                }
            }
        )`

- temp_extract/Premdebug-main/models/guild.py:219 - direct access to server_id
  Context: `server_result = await self.db.servers.update_one(
                {"server_id": server_data["server_id"]},
                {"$set": server_data},
                upsert=True  # Create if doesn't exist
            )`

- temp_extract/Premdebug-main/models/guild.py:227 - direct access to server_id
  Context: `game_server_result = await self.db.game_servers.update_one(
                {"server_id": server_data["server_id"]},
                {"$set": server_data},
                upsert=True
            )`

- temp_extract/Premdebug-main/models/guild.py:339 - truthiness access to guilds.update_one
  Context: `guild_result = await self.db.guilds.update_one(
            {"guild_id": self.guild_id},
            {
                "$set": {
                    "servers": self.servers,
                    "updated_at": self.updated_at
                }
            }
        )`

- temp_extract/Premdebug-main/models/guild.py:351 - truthiness access to servers.delete_many
  Context: `standalone_exact = await self.db.servers.delete_many({"server_id": standardized_server_id})`

- temp_extract/Premdebug-main/models/guild.py:355 - truthiness access to servers.delete_many
  Context: `standalone_result = await self.db.servers.delete_many(standalone_query)`

- temp_extract/Premdebug-main/models/guild.py:362 - truthiness access to servers.delete_many
  Context: `numeric_result = await self.db.servers.delete_many({"server_id": numeric_id})`

- temp_extract/Premdebug-main/models/guild.py:369 - truthiness access to game_servers.delete_many
  Context: `game_exact = await self.db.game_servers.delete_many({"server_id": standardized_server_id})`

- temp_extract/Premdebug-main/models/guild.py:373 - truthiness access to game_servers.delete_many
  Context: `game_regex = await self.db.game_servers.delete_many(game_servers_query)`

- temp_extract/Premdebug-main/models/guild.py:380 - truthiness access to game_servers.delete_many
  Context: `numeric_result = await self.db.game_servers.delete_many({"server_id": numeric_id})`

- temp_extract/Premdebug-main/models/guild.py:519 - truthiness access to guilds.find_one
  Context: `document = await db.guilds.find_one({"guild_id": string_guild_id})`

- temp_extract/Premdebug-main/models/guild.py:524 - truthiness access to guilds.find_one
  Context: `document = await db.guilds.find_one({"guild_id": int(string_guild_id)})`

- temp_extract/Premdebug-main/models/guild.py:529 - truthiness access to guilds.find_one
  Context: `document = await db.guilds.find_one({"guild_id": {"$regex": f"^{string_guild_id}$", "$options": "i"}})`

- temp_extract/Premdebug-main/models/guild.py:577 - truthiness access to guilds.update_one
  Context: `result = await db.guilds.update_one(
                {"guild_id": self.guild_id},
                {"$set": {
                    "premium_tier": tier_int,  # Explicitly use tier_int for db storage
                    "updated_at": self.updated_at
                }}
            )`

- temp_extract/Premdebug-main/models/guild.py:610 - truthiness access to guilds.update_one
  Context: `result = await db.guilds.update_one(
            {"guild_id": self.guild_id},
            {"$set": {
                "admin_role_id": self.admin_role_id,
                "updated_at": self.updated_at
            }}
        )`

- temp_extract/Premdebug-main/models/guild.py:640 - truthiness access to guilds.update_one
  Context: `result = await db.guilds.update_one(
            {"guild_id": self.guild_id},
            {"$set": {
                "admin_users": self.admin_users,
                "updated_at": self.updated_at
            }}
        )`

- temp_extract/Premdebug-main/models/guild.py:667 - truthiness access to guilds.update_one
  Context: `result = await db.guilds.update_one(
            {"guild_id": self.guild_id},
            {"$set": {
                "admin_users": self.admin_users,
                "updated_at": self.updated_at
            }}
        )`

- temp_extract/Premdebug-main/models/guild.py:720 - truthiness access to guilds.update_one
  Context: `result = await db.guilds.update_one(
            {"guild_id": self.guild_id},
            {"$set": update_dict}
        )`

- temp_extract/Premdebug-main/models/guild.py:814 - truthiness access to guilds.insert_one
  Context: `result = await db.guilds.insert_one(document)`

- temp_extract/Premdebug-main/models/guild.py:816 - direct access to _id
  Context: `document["_id"] = result.inserted_id`

- temp_extract/Premdebug-main/models/player.py:231 - truthiness access to players.find_one
  Context: `document = await db.players.find_one(query)`

- temp_extract/Premdebug-main/models/player.py:254 - truthiness access to players.find
  Context: `players_cursor = db.players.find({"server_id": server_id, "active": True})`

- temp_extract/Premdebug-main/models/player.py:278 - truthiness access to kills.aggregate
  Context: `nemesis_result = await db.kills.aggregate(nemesis_pipeline).to_list(1)`

- temp_extract/Premdebug-main/models/player.py:279 - truthiness access to kills.aggregate
  Context: `prey_result = await db.kills.aggregate(prey_pipeline).to_list(1)`

- temp_extract/Premdebug-main/models/player.py:288 - truthiness access to rivalries.update_one
  Context: `await db.rivalries.update_one(
                    {"player_id": player_id, "server_id": server_id},
                    {"$set": {
                        "nemesis_id": nemesis_id,
                        "nemesis_count": nemesis_count,
                        "prey_id": prey_id,
                        "prey_count": prey_count,
                        "updated_at": datetime.utcnow()`

- temp_extract/Premdebug-main/models/player.py:320 - truthiness access to rivalries.update_nemesis_and_prey
  Context: `await db.rivalries.update_nemesis_and_prey(
                    self.server_id, player_id=self.player_id
                )`

- temp_extract/Premdebug-main/models/player.py:380 - truthiness access to players.find_one_and_update
  Context: `result = await db.players.find_one_and_update(
                    {"player_id": self.player_id, "server_id": self.server_id},
                    {"$set": update_dict},
                    return_document=ReturnDocument.AFTER,
                )`

- temp_extract/Premdebug-main/models/player.py:394 - truthiness access to players.find_one
  Context: `current_player = await db.players.find_one(
                {"player_id": self.player_id, "server_id": self.server_id}
            )`

- temp_extract/Premdebug-main/models/player.py:433 - truthiness access to players.find_one_and_update
  Context: `result = await db.players.find_one_and_update(
                {"player_id": self.player_id, "server_id": self.server_id},
                operations,
                return_document=ReturnDocument.AFTER,
            )`

- temp_extract/Premdebug-main/models/player.py:676 - truthiness access to players.find_one
  Context: `existing = await db.players.find_one(query)`

- temp_extract/Premdebug-main/models/player.py:705 - truthiness access to players.update_one
  Context: `result = await db.players.update_one(query, update_ops)`

- temp_extract/Premdebug-main/models/player.py:718 - truthiness access to players.find_one
  Context: `updated_doc = await db.players.find_one(query)`

- temp_extract/Premdebug-main/models/player.py:763 - truthiness access to players.insert_one
  Context: `result = await db.players.insert_one(player_data)`

- temp_extract/Premdebug-main/models/player.py:778 - truthiness access to players.update_one
  Context: `update_result = await db.players.update_one(
                                    query,
                                    {"$setOnInsert": player_data},
                                    upsert=True,
                                )`

- temp_extract/Premdebug-main/models/player.py:806 - truthiness access to players.find_one
  Context: `final_doc = await db.players.find_one(query)`

- temp_extract/Premdebug-main/models/player.py:959 - truthiness access to players.find_one
  Context: `document = await db.players.find_one(query)`

- temp_extract/Premdebug-main/models/player.py:974 - truthiness access to players.find
  Context: `cursor = db.players.find({"server_id": server_id})`

- temp_extract/Premdebug-main/models/player.py:1134 - truthiness access to players.find_one_and_update
  Context: `result = await db.players.find_one_and_update(
                {'player_id': self.player_id, 'server_id': self.server_id},
                update_ops,
                return_document=ReturnDocument.AFTER
            )`

- temp_extract/Premdebug-main/models/rivalry.py:654 - truthiness access to players.find_one
  Context: `player_doc = await self.db.players.find_one({"player_id": opponent_id})`

- temp_extract/Premdebug-main/models/rivalry.py:671 - truthiness access to players.find_one
  Context: `player_doc = await self.db.players.find_one({"player_id": opponent_id})`

- temp_extract/Premdebug-main/models/server.py:90 - truthiness access to game_servers.find_one
  Context: `document = await db.game_servers.find_one({"server_id": server_id})`

- temp_extract/Premdebug-main/models/server.py:127 - truthiness access to game_servers.find_one
  Context: `existing = await db.game_servers.find_one({"server_id": self.server_id})`

- temp_extract/Premdebug-main/models/server.py:131 - truthiness access to game_servers.update_one
  Context: `result = await db.game_servers.update_one(
                    {"server_id": self.server_id},
                    {"$set": doc}
                )`

- temp_extract/Premdebug-main/models/server.py:138 - truthiness access to game_servers.insert_one
  Context: `result = await db.game_servers.insert_one(doc)`

- temp_extract/Premdebug-main/models/server.py:146 - truthiness access to servers.update_one
  Context: `servers_result = await db.servers.update_one(
                    {"server_id": self.server_id},
                    {"$set": doc},
                    upsert=True
                )`

- temp_extract/Premdebug-main/models/server.py:188 - truthiness access to game_servers.find_one
  Context: `document = await db.game_servers.find_one(query)`

- temp_extract/Premdebug-main/models/server.py:201 - truthiness access to game_servers.find_one
  Context: `document = await db.game_servers.find_one(new_query)`

- temp_extract/Premdebug-main/models/server.py:212 - truthiness access to servers.find_one
  Context: `document = await db.servers.find_one(server_query)`

- temp_extract/Premdebug-main/models/server.py:220 - truthiness access to servers.find_one
  Context: `document = await db.servers.find_one(regex_server_query)`

- temp_extract/Premdebug-main/models/server.py:245 - truthiness access to guilds.find_one
  Context: `guild_doc = await db.guilds.find_one({"guild_id": str(guild_id)})`

- temp_extract/Premdebug-main/models/server.py:303 - truthiness access to game_servers.find_one
  Context: `document = await db.game_servers.find_one({"name": name, "guild_id": guild_id_str})`

- temp_extract/Premdebug-main/models/server.py:308 - truthiness access to servers.find_one
  Context: `document = await db.servers.find_one({"name": name, "guild_id": guild_id_str})`

- temp_extract/Premdebug-main/models/server.py:332 - truthiness access to guilds.find_one
  Context: `guild_doc = await db.guilds.find_one({"guild_id": guild_id_str})`

- temp_extract/Premdebug-main/models/server.py:387 - truthiness access to game_servers.find
  Context: `game_servers_cursor = db.game_servers.find({"guild_id": guild_id_str})`

- temp_extract/Premdebug-main/models/server.py:399 - truthiness access to servers.find
  Context: `servers_cursor = db.servers.find({"guild_id": guild_id_str})`

- temp_extract/Premdebug-main/models/server.py:431 - truthiness access to guilds.find_one
  Context: `guild_doc = await db.guilds.find_one({"guild_id": guild_id_str})`

- temp_extract/Premdebug-main/models/server.py:487 - truthiness access to game_servers.find_one
  Context: `document = await db.game_servers.find_one({"guild_id": guild_id_str})`

- temp_extract/Premdebug-main/models/server.py:492 - truthiness access to servers.find_one
  Context: `document = await db.servers.find_one({"guild_id": guild_id_str})`

- temp_extract/Premdebug-main/models/server.py:517 - truthiness access to guilds.find_one
  Context: `guild_doc = await db.guilds.find_one({"guild_id": guild_id_str})`

- temp_extract/Premdebug-main/models/server.py:580 - truthiness access to game_servers.update_one
  Context: `result = await db.game_servers.update_one(
            {"server_id": self.server_id},
            {"$set": update_dict}
        )`

- temp_extract/Premdebug-main/models/server.py:614 - truthiness access to game_servers.update_one
  Context: `result = await db.game_servers.update_one(
            {"server_id": self.server_id},
            {"$set": {
                "hostname": self.hostname,
                "port": self.port,
                "username": self.username,
                "password": self.password,
                "sftp_host": self.sftp_host,
                "sftp_port": self.sftp_port,
                "sftp_username": self.sftp_username,
                "sftp_password": self.sftp_password,
                "sftp_directory": self.sftp_directory,
                "updated_at": self.updated_at
            }}
        )`

- temp_extract/Premdebug-main/models/server.py:646 - truthiness access to game_servers.update_one
  Context: `result = await db.game_servers.update_one(
            {"server_id": self.server_id},
            {"$set": {
                "log_directory": self.log_directory,
                "updated_at": self.updated_at
            }}
        )`

- temp_extract/Premdebug-main/models/server.py:676 - truthiness access to game_servers.update_one
  Context: `result = await db.game_servers.update_one(
            {"server_id": self.server_id},
            {"$set": update_data}
        )`

- temp_extract/Premdebug-main/models/server.py:804 - truthiness access to game_servers.insert_one
  Context: `await db.game_servers.insert_one(server.to_document())`

- temp_extract/Premdebug-main/models/server.py:835 - truthiness access to game_servers.find_one
  Context: `game_exact = await db.game_servers.find_one({"server_id": str_server_id})`

- temp_extract/Premdebug-main/models/server.py:836 - truthiness access to game_servers.find_one
  Context: `game_std = await db.game_servers.find_one({"server_id": std_server_id})`

- temp_extract/Premdebug-main/models/server.py:838 - truthiness access to servers.find_one
  Context: `standalone_exact = await db.servers.find_one({"server_id": str_server_id})`

- temp_extract/Premdebug-main/models/server.py:839 - truthiness access to servers.find_one
  Context: `standalone_std = await db.servers.find_one({"server_id": std_server_id})`

- temp_extract/Premdebug-main/models/server.py:842 - truthiness access to guilds.find_one
  Context: `guild_exact = await db.guilds.find_one({"servers.server_id": str_server_id})`

- temp_extract/Premdebug-main/models/server.py:843 - truthiness access to guilds.find_one
  Context: `guild_std = await db.guilds.find_one({"servers.server_id": std_server_id})`

- temp_extract/Premdebug-main/models/server.py:851 - truthiness access to game_servers.find_one
  Context: `game_numeric = await db.game_servers.find_one({"server_id": numeric_id})`

- temp_extract/Premdebug-main/models/server.py:852 - truthiness access to servers.find_one
  Context: `standalone_numeric = await db.servers.find_one({"server_id": numeric_id})`

- temp_extract/Premdebug-main/models/server.py:853 - truthiness access to guilds.find_one
  Context: `guild_numeric = await db.guilds.find_one({"servers.server_id": numeric_id})`

- temp_extract/Premdebug-main/models/server.py:872 - truthiness access to game_servers.delete_many
  Context: `game_exact_result = await db.game_servers.delete_many({"server_id": str_server_id})`

- temp_extract/Premdebug-main/models/server.py:873 - truthiness access to game_servers.delete_many
  Context: `game_std_result = await db.game_servers.delete_many({"server_id": std_server_id})`

- temp_extract/Premdebug-main/models/server.py:879 - truthiness access to game_servers.delete_many
  Context: `game_numeric_result = await db.game_servers.delete_many({"server_id": numeric_id})`

- temp_extract/Premdebug-main/models/server.py:882 - truthiness access to game_servers.delete_many
  Context: `game_regex_result = await db.game_servers.delete_many({
                    "server_id": {"$regex": f"^{std_server_id}$", "$options": "i"}
                })`

- temp_extract/Premdebug-main/models/server.py:900 - truthiness access to servers.delete_many
  Context: `standalone_exact_result = await db.servers.delete_many({"server_id": str_server_id})`

- temp_extract/Premdebug-main/models/server.py:901 - truthiness access to servers.delete_many
  Context: `standalone_std_result = await db.servers.delete_many({"server_id": std_server_id})`

- temp_extract/Premdebug-main/models/server.py:907 - truthiness access to servers.delete_many
  Context: `standalone_numeric_result = await db.servers.delete_many({"server_id": numeric_id})`

- temp_extract/Premdebug-main/models/server.py:910 - truthiness access to servers.delete_many
  Context: `standalone_regex_result = await db.servers.delete_many({
                    "server_id": {"$regex": f"^{std_server_id}$", "$options": "i"}
                })`

- temp_extract/Premdebug-main/models/server.py:928 - truthiness access to guilds.update_many
  Context: `guild_result = await db.guilds.update_many(
                    {"servers.server_id": str_server_id},
                    {
                        "$pull": {"servers": {"server_id": str_server_id}},
                        "$set": {"updated_at": datetime.utcnow()}`

- temp_extract/Premdebug-main/models/server.py:944 - truthiness access to client.start_session
  Context: `async with await db.client.start_session() as session:
                        async with session.start_transaction():`

- temp_extract/Premdebug-main/models/server.py:967 - truthiness access to server_links.delete_many
  Context: `await db.server_links.delete_many(
                                {
                                    "$or": [
                                        {"server_id": str_server_id},
                                        {"linked_server_id": str_server_id}
                                    ]
                                },
                                session=session
                            )`

- temp_extract/Premdebug-main/models/server.py:978 - truthiness access to server_integrations.update_many
  Context: `await db.server_integrations.update_many(
                                {"server_id": str_server_id},
                                {
                                    "$set": {
                                        "status": "inactive",
                                        "updated_at": datetime.utcnow(),`

- temp_extract/Premdebug-main/models/server.py:1004 - truthiness access to players.update_many
  Context: `await db.players.update_many(
                        {"server_id": str_server_id},
                        {"$set": {"active": False, "updated_at": datetime.utcnow()}}`

- temp_extract/Premdebug-main/models/server.py:1010 - truthiness access to integrations.delete_many
  Context: `await db.integrations.delete_many({"server_id": str_server_id})`

- temp_extract/Premdebug-main/models/server.py:1011 - truthiness access to integration_configs.delete_many
  Context: `await db.integration_configs.delete_many({"server_id": str_server_id})`

- temp_extract/Premdebug-main/models/server.py:1012 - truthiness access to integration_settings.delete_many
  Context: `await db.integration_settings.delete_many({"server_id": str_server_id})`

- temp_extract/Premdebug-main/models/server.py:1015 - truthiness access to server_links.delete_many
  Context: `await db.server_links.delete_many({
                        "$or": [
                            {"server_id": str_server_id},
                            {"linked_server_id": str_server_id}
                        ]
                    })`

- temp_extract/Premdebug-main/models/server.py:1023 - truthiness access to integration_status.delete_many
  Context: `await db.integration_status.delete_many({"server_id": str_server_id})`

- temp_extract/Premdebug-main/models/server.py:1057 - truthiness access to players.find
  Context: `cursor = self.db.players.find({
            "server_id": self.server_id,
            "active": True
        })`

- temp_extract/Premdebug-main/models/server.py:1089 - truthiness access to kills.aggregate
  Context: `killer_cursor = self.db.kills.aggregate(killer_pipeline)`

- temp_extract/Premdebug-main/models/server.py:1105 - truthiness access to kills.aggregate
  Context: `weapon_cursor = self.db.kills.aggregate(weapon_pipeline)`

- temp_extract/Premdebug-main/models/server.py:1110 - truthiness access to kills.find
  Context: `events_cursor = self.db.kills.find(
                {"server_id": self.server_id}
            ).sort("timestamp", -1).limit(10)`

- temp_extract/Premdebug-main/models/server.py:1129 - truthiness access to kills.count_documents
  Context: `total_kills = await self.db.kills.count_documents({"server_id": self.server_id, "is_suicide": False})`

- temp_extract/Premdebug-main/models/server.py:1130 - truthiness access to kills.count_documents
  Context: `total_suicides = await self.db.kills.count_documents({"server_id": self.server_id, "is_suicide": True})`

- temp_extract/Premdebug-main/models/server.py:521 - direct access to servers
  Context: `server_data = guild_doc["servers"][0]`

- temp_extract/Premdebug-main/utils/auto_bounty.py:55 - truthiness access to kills.find
  Context: `cursor = db.kills.find({
                "server_id": server_id,
                "guild_id": guild_id,
                "timestamp": {"$gte": start_time, "$lte": end_time},
                "is_suicide": {"$ne": True}  # Exclude suicides
            })`

- temp_extract/Premdebug-main/utils/auto_bounty.py:159 - truthiness access to guilds.find_one
  Context: `guild_data = await bot.db.guilds.find_one({"guild_id": guild_id})`

- temp_extract/Premdebug-main/utils/auto_bounty.py:204 - truthiness access to game_servers.find_one
  Context: `server_data = await bot.db.game_servers.find_one({"server_id": server_id})`

- temp_extract/Premdebug-main/utils/auto_bounty.py:289 - truthiness access to bounties.count_documents
  Context: `active_auto_bounties = await db.bounties.count_documents({
                "guild_id": guild_id,
                "server_id": server_id,
                "source": AutoBountySystem.SOURCE_AUTO,
                "status": "active"
            })`

- temp_extract/Premdebug-main/utils/auto_bounty.py:317 - truthiness access to bounties.find
  Context: `cursor = db.bounties.find({
                "guild_id": guild_id,
                "server_id": server_id,
                "status": "active"
            })`

- temp_extract/Premdebug-main/utils/auto_bounty.py:409 - truthiness access to guilds.find
  Context: `premium_guilds = await bot.db.guilds.find({
                "premium_tier": {"$gte": 2}  # Tier 2 or higher
            }).to_list(None)`

- temp_extract/Premdebug-main/utils/auto_bounty.py:433 - truthiness access to game_servers.find
  Context: `servers = await bot.db.game_servers.find({
                    "guild_id": guild_id,
                    "active": True
                }).to_list(None)`

- temp_extract/Premdebug-main/utils/autocomplete.py:95 - truthiness access to guilds.find_one
  Context: `guild_data = await bot.db.guilds.find_one({"guild_id": interaction.guild_id})`

- temp_extract/Premdebug-main/utils/autocomplete.py:173 - truthiness access to servers.find
  Context: `server_docs = await db.servers.find({"guild_id": guild_id}).to_list(length=25)`

- temp_extract/Premdebug-main/utils/autocomplete.py:182 - truthiness access to game_servers.find
  Context: `game_server_docs = await db.game_servers.find({"guild_id": guild_id}).to_list(length=25)`

- temp_extract/Premdebug-main/utils/csv_processor_coordinator.py:126 - truthiness access to guilds.find_one
  Context: `guild_doc = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- temp_extract/Premdebug-main/utils/csv_processor_coordinator.py:132 - direct access to servers
  Context: `for server in guild_doc["servers"]:`

- temp_extract/Premdebug-main/utils/database.py:193 - truthiness access to guilds.create_index
  Context: `await self._db.guilds.create_index("guild_id", unique=True)`

- temp_extract/Premdebug-main/utils/database.py:196 - truthiness access to game_servers.create_index
  Context: `await self._db.game_servers.create_index("server_id", unique=True)`

- temp_extract/Premdebug-main/utils/database.py:197 - truthiness access to game_servers.create_index
  Context: `await self._db.game_servers.create_index("guild_id")`

- temp_extract/Premdebug-main/utils/database.py:200 - truthiness access to players.create_index
  Context: `await self._db.players.create_index("player_id", unique=True)`

- temp_extract/Premdebug-main/utils/database.py:201 - truthiness access to players.create_index
  Context: `await self._db.players.create_index("server_id")`

- temp_extract/Premdebug-main/utils/database.py:202 - truthiness access to players.create_index
  Context: `await self._db.players.create_index("name")`

- temp_extract/Premdebug-main/utils/database.py:203 - truthiness access to players.create_index
  Context: `await self._db.players.create_index([("server_id", 1), ("name", 1)])`

- temp_extract/Premdebug-main/utils/database.py:206 - truthiness access to player_links.create_index
  Context: `await self._db.player_links.create_index("link_id", unique=True)`

- temp_extract/Premdebug-main/utils/database.py:207 - truthiness access to player_links.create_index
  Context: `await self._db.player_links.create_index("player_id")`

- temp_extract/Premdebug-main/utils/database.py:208 - truthiness access to player_links.create_index
  Context: `await self._db.player_links.create_index("discord_id")`

- temp_extract/Premdebug-main/utils/database.py:209 - truthiness access to player_links.create_index
  Context: `await self._db.player_links.create_index([("player_id", 1), ("status", 1)])`

- temp_extract/Premdebug-main/utils/database.py:210 - truthiness access to player_links.create_index
  Context: `await self._db.player_links.create_index([("discord_id", 1), ("status", 1)])`

- temp_extract/Premdebug-main/utils/database.py:213 - truthiness access to economy.create_index
  Context: `await self._db.economy.create_index("player_id", unique=True)`

- temp_extract/Premdebug-main/utils/database.py:214 - truthiness access to economy.create_index
  Context: `await self._db.economy.create_index("discord_id")`

- temp_extract/Premdebug-main/utils/database.py:217 - truthiness access to bounties.create_index
  Context: `await self._db.bounties.create_index("bounty_id", unique=True)`

- temp_extract/Premdebug-main/utils/database.py:218 - truthiness access to bounties.create_index
  Context: `await self._db.bounties.create_index("target_id")`

- temp_extract/Premdebug-main/utils/database.py:219 - truthiness access to bounties.create_index
  Context: `await self._db.bounties.create_index("placed_by_id")`

- temp_extract/Premdebug-main/utils/database.py:220 - truthiness access to bounties.create_index
  Context: `await self._db.bounties.create_index("server_id")`

- temp_extract/Premdebug-main/utils/database.py:221 - truthiness access to bounties.create_index
  Context: `await self._db.bounties.create_index("status")`

- temp_extract/Premdebug-main/utils/database.py:222 - truthiness access to bounties.create_index
  Context: `await self._db.bounties.create_index([("target_id", 1), ("status", 1)])`

- temp_extract/Premdebug-main/utils/database.py:223 - truthiness access to bounties.create_index
  Context: `await self._db.bounties.create_index([("expires_at", 1), ("status", 1)])`

- temp_extract/Premdebug-main/utils/database.py:226 - truthiness access to kills.create_index
  Context: `await self._db.kills.create_index([("server_id", 1), ("timestamp", -1)])`

- temp_extract/Premdebug-main/utils/database.py:227 - truthiness access to kills.create_index
  Context: `await self._db.kills.create_index([("killer_id", 1), ("timestamp", -1)])`

- temp_extract/Premdebug-main/utils/database.py:228 - truthiness access to kills.create_index
  Context: `await self._db.kills.create_index([("victim_id", 1), ("timestamp", -1)])`

- temp_extract/Premdebug-main/utils/database.py:231 - truthiness access to historical_data.create_index
  Context: `await self._db.historical_data.create_index([("server_id", 1), ("date", -1)])`

- temp_extract/Premdebug-main/utils/database.py:232 - truthiness access to historical_data.create_index
  Context: `await self._db.historical_data.create_index([("server_id", 1), ("player_id", 1), ("date", -1)])`

- temp_extract/Premdebug-main/utils/database.py:266 - truthiness access to game_servers.find
  Context: `async for server_doc in self._db.game_servers.find(query):`

- temp_extract/Premdebug-main/utils/database.py:274 - truthiness access to servers.update_one
  Context: `await self._db.servers.update_one(
                        {"server_id": server_id},
                        {"$set": {
                            "original_server_id": original_id,
                            "updated_at": datetime.utcnow()`

- temp_extract/Premdebug-main/utils/database.py:287 - truthiness access to guilds.find_one
  Context: `guild_doc = await self._db.guilds.find_one({"guild_id": guild_id})`

- temp_extract/Premdebug-main/utils/database.py:316 - truthiness access to guilds.update_one
  Context: `await self._db.guilds.update_one(
                                {"guild_id": guild_id},
                                {"$set": {
                                    "servers": servers,
                                    "updated_at": datetime.utcnow()`

- temp_extract/Premdebug-main/utils/database.py:326 - truthiness access to servers.find
  Context: `async for server_doc in self._db.servers.find(query):`

- temp_extract/Premdebug-main/utils/database.py:334 - truthiness access to game_servers.update_one
  Context: `await self._db.game_servers.update_one(
                        {"server_id": server_id},
                        {"$set": {
                            "original_server_id": original_id,
                            "updated_at": datetime.utcnow()`

- temp_extract/Premdebug-main/utils/database.py:346 - truthiness access to guilds.find_one
  Context: `guild_doc = await self._db.guilds.find_one({"guild_id": guild_id})`

- temp_extract/Premdebug-main/utils/database.py:370 - truthiness access to guilds.update_one
  Context: `await self._db.guilds.update_one(
                                {"guild_id": guild_id},
                                {"$set": {
                                    "servers": servers,
                                    "updated_at": datetime.utcnow()`

- temp_extract/Premdebug-main/utils/database.py:417 - truthiness access to game_servers.update_one
  Context: `await self._db.game_servers.update_one(
                                {"server_id": server_id},
                                {"$set": {
                                    "original_server_id": original_id,
                                    "updated_at": datetime.utcnow()`

- temp_extract/Premdebug-main/utils/database.py:426 - truthiness access to servers.update_one
  Context: `await self._db.servers.update_one(
                                {"server_id": server_id},
                                {"$set": {
                                    "original_server_id": original_id,
                                    "updated_at": datetime.utcnow()`

- temp_extract/Premdebug-main/utils/database.py:441 - truthiness access to game_servers.update_one
  Context: `await self._db.game_servers.update_one(
                                {"server_id": server_id},
                                {"$set": {
                                    "original_server_id": server_id,
                                    "updated_at": datetime.utcnow()`

- temp_extract/Premdebug-main/utils/database.py:450 - truthiness access to servers.update_one
  Context: `await self._db.servers.update_one(
                                {"server_id": server_id},
                                {"$set": {
                                    "original_server_id": server_id,
                                    "updated_at": datetime.utcnow()`

- temp_extract/Premdebug-main/utils/database.py:461 - truthiness access to guilds.update_one
  Context: `await self._db.guilds.update_one(
                        {"guild_id": guild_id},
                        {"$set": {
                            "servers": servers,
                            "updated_at": datetime.utcnow()`

- temp_extract/Premdebug-main/utils/direct_csv_handler.py:336 - truthiness access to kills.insert_many
  Context: `result = await db.kills.insert_many(events)`

- temp_extract/Premdebug-main/utils/direct_csv_handler.py:372 - truthiness access to game_servers.find_one
  Context: `server_doc = await db.game_servers.find_one({"server_id": server_id})`

- temp_extract/Premdebug-main/utils/direct_csv_handler.py:680 - truthiness access to kills.find
  Context: `kill_cursor = db.kills.find({"server_id": server_id})`

- temp_extract/Premdebug-main/utils/direct_csv_handler.py:729 - truthiness access to players.find_one
  Context: `player = await db.players.find_one({
                'server_id': server_id,
                'player_id': player_id
            })`

- temp_extract/Premdebug-main/utils/direct_csv_handler.py:736 - direct access to _id
  Context: `result = await db.players.update_one(
                    {'_id': player['_id']},
                    {
                        '$set': {
                            'name': stats['name'],
                            'kills': stats['kills'],
                            'deaths': stats['deaths'],
                            'suicides': stats['suicides'],
                            'updated_at': datetime.now()`

- temp_extract/Premdebug-main/utils/direct_csv_handler.py:756 - truthiness access to players.insert_one
  Context: `result = await db.players.insert_one(stats)`

- temp_extract/Premdebug-main/utils/direct_csv_handler.py:783 - truthiness access to kills.find
  Context: `kill_cursor = db.kills.find({
            "server_id": server_id,
            "is_suicide": {"$ne": True}
        })`

- temp_extract/Premdebug-main/utils/direct_csv_handler.py:823 - direct access to killer_id
  Context: `rivalry = await db.rivalries.find_one({
                'server_id': server_id,
                'killer_id': data['killer_id'],
                'victim_id': data['victim_id']
            })`

- temp_extract/Premdebug-main/utils/direct_csv_handler.py:831 - direct access to _id
  Context: `result = await db.rivalries.update_one(
                    {'_id': rivalry['_id']},
                    {
                        '$set': {
                            'killer_name': data['killer_name'],
                            'victim_name': data['victim_name'],
                            'kills': data['kills'],
                            'updated_at': datetime.now()`

- temp_extract/Premdebug-main/utils/direct_csv_handler.py:850 - truthiness access to rivalries.insert_one
  Context: `result = await db.rivalries.insert_one(data)`

- temp_extract/Premdebug-main/utils/direct_csv_handler.py:374 - direct access to original_server_id
  Context: `original_server_id = server_doc["original_server_id"]`

- temp_extract/Premdebug-main/utils/discord_utils.py:31 - truthiness access to guilds.find_one
  Context: `guild_data = await db.db.guilds.find_one({"guild_id": guild_id})`

- temp_extract/Premdebug-main/utils/discord_utils.py:51 - truthiness access to servers.find_one
  Context: `server_data = await db.db.servers.find_one({"server_id": server})`

- temp_extract/Premdebug-main/utils/premium.py:229 - truthiness access to guilds.find_one
  Context: `guild_doc = await db.guilds.find_one({"guild_id": str(guild_id)}, {"premium_tier": 1})`

- temp_extract/Premdebug-main/utils/premium.py:245 - truthiness access to guilds.find_one
  Context: `guild_doc = await db.guilds.find_one({
                            "$or": [
                                {"guild_id": str(guild_id)},`

- temp_extract/Premdebug-main/utils/premium.py:884 - truthiness access to guilds.find_one
  Context: `guild_doc = await db.guilds.find_one(query, {"premium_tier": 1, "premium_expires": 1})`

- temp_extract/Premdebug-main/utils/premium.py:895 - truthiness access to guilds.find_one
  Context: `guild_doc = await db.guilds.find_one(query, {"premium_tier": 1, "premium_expires": 1})`

- temp_extract/Premdebug-main/utils/premium.py:901 - truthiness access to guilds.find_one
  Context: `guild_doc = await db.guilds.find_one(query, {"premium_tier": 1, "premium_expires": 1})`

- temp_extract/Premdebug-main/utils/premium.py:960 - direct access to _id
  Context: `await db.guilds.update_one(
                            {"_id": guild_doc["_id"]},
                            {"$set": {"premium_tier": premium_tier}}
                        )`

- temp_extract/Premdebug-main/utils/premium.py:993 - direct access to _id
  Context: `await db.guilds.update_one(
                            {"_id": guild_doc["_id"]},
                            {"$set": {"premium_tier": 0}}
                        )`

- temp_extract/Premdebug-main/utils/premium.py:1104 - truthiness access to guilds.find_one
  Context: `guild_doc = await db.guilds.find_one({"guild_id": str_guild_id}, {"_id": 1})`

- temp_extract/Premdebug-main/utils/premium.py:1138 - truthiness access to guilds.find_one
  Context: `guild_doc = await db.guilds.find_one({"guild_id": str_guild_id}, {"premium_tier": 1})`

- temp_extract/Premdebug-main/utils/premium.py:961 - direct access to _id
  Context: `{"_id": guild_doc["_id"]},`

- temp_extract/Premdebug-main/utils/premium.py:994 - direct access to _id
  Context: `{"_id": guild_doc["_id"]},`

- temp_extract/Premdebug-main/utils/rivalry_tracker.py:73 - truthiness access to players.find_one
  Context: `killer_doc = await db.players.find_one({
                "server_id": server_id, 
                "player_id": killer_id
            })`

- temp_extract/Premdebug-main/utils/rivalry_tracker.py:83 - truthiness access to players.find_one
  Context: `victim_doc = await db.players.find_one({
                "server_id": server_id, 
                "player_id": victim_id
            })`

- temp_extract/Premdebug-main/utils/rivalry_tracker.py:163 - truthiness access to players.find_one
  Context: `victim_doc = await db.players.find_one({
                "server_id": server_id, 
                "player_id": victim_id
            })`

- temp_extract/Premdebug-main/utils/rivalry_tracker.py:173 - truthiness access to players.find_one
  Context: `killer_doc = await db.players.find_one({
                "server_id": server_id, 
                "player_id": killer_id
            })`

- temp_extract/Premdebug-main/utils/rivalry_tracker.py:251 - truthiness access to players.find_one
  Context: `player_doc = await db.players.find_one({
            "server_id": server_id,
            "player_id": player_id
        })`

- temp_extract/Premdebug-main/utils/rivalry_tracker.py:284 - truthiness access to players.find
  Context: `cursor = db.players.find({
            "server_id": server_id,
            "top_prey": {"$exists": True}
        })`

- temp_extract/Premdebug-main/utils/rivalry_tracker.py:330 - truthiness access to kills.find
  Context: `kill_cursor = db.kills.find({
            "server_id": server_id
        }).sort("timestamp", 1)  # Process in chronological order`

- temp_extract/Premdebug-main/utils/server_mapper.py:160 - truthiness access to server_mappings.find_one
  Context: `mapping = await self.db.server_mappings.find_one({"uuid": uuid})`

- temp_extract/Premdebug-main/utils/server_mapper.py:165 - truthiness access to servers.find_one
  Context: `server = await self.db.servers.find_one({"_id": uuid})`

- temp_extract/Premdebug-main/utils/server_mapper.py:170 - truthiness access to game_servers.find_one
  Context: `game_server = await self.db.game_servers.find_one({"server_id": uuid})`

- temp_extract/Premdebug-main/utils/server_mapper.py:212 - truthiness access to servers.find_one
  Context: `server = await self.db.servers.find_one(query)`

- temp_extract/Premdebug-main/utils/server_mapper.py:227 - truthiness access to game_servers.find_one
  Context: `game_server = await self.db.game_servers.find_one(game_query)`

- temp_extract/Premdebug-main/utils/server_mapper.py:257 - truthiness access to server_mappings.update_one
  Context: `await self.db.server_mappings.update_one(
                    {"uuid": uuid},
                    {"$set": {
                        "uuid": uuid,
                        "original_id": original_id,
                        "hostname": hostname,
                        "server_name": server_name,
                        "updated_at": datetime.now()`

- temp_extract/Premdebug-main/utils/server_mapper.py:271 - truthiness access to servers.update_one
  Context: `await self.db.servers.update_one(
                    {"_id": uuid},
                    {"$set": {
                        "original_id": original_id,
                        "updated_at": datetime.now()`

- temp_extract/Premdebug-main/utils/server_mapper.py:282 - truthiness access to game_servers.update_one
  Context: `await self.db.game_servers.update_one(
                    {"server_id": uuid},
                    {"$set": {
                        "original_id": original_id,
                        "updated_at": datetime.now()`

- temp_extract/Premdebug-main/utils/server_mapper.py:318 - truthiness access to servers.find
  Context: `async for server in self.db.servers.find({"original_id": {"$exists": False}}):`

- temp_extract/Premdebug-main/utils/server_mapper.py:326 - truthiness access to game_servers.find
  Context: `async for server in self.db.game_servers.find({"original_id": {"$exists": False}}):`

- temp_extract/Premdebug-main/utils/server_utils.py:273 - truthiness access to guilds.find_one
  Context: `guild_data = await db.guilds.find_one({
            "$or": [
                {"guild_id": str_guild_id},
                {"guild_id": int(str_guild_id) if str_guild_id.isdigit() else str_guild_id}`

- temp_extract/Premdebug-main/utils/server_utils.py:347 - truthiness access to guilds.find_one
  Context: `guild_data = await db.guilds.find_one({"guild_id": str_guild_id})`

- temp_extract/Premdebug-main/utils/server_utils.py:503 - truthiness access to guilds.aggregate
  Context: `cursor = db.guilds.aggregate(pipeline)`

- temp_extract/Premdebug-main/utils/server_utils.py:524 - truthiness access to guilds.find
  Context: `async for guild in db.guilds.find({}):`

- temp_extract/Premdebug-main/utils/server_utils.py:980 - truthiness access to guilds.find_one
  Context: `guild_data = await db.guilds.find_one({
                    "$or": [
                        {"guild_id": str_guild_id},
                        {"guild_id": int(str_guild_id) if str_guild_id.isdigit() else str_guild_id}`

- temp_extract/Premdebug-main/utils/server_utils.py:1199 - truthiness access to guilds.find_one
  Context: `guild_data = await db.guilds.find_one({
                "$or": [
                    {"guild_id": str_guild_id},
                    {"guild_id": int(str_guild_id) if str_guild_id.isdigit() else str_guild_id}`

- temp_extract/Premdebug-main/utils/update_bot_status.py:138 - truthiness access to bot_status.insert_one
  Context: `await db.bot_status.insert_one(status_data)`

- temp_extract/Premdebug-main/utils/update_bot_status.py:147 - truthiness access to command_logs.count_documents
  Context: `'commands_used': await db.command_logs.count_documents({}),`

- temp_extract/Premdebug-main/utils/update_bot_status.py:148 - truthiness access to active_users.count_documents
  Context: `'active_users': await db.active_users.count_documents({}),`

- temp_extract/Premdebug-main/utils/update_bot_status.py:149 - truthiness access to kills.count_documents
  Context: `'kills_tracked': await db.kills.count_documents({}),`

- temp_extract/Premdebug-main/utils/update_bot_status.py:150 - truthiness access to bounties.count_documents
  Context: `'bounties_placed': await db.bounties.count_documents({'status': 'active'}),`

- temp_extract/Premdebug-main/utils/update_bot_status.py:151 - truthiness access to bounties.count_documents
  Context: `'bounties_claimed': await db.bounties.count_documents({'status': 'claimed'})`

- temp_extract/Premdebug-main/utils/update_bot_status.py:154 - truthiness access to stats_snapshots.insert_one
  Context: `await db.stats_snapshots.insert_one(stats_data)`

- temp_extract/Premdebug-main/utils/update_bot_status.py:171 - truthiness access to error_logs.insert_one
  Context: `await db.error_logs.insert_one(error_log)`

- temp_extract/Premdebug-main/utils/update_guild_models.py:48 - truthiness access to guilds.find_one
  Context: `guild_model_code = f"\n{indent}# Get guild model for themed embed\n{indent}guild_data = None\n{indent}guild_model = None\n{indent}try:\n{indent}    guild_data = await self.bot.db.guilds.find_one({{\"guild_id\": ctx.guild.id}})\n{indent}    if guild_data is not None:\n{indent}        guild_model = Guild(self.bot.db, guild_data)\n{indent}except Exception as e:\n{indent}    logger.warning(f\"Error getting guild model: {{e}}\")\n"`

- cogs/admin.py:56 - truthiness access to guilds.insert_one
  Context: `await self.bot.db.guilds.insert_one(guild.to_dict())`

- cogs/admin.py:134 - truthiness access to guilds.insert_one
  Context: `await self.bot.db.guilds.insert_one(target_guild.to_dict())`

- cogs/admin.py:223 - truthiness access to game_servers.count_documents
  Context: `server_count = await self.bot.db.game_servers.count_documents({})`

- cogs/admin.py:224 - truthiness access to players.count_documents
  Context: `player_count = await self.bot.db.players.count_documents({})`

- cogs/admin.py:225 - truthiness access to kills.count_documents
  Context: `kill_count = await self.bot.db.kills.count_documents({})`

- cogs/admin.py:288 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- cogs/admin.py:291 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- cogs/admin.py:321 - truthiness access to bot_config.update_one
  Context: `await self.bot.db.bot_config.update_one(
                    {"key": "home_guild_id"}, 
                    {"$set": {"key": "home_guild_id", "value": str(ctx.guild.id)}},`

- cogs/admin.py:390 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- cogs/admin.py:393 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- cogs/bounties.py:96 - truthiness access to guilds.find
  Context: `guilds_cursor = db.db.guilds.find({})`

- cogs/bounties.py:228 - truthiness access to guilds.find_one
  Context: `guild_data = await db.db.guilds.find_one({"guild_id": str(guild_id)})`

- cogs/bounties.py:231 - truthiness access to guilds.find_one
  Context: `guild_data = await db.db.guilds.find_one({"guild_id": int(guild_id)})`

- cogs/bounties.py:420 - truthiness access to players.find_one
  Context: `player_data = await db.db.players.find_one(player_query)`

- cogs/bounties.py:428 - truthiness access to players.find_one
  Context: `player_data = await db.db.players.find_one(player_query)`

- cogs/bounties.py:451 - truthiness access to player_links.find_one
  Context: `self_link = await db.db.player_links.find_one(link_query)`

- cogs/bounties.py:793 - truthiness access to guilds.find_one
  Context: `guild_data = await db.db.guilds.find_one({"guild_id": str(guild_id)})`

- cogs/bounties.py:796 - truthiness access to guilds.find_one
  Context: `guild_data = await db.db.guilds.find_one({"guild_id": int(guild_id)})`

- cogs/bounties.py:892 - truthiness access to guilds.update_one
  Context: `await db.db.guilds.update_one(
                {"guild_id": guild_id},
                {"$set": update}
            )`

- cogs/csv_processor.py:127 - truthiness access to csv_processor_state.find
  Context: `server_states_cursor = self.bot.db.csv_processor_state.find({})`

- cogs/csv_processor.py:169 - truthiness access to bot_config.find_one
  Context: `legacy_state = await self.bot.db.bot_config.find_one({"key": "csv_processor_state"})`

- cogs/csv_processor.py:193 - truthiness access to bot_config.delete_one
  Context: `await self.bot.db.bot_config.delete_one({"key": "csv_processor_state"})`

- cogs/csv_processor.py:235 - truthiness access to csv_processor_state.update_one
  Context: `await self.bot.db.csv_processor_state.update_one(
                    {"server_id": server_id},
                    {"$set": state},
                    upsert=True
                )`

- cogs/csv_processor.py:613 - truthiness access to servers.find
  Context: `servers_cursor = self.bot.db.servers.find({
                "$and": [
                    {"sftp_host": {"$exists": True}},
                    {"sftp_username": {"$exists": True}},
                    {"sftp_password": {"$exists": True}}
                ]
            })`

- cogs/csv_processor.py:652 - truthiness access to game_servers.find
  Context: `game_servers_cursor = self.bot.db.game_servers.find({
                "$and": [
                    {"sftp_host": {"$exists": True}},
                    {"sftp_username": {"$exists": True}},
                    {"sftp_password": {"$exists": True}}
                ]
            })`

- cogs/csv_processor.py:686 - truthiness access to guilds.find
  Context: `guilds_cursor = self.bot.db.guilds.find({})`

- cogs/csv_processor.py:2434 - truthiness access to kills.insert_many
  Context: `result = await self.bot.db.kills.insert_many(kill_docs, ordered=False)`

- cogs/csv_processor.py:2469 - truthiness access to kills.insert_many
  Context: `result = await self.bot.db.kills.insert_many(suicide_docs, ordered=False)`

- cogs/csv_processor.py:2549 - truthiness access to kills.insert_many
  Context: `result = await self.bot.db.kills.insert_many(suicide_docs, ordered=False)`

- cogs/csv_processor.py:2577 - truthiness access to kills.insert_many
  Context: `result = await self.bot.db.kills.insert_many(kill_docs, ordered=False)`

- cogs/csv_processor.py:2816 - truthiness access to kills.delete_many
  Context: `kill_result = await self.bot.db.kills.delete_many({"server_id": server_id})`

- cogs/csv_processor.py:2823 - truthiness access to players.update_many
  Context: `player_result = await self.bot.db.players.update_many(
                    {"server_id": server_id},
                    {"$set": {
                        "kills": 0,
                        "deaths": 0,
                        "last_updated": datetime.now(),`

- cogs/csv_processor.py:2838 - truthiness access to rivalries.delete_many
  Context: `rivalry_result = await self.bot.db.rivalries.delete_many({"server_id": server_id})`

- cogs/csv_processor.py:2968 - truthiness access to kills.delete_many
  Context: `kill_result = await self.bot.db.kills.delete_many({"server_id": resolved_server_id})`

- cogs/csv_processor.py:2975 - truthiness access to players.update_many
  Context: `player_reset = await self.bot.db.players.update_many(
                            {"server_id": resolved_server_id},
                            {"$set": {"kills": 0, "deaths": 0, "suicides": 0, "updated_at": datetime.utcnow()}}`

- cogs/csv_processor.py:2985 - truthiness access to rivalries.delete_many
  Context: `rivalry_result = await self.bot.db.rivalries.delete_many({"server_id": resolved_server_id})`

- cogs/csv_processor.py:3098 - truthiness access to csv_processor_state.delete_one
  Context: `state_result = await self.bot.db.csv_processor_state.delete_one({"server_id": server_id})`

- cogs/csv_processor.py:3112 - truthiness access to kills.delete_many
  Context: `kill_result = await self.bot.db.kills.delete_many({"server_id": server_id})`

- cogs/csv_processor.py:3116 - truthiness access to players.update_many
  Context: `player_reset = await self.bot.db.players.update_many(
                {"server_id": server_id},
                {"$set": {"kills": 0, "deaths": 0, "suicides": 0, "updated_at": datetime.utcnow()}}`

- cogs/csv_processor.py:3123 - truthiness access to rivalries.delete_many
  Context: `rivalry_result = await self.bot.db.rivalries.delete_many({"server_id": server_id})`

- cogs/csv_processor.py:3202 - truthiness access to guilds.find_one
  Context: `guild_doc = await self.bot.db.guilds.find_one({"guild_id": guild_id})`

- cogs/csv_processor.py:3354 - truthiness access to guilds.find_one
  Context: `guild_doc = await self.bot.db.guilds.find_one({"guild_id": guild_id})`

- cogs/csv_processor.py:3421 - truthiness access to kills.count_documents
  Context: `kills_count = await self.bot.db.kills.count_documents({
                        "server_id": server_id,
                        "is_suicide": False,
                        "timestamp": {"$gte": datetime.now() - timedelta(days=safe_days)}`

- cogs/csv_processor.py:3427 - truthiness access to kills.count_documents
  Context: `suicides_count = await self.bot.db.kills.count_documents({
                        "server_id": server_id,
                        "is_suicide": True,
                        "timestamp": {"$gte": datetime.now() - timedelta(days=safe_days)}`

- cogs/csv_processor.py:3446 - truthiness access to kills.aggregate
  Context: `result = await self.bot.db.kills.aggregate(pipeline).to_list(length=1)`

- cogs/csv_processor.py:3753 - truthiness access to kills.insert_one
  Context: `await self.bot.db.kills.insert_one(suicide_doc)`

- cogs/csv_processor.py:3792 - truthiness access to kills.insert_one
  Context: `await self.bot.db.kills.insert_one(kill_doc)`

- cogs/csv_processor.py:3876 - truthiness access to players.update_one
  Context: `result = await self.bot.db.players.update_one(
                {"player_id": player_id},  # Match by player_id
                {
                    "$set": player_data,
                    "$setOnInsert": {
                        "created_at": now,  # Only set on new records
                        "kills": 0,
                        "deaths": 0, 
                        "suicides": 0
                    }
                },
                upsert=True  # Create if doesn't exist
            )`

- cogs/csv_processor.py:3938 - truthiness access to csv_processor_state.delete_one
  Context: `state_result = await self.bot.db.csv_processor_state.delete_one({"server_id": server_id})`

- cogs/csv_processor_backup.py:139 - truthiness access to servers.find
  Context: `servers_cursor = self.bot.db.servers.find({
                "$and": [
                    {"sftp_host": {"$exists": True}},
                    {"sftp_username": {"$exists": True}},
                    {"sftp_password": {"$exists": True}}
                ]
            })`

- cogs/csv_processor_backup.py:165 - truthiness access to game_servers.find
  Context: `game_servers_cursor = self.bot.db.game_servers.find({
                "$and": [
                    {"sftp_host": {"$exists": True}},
                    {"sftp_username": {"$exists": True}},
                    {"sftp_password": {"$exists": True}}
                ]
            })`

- cogs/csv_processor_backup.py:196 - truthiness access to guilds.find
  Context: `guilds_cursor = self.bot.db.guilds.find({})`

- cogs/csv_processor_backup.py:1001 - truthiness access to guilds.find_one
  Context: `guild_doc = await self.bot.db.guilds.find_one({"guild_id": guild_id})`

- cogs/csv_processor_backup.py:1143 - truthiness access to guilds.find_one
  Context: `guild_doc = await self.bot.db.guilds.find_one({"guild_id": guild_id})`

- cogs/csv_processor_backup.py:1378 - truthiness access to kills.insert_one
  Context: `await self.bot.db.kills.insert_one(kill_doc)`

- cogs/csv_processor_backup.py:1415 - truthiness access to players.insert_one
  Context: `await self.bot.db.players.insert_one(player.__dict__)`

- cogs/csv_processor_backup.py:1003 - direct access to default_server_id
  Context: `raw_server_id = guild_doc["default_server_id"]`

- cogs/csv_processor_backup.py:1145 - direct access to default_server_id
  Context: `raw_server_id = guild_doc["default_server_id"]`

- cogs/killfeed.py:54 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- cogs/killfeed.py:57 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- cogs/killfeed.py:74 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- cogs/killfeed.py:77 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- cogs/killfeed.py:170 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- cogs/killfeed.py:173 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- cogs/killfeed.py:231 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- cogs/killfeed.py:234 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- cogs/killfeed.py:247 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- cogs/killfeed.py:250 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- cogs/killfeed.py:402 - truthiness access to guilds.count_documents
  Context: `if await bot.db.guilds.count_documents({"guild_id": guild_id, "servers": {"$exists": True, "$ne": []}}) == 0:`

- cogs/killfeed.py:771 - truthiness access to kills.insert_one
  Context: `await bot.db.kills.insert_one(kill_event)`

- cogs/log_processor.py:532 - truthiness access to servers.find_one
  Context: `server_doc = await self.bot.db.servers.find_one({"_id": server_id})`

- cogs/log_processor.py:570 - truthiness access to servers.find
  Context: `server_docs = await self.bot.db.servers.find({"original_server_id": {"$exists": True}}).to_list(10)`

- cogs/log_processor.py:1106 - truthiness access to kills.insert_one
  Context: `await self.bot.db.kills.insert_one(kill_doc)`

- cogs/log_processor.py:1163 - truthiness access to connections.insert_one
  Context: `await self.bot.db.connections.insert_one(connection_doc)`

- cogs/log_processor.py:1214 - truthiness access to missions.insert_one
  Context: `await self.bot.db.missions.insert_one(mission_doc)`

- cogs/log_processor.py:1228 - truthiness access to game_events.insert_one
  Context: `await self.bot.db.game_events.insert_one(game_event_doc)`

- cogs/log_processor.py:1267 - truthiness access to players.insert_one
  Context: `await self.bot.db.players.insert_one(player.__dict__)`

- cogs/log_processor.py:534 - direct access to original_server_id
  Context: `path_server_id = server_doc["original_server_id"]`

- cogs/new_csv_processor.py:209 - truthiness access to servers.find
  Context: `async for server in self.bot.db.servers.find({"sftp_enabled": True}):`

- cogs/new_csv_processor.py:220 - truthiness access to game_servers.find
  Context: `async for server in self.bot.db.game_servers.find({"sftp_enabled": True}):`

- cogs/new_csv_processor.py:231 - truthiness access to guilds.find
  Context: `async for guild in self.bot.db.guilds.find({}):`

- cogs/new_csv_processor.py:741 - truthiness access to kills.insert_one
  Context: `await self.bot.db.kills.insert_one(kill_record)`

- cogs/new_csv_processor.py:748 - direct access to _id
  Context: `await self.bot.db.players.update_stats(killer["_id"], "kills")`

- cogs/new_csv_processor.py:749 - direct access to _id
  Context: `await self.bot.db.players.update_stats(victim["_id"], "deaths")`

- cogs/new_csv_processor.py:752 - direct access to _id
  Context: `await self.bot.db.rivalries.update_nemesis_and_prey(
                    killer_id=killer["_id"],
                    victim_id=victim["_id"],
                    server_id=server_id
                )`

- cogs/new_csv_processor.py:782 - truthiness access to players.find_one
  Context: `player = await self.bot.db.players.find_one({
                "player_id": player_id,
                "server_id": server_id
            })`

- cogs/new_csv_processor.py:796 - direct access to _id
  Context: `await self.bot.db.players.update_one(
                        {"_id": player["_id"]},
                        {"$set": {"name": player_name, "known_aliases": known_aliases}}
                    )`

- cogs/new_csv_processor.py:815 - truthiness access to players.insert_one
  Context: `result = await self.bot.db.players.insert_one(new_player)`

- cogs/new_csv_processor.py:818 - truthiness access to players.find_one
  Context: `return await self.bot.db.players.find_one({"_id": result.inserted_id})`

- cogs/stats.py:88 - truthiness access to players.find
  Context: `players_cursor = interaction.client.db.players.find(
                    {"server_id": str(server_id), "active": True},`

- cogs/stats.py:627 - truthiness access to kills.aggregate
  Context: `cursor = self.bot.db.kills.aggregate(pipeline)`

- cogs/stats.py:714 - truthiness access to kills.aggregate
  Context: `cursor = self.bot.db.kills.aggregate(pipeline)`

- cogs/stats.py:828 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- cogs/stats.py:831 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- cogs/stats.py:844 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- cogs/stats.py:847 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- cogs/stats.py:1108 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- cogs/stats.py:1111 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- cogs/stats.py:1191 - truthiness access to kills.aggregate
  Context: `cursor = self.bot.db.kills.aggregate(pipeline)`

- cogs/stats.py:1288 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- cogs/stats.py:1291 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- cogs/stats.py:1304 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- cogs/stats.py:1307 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- cogs/stats.py:1374 - truthiness access to kills.aggregate
  Context: `cursor = self.bot.db.kills.aggregate(pipeline)`

- cogs/stats.py:1418 - truthiness access to kills.aggregate
  Context: `top_users_cursor = self.bot.db.kills.aggregate(top_users_pipeline)`

- cogs/events.py:92 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- cogs/events.py:95 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- cogs/events.py:181 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- cogs/events.py:184 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- cogs/events.py:201 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- cogs/events.py:204 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- cogs/events.py:304 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- cogs/events.py:307 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- cogs/events.py:368 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- cogs/events.py:371 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- cogs/events.py:384 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- cogs/events.py:387 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- cogs/events.py:495 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- cogs/events.py:498 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- cogs/events.py:517 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- cogs/events.py:520 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- cogs/events.py:641 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- cogs/events.py:644 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- cogs/events.py:657 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- cogs/events.py:660 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- cogs/events.py:771 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- cogs/events.py:774 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- cogs/events.py:905 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- cogs/events.py:908 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- cogs/events.py:1030 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- cogs/events.py:1033 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- cogs/events.py:1178 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"servers.server_id": server_id})`

- cogs/events.py:1221 - truthiness access to guilds.count_documents
  Context: `if await bot.db.guilds.count_documents({"guild_id": guild_id, "servers": {"$exists": True, "$ne": []}}) == 0:`

- cogs/setup.py:375 - truthiness access to servers.find_one
  Context: `server_doc = await self.bot.db.servers.find_one({"server_id": server_id})`

- cogs/setup.py:387 - truthiness access to game_servers.find_one
  Context: `server_doc = await self.bot.db.game_servers.find_one({"server_id": server_id})`

- cogs/setup.py:401 - truthiness access to guilds.find_one
  Context: `guild_doc = await self.bot.db.guilds.find_one({"guild_id": guild_id_str})`

- cogs/setup.py:441 - truthiness access to guilds.update_one
  Context: `await self.bot.db.guilds.update_one(
                                        {"guild_id": guild_id_str, "servers.server_id": server_id},
                                        {"$set": {"servers.$.historical_parse_done": True}}
                                    )`

- cogs/setup.py:634 - truthiness access to guilds.update_one
  Context: `await self.bot.db.guilds.update_one(
                                {"guild_id": guild_id_val, "servers.server_id": std_server_id},
                                {"$set": {"servers.$.historical_parse_done": False}}
                            )`

- cogs/setup.py:641 - truthiness access to servers.update_one
  Context: `await self.bot.db.servers.update_one(
                                {"server_id": std_server_id},
                                {"$set": {"historical_parse_done": False}}
                            )`

- cogs/setup.py:657 - truthiness access to game_servers.delete_many
  Context: `result = await self.bot.db.game_servers.delete_many({"server_id": std_server_id})`

- cogs/setup.py:661 - truthiness access to servers.delete_many
  Context: `result = await self.bot.db.servers.delete_many({"server_id": std_server_id})`

- cogs/setup.py:665 - truthiness access to players.update_many
  Context: `player_result = await self.bot.db.players.update_many(
                                {"server_id": std_server_id},
                                {"$set": {"active": False, "updated_at": datetime.utcnow()}}`

- cogs/setup.py:672 - truthiness access to kills.delete_many
  Context: `kills_result = await self.bot.db.kills.delete_many({"server_id": std_server_id})`

- cogs/setup.py:676 - truthiness access to rivalries.delete_many
  Context: `rivalries_result = await self.bot.db.rivalries.delete_many({"server_id": std_server_id})`

- cogs/setup.py:691 - truthiness access to csv_processor_state.delete_one
  Context: `state_result = await self.bot.db.csv_processor_state.delete_one({"server_id": std_server_id})`

- cogs/economy.py:975 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- cogs/economy.py:978 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- diagnostics/server_trace.py:57 - truthiness access to guilds.find
  Context: `guilds_cursor = db.guilds.find(guild_query)`

- diagnostics/server_trace.py:101 - truthiness access to servers.find_one
  Context: `server_in_servers = await db.servers.find_one({"server_id": std_server_id})`

- diagnostics/server_trace.py:124 - truthiness access to game_servers.find_one
  Context: `server_in_game_servers = await db.game_servers.find_one({"server_id": std_server_id})`

- models/base_model.py:71 - direct access to key
  Context: `document[key] = value`

- models/bounty.py:94 - truthiness access to bounties.find_one
  Context: `document = await db.bounties.find_one({"bounty_id": bounty_id})`

- models/bounty.py:115 - truthiness access to bounties.find
  Context: `cursor = db.bounties.find(query)`

- models/bounty.py:147 - truthiness access to bounties.find
  Context: `cursor = db.bounties.find(query)`

- models/bounty.py:178 - truthiness access to bounties.find
  Context: `cursor = db.bounties.find(query)`

- models/bounty.py:203 - truthiness access to bounties.find
  Context: `cursor = db.bounties.find(query)`

- models/bounty.py:231 - truthiness access to bounties.find
  Context: `cursor = db.bounties.find(query)`

- models/bounty.py:264 - truthiness access to bounties.update_one
  Context: `result = await db.bounties.update_one(
            {"bounty_id": self.bounty_id},
            {"$set": {
                "status": self.status,
                "claimed_by_id": self.claimed_by_id,
                "claimed_by_name": self.claimed_by_name,
                "claimed_at": self.claimed_at,
                "updated_at": self.updated_at
            }}
        )`

- models/bounty.py:293 - truthiness access to bounties.update_one
  Context: `result = await db.bounties.update_one(
            {"bounty_id": self.bounty_id},
            {"$set": {
                "status": self.status,
                "updated_at": self.updated_at
            }}
        )`

- models/bounty.py:319 - truthiness access to bounties.update_one
  Context: `result = await db.bounties.update_one(
            {"bounty_id": self.bounty_id},
            {"$set": {
                "status": self.status,
                "updated_at": self.updated_at
            }}
        )`

- models/bounty.py:442 - truthiness access to bounties.insert_one
  Context: `await db.bounties.insert_one(bounty.to_document())`

- models/bounty.py:468 - truthiness access to players.find_one
  Context: `hunter_doc = await db.players.find_one({"player_id": killer_id})`

- models/bounty.py:502 - truthiness access to bounties.update_many
  Context: `result = await db.bounties.update_many(
            query,
            {
                "$set": {
                    "status": cls.STATUS_EXPIRED,
                    "updated_at": now
                }
            }
        )`

- models/bounty.py:574 - truthiness access to events.aggregate
  Context: `cursor = db.db.events.aggregate(pipeline)`

- models/economy.py:66 - truthiness access to economy.find_one
  Context: `document = await db.economy.find_one({"player_id": player_id})`

- models/economy.py:80 - truthiness access to economy.find_one
  Context: `document = await db.economy.find_one({"discord_id": discord_id})`

- models/economy.py:118 - truthiness access to economy.update_one
  Context: `result = await db.economy.update_one(
            {"player_id": self.player_id},
            {"$set": {
                "balance": self.balance,
                "lifetime_earnings": self.lifetime_earnings,
                "updated_at": self.updated_at
            },
            "$push": {
                "transactions": transaction
            }}
        )`

- models/economy.py:167 - truthiness access to economy.update_one
  Context: `result = await db.economy.update_one(
            {"player_id": self.player_id},
            {"$set": {
                "balance": self.balance,
                "lifetime_spent": self.lifetime_spent,
                "updated_at": self.updated_at
            },
            "$push": {
                "transactions": transaction
            }}
        )`

- models/economy.py:202 - truthiness access to economy.update_one
  Context: `await db.economy.update_one(
                    {"player_id": player_id},
                    {"$set": {"discord_id": discord_id, "updated_at": economy.updated_at}}
                )`

- models/economy.py:223 - truthiness access to economy.insert_one
  Context: `await db.economy.insert_one(economy.to_document())`

- models/economy.py:243 - truthiness access to economy.find
  Context: `cursor = db.economy.find(query).sort("balance", -1).limit(limit)`

- models/event.py:52 - truthiness access to events.insert_one
  Context: `result = await db.events.insert_one(event_data)`

- models/event.py:67 - truthiness access to events.find
  Context: `cursor = db.events.find(
            query,
            sort=[("timestamp", -1)],`

- models/event.py:81 - truthiness access to events.find_one
  Context: `event_data = await db.events.find_one(
            {
                "server_id": server_id,
                "event_type": event_type
            },
            sort=[("timestamp", -1)]`

- models/event.py:97 - truthiness access to events.count_documents
  Context: `return await db.events.count_documents({
            "server_id": server_id,
            "event_type": event_type
        })`

- models/event.py:117 - truthiness access to events.aggregate
  Context: `cursor = db.events.aggregate(pipeline)`

- models/event.py:156 - truthiness access to connections.insert_one
  Context: `result = await db.connections.insert_one(connection_data)`

- models/event.py:169 - direct access to player_id
  Context: `await db.players.update_one(
            {"player_id": player_data["player_id"], "server_id": player_data["server_id"]},
            {"$set": player_data},
            upsert=True
        )`

- models/event.py:182 - truthiness access to connections.find
  Context: `cursor = db.connections.find(
            {
                "server_id": server_id,
                "player_id": player_id
            },
            sort=[("timestamp", -1)],`

- models/event.py:200 - truthiness access to connections.find
  Context: `cursor = db.connections.find(
            {"server_id": server_id},
            sort=[("timestamp", -1)],`

- models/event.py:215 - truthiness access to events.find_one
  Context: `restart_event_data = await db.events.find_one(
            {"server_id": server_id, "event_type": "server_restart"},
            sort=[("timestamp", -1)]`

- models/event.py:236 - truthiness access to connections.aggregate
  Context: `cursor = db.connections.aggregate(pipeline)`

- models/player.py:231 - truthiness access to players.find_one
  Context: `document = await db.players.find_one(query)`

- models/player.py:254 - truthiness access to players.find
  Context: `players_cursor = db.players.find({"server_id": server_id, "active": True})`

- models/player.py:278 - truthiness access to kills.aggregate
  Context: `nemesis_result = await db.kills.aggregate(nemesis_pipeline).to_list(1)`

- models/player.py:279 - truthiness access to kills.aggregate
  Context: `prey_result = await db.kills.aggregate(prey_pipeline).to_list(1)`

- models/player.py:288 - truthiness access to rivalries.update_one
  Context: `await db.rivalries.update_one(
                    {"player_id": player_id, "server_id": server_id},
                    {"$set": {
                        "nemesis_id": nemesis_id,
                        "nemesis_count": nemesis_count,
                        "prey_id": prey_id,
                        "prey_count": prey_count,
                        "updated_at": datetime.utcnow()`

- models/player.py:320 - truthiness access to rivalries.update_nemesis_and_prey
  Context: `await db.rivalries.update_nemesis_and_prey(
                    self.server_id, player_id=self.player_id
                )`

- models/player.py:380 - truthiness access to players.find_one_and_update
  Context: `result = await db.players.find_one_and_update(
                    {"player_id": self.player_id, "server_id": self.server_id},
                    {"$set": update_dict},
                    return_document=ReturnDocument.AFTER,
                )`

- models/player.py:394 - truthiness access to players.find_one
  Context: `current_player = await db.players.find_one(
                {"player_id": self.player_id, "server_id": self.server_id}
            )`

- models/player.py:433 - truthiness access to players.find_one_and_update
  Context: `result = await db.players.find_one_and_update(
                {"player_id": self.player_id, "server_id": self.server_id},
                operations,
                return_document=ReturnDocument.AFTER,
            )`

- models/player.py:676 - truthiness access to players.find_one
  Context: `existing = await db.players.find_one(query)`

- models/player.py:705 - truthiness access to players.update_one
  Context: `result = await db.players.update_one(query, update_ops)`

- models/player.py:718 - truthiness access to players.find_one
  Context: `updated_doc = await db.players.find_one(query)`

- models/player.py:763 - truthiness access to players.insert_one
  Context: `result = await db.players.insert_one(player_data)`

- models/player.py:778 - truthiness access to players.update_one
  Context: `update_result = await db.players.update_one(
                                    query,
                                    {"$setOnInsert": player_data},
                                    upsert=True,
                                )`

- models/player.py:806 - truthiness access to players.find_one
  Context: `final_doc = await db.players.find_one(query)`

- models/player.py:959 - truthiness access to players.find_one
  Context: `document = await db.players.find_one(query)`

- models/player.py:974 - truthiness access to players.find
  Context: `cursor = db.players.find({"server_id": server_id})`

- models/player.py:1134 - truthiness access to players.find_one_and_update
  Context: `result = await db.players.find_one_and_update(
                {'player_id': self.player_id, 'server_id': self.server_id},
                update_ops,
                return_document=ReturnDocument.AFTER
            )`

- models/rivalry.py:654 - truthiness access to players.find_one
  Context: `player_doc = await self.db.players.find_one({"player_id": opponent_id})`

- models/rivalry.py:671 - truthiness access to players.find_one
  Context: `player_doc = await self.db.players.find_one({"player_id": opponent_id})`

- models/server.py:90 - truthiness access to game_servers.find_one
  Context: `document = await db.game_servers.find_one({"server_id": server_id})`

- models/server.py:127 - truthiness access to game_servers.find_one
  Context: `existing = await db.game_servers.find_one({"server_id": self.server_id})`

- models/server.py:131 - truthiness access to game_servers.update_one
  Context: `result = await db.game_servers.update_one(
                    {"server_id": self.server_id},
                    {"$set": doc}
                )`

- models/server.py:138 - truthiness access to game_servers.insert_one
  Context: `result = await db.game_servers.insert_one(doc)`

- models/server.py:146 - truthiness access to servers.update_one
  Context: `servers_result = await db.servers.update_one(
                    {"server_id": self.server_id},
                    {"$set": doc},
                    upsert=True
                )`

- models/server.py:188 - truthiness access to game_servers.find_one
  Context: `document = await db.game_servers.find_one(query)`

- models/server.py:201 - truthiness access to game_servers.find_one
  Context: `document = await db.game_servers.find_one(new_query)`

- models/server.py:212 - truthiness access to servers.find_one
  Context: `document = await db.servers.find_one(server_query)`

- models/server.py:220 - truthiness access to servers.find_one
  Context: `document = await db.servers.find_one(regex_server_query)`

- models/server.py:245 - truthiness access to guilds.find_one
  Context: `guild_doc = await db.guilds.find_one({"guild_id": str(guild_id)})`

- models/server.py:303 - truthiness access to game_servers.find_one
  Context: `document = await db.game_servers.find_one({"name": name, "guild_id": guild_id_str})`

- models/server.py:308 - truthiness access to servers.find_one
  Context: `document = await db.servers.find_one({"name": name, "guild_id": guild_id_str})`

- models/server.py:332 - truthiness access to guilds.find_one
  Context: `guild_doc = await db.guilds.find_one({"guild_id": guild_id_str})`

- models/server.py:387 - truthiness access to game_servers.find
  Context: `game_servers_cursor = db.game_servers.find({"guild_id": guild_id_str})`

- models/server.py:399 - truthiness access to servers.find
  Context: `servers_cursor = db.servers.find({"guild_id": guild_id_str})`

- models/server.py:431 - truthiness access to guilds.find_one
  Context: `guild_doc = await db.guilds.find_one({"guild_id": guild_id_str})`

- models/server.py:487 - truthiness access to game_servers.find_one
  Context: `document = await db.game_servers.find_one({"guild_id": guild_id_str})`

- models/server.py:492 - truthiness access to servers.find_one
  Context: `document = await db.servers.find_one({"guild_id": guild_id_str})`

- models/server.py:517 - truthiness access to guilds.find_one
  Context: `guild_doc = await db.guilds.find_one({"guild_id": guild_id_str})`

- models/server.py:580 - truthiness access to game_servers.update_one
  Context: `result = await db.game_servers.update_one(
            {"server_id": self.server_id},
            {"$set": update_dict}
        )`

- models/server.py:614 - truthiness access to game_servers.update_one
  Context: `result = await db.game_servers.update_one(
            {"server_id": self.server_id},
            {"$set": {
                "hostname": self.hostname,
                "port": self.port,
                "username": self.username,
                "password": self.password,
                "sftp_host": self.sftp_host,
                "sftp_port": self.sftp_port,
                "sftp_username": self.sftp_username,
                "sftp_password": self.sftp_password,
                "sftp_directory": self.sftp_directory,
                "updated_at": self.updated_at
            }}
        )`

- models/server.py:646 - truthiness access to game_servers.update_one
  Context: `result = await db.game_servers.update_one(
            {"server_id": self.server_id},
            {"$set": {
                "log_directory": self.log_directory,
                "updated_at": self.updated_at
            }}
        )`

- models/server.py:676 - truthiness access to game_servers.update_one
  Context: `result = await db.game_servers.update_one(
            {"server_id": self.server_id},
            {"$set": update_data}
        )`

- models/server.py:804 - truthiness access to game_servers.insert_one
  Context: `await db.game_servers.insert_one(server.to_document())`

- models/server.py:835 - truthiness access to game_servers.find_one
  Context: `game_exact = await db.game_servers.find_one({"server_id": str_server_id})`

- models/server.py:836 - truthiness access to game_servers.find_one
  Context: `game_std = await db.game_servers.find_one({"server_id": std_server_id})`

- models/server.py:838 - truthiness access to servers.find_one
  Context: `standalone_exact = await db.servers.find_one({"server_id": str_server_id})`

- models/server.py:839 - truthiness access to servers.find_one
  Context: `standalone_std = await db.servers.find_one({"server_id": std_server_id})`

- models/server.py:842 - truthiness access to guilds.find_one
  Context: `guild_exact = await db.guilds.find_one({"servers.server_id": str_server_id})`

- models/server.py:843 - truthiness access to guilds.find_one
  Context: `guild_std = await db.guilds.find_one({"servers.server_id": std_server_id})`

- models/server.py:851 - truthiness access to game_servers.find_one
  Context: `game_numeric = await db.game_servers.find_one({"server_id": numeric_id})`

- models/server.py:852 - truthiness access to servers.find_one
  Context: `standalone_numeric = await db.servers.find_one({"server_id": numeric_id})`

- models/server.py:853 - truthiness access to guilds.find_one
  Context: `guild_numeric = await db.guilds.find_one({"servers.server_id": numeric_id})`

- models/server.py:872 - truthiness access to game_servers.delete_many
  Context: `game_exact_result = await db.game_servers.delete_many({"server_id": str_server_id})`

- models/server.py:873 - truthiness access to game_servers.delete_many
  Context: `game_std_result = await db.game_servers.delete_many({"server_id": std_server_id})`

- models/server.py:879 - truthiness access to game_servers.delete_many
  Context: `game_numeric_result = await db.game_servers.delete_many({"server_id": numeric_id})`

- models/server.py:882 - truthiness access to game_servers.delete_many
  Context: `game_regex_result = await db.game_servers.delete_many({
                    "server_id": {"$regex": f"^{std_server_id}$", "$options": "i"}
                })`

- models/server.py:900 - truthiness access to servers.delete_many
  Context: `standalone_exact_result = await db.servers.delete_many({"server_id": str_server_id})`

- models/server.py:901 - truthiness access to servers.delete_many
  Context: `standalone_std_result = await db.servers.delete_many({"server_id": std_server_id})`

- models/server.py:907 - truthiness access to servers.delete_many
  Context: `standalone_numeric_result = await db.servers.delete_many({"server_id": numeric_id})`

- models/server.py:910 - truthiness access to servers.delete_many
  Context: `standalone_regex_result = await db.servers.delete_many({
                    "server_id": {"$regex": f"^{std_server_id}$", "$options": "i"}
                })`

- models/server.py:928 - truthiness access to guilds.update_many
  Context: `guild_result = await db.guilds.update_many(
                    {"servers.server_id": str_server_id},
                    {
                        "$pull": {"servers": {"server_id": str_server_id}},
                        "$set": {"updated_at": datetime.utcnow()}`

- models/server.py:944 - truthiness access to client.start_session
  Context: `async with await db.client.start_session() as session:
                        async with session.start_transaction():`

- models/server.py:967 - truthiness access to server_links.delete_many
  Context: `await db.server_links.delete_many(
                                {
                                    "$or": [
                                        {"server_id": str_server_id},
                                        {"linked_server_id": str_server_id}
                                    ]
                                },
                                session=session
                            )`

- models/server.py:978 - truthiness access to server_integrations.update_many
  Context: `await db.server_integrations.update_many(
                                {"server_id": str_server_id},
                                {
                                    "$set": {
                                        "status": "inactive",
                                        "updated_at": datetime.utcnow(),`

- models/server.py:1004 - truthiness access to players.update_many
  Context: `await db.players.update_many(
                        {"server_id": str_server_id},
                        {"$set": {"active": False, "updated_at": datetime.utcnow()}}`

- models/server.py:1010 - truthiness access to integrations.delete_many
  Context: `await db.integrations.delete_many({"server_id": str_server_id})`

- models/server.py:1011 - truthiness access to integration_configs.delete_many
  Context: `await db.integration_configs.delete_many({"server_id": str_server_id})`

- models/server.py:1012 - truthiness access to integration_settings.delete_many
  Context: `await db.integration_settings.delete_many({"server_id": str_server_id})`

- models/server.py:1015 - truthiness access to server_links.delete_many
  Context: `await db.server_links.delete_many({
                        "$or": [
                            {"server_id": str_server_id},
                            {"linked_server_id": str_server_id}
                        ]
                    })`

- models/server.py:1023 - truthiness access to integration_status.delete_many
  Context: `await db.integration_status.delete_many({"server_id": str_server_id})`

- models/server.py:1057 - truthiness access to players.find
  Context: `cursor = self.db.players.find({
            "server_id": self.server_id,
            "active": True
        })`

- models/server.py:1089 - truthiness access to kills.aggregate
  Context: `killer_cursor = self.db.kills.aggregate(killer_pipeline)`

- models/server.py:1105 - truthiness access to kills.aggregate
  Context: `weapon_cursor = self.db.kills.aggregate(weapon_pipeline)`

- models/server.py:1110 - truthiness access to kills.find
  Context: `events_cursor = self.db.kills.find(
                {"server_id": self.server_id}
            ).sort("timestamp", -1).limit(10)`

- models/server.py:1129 - truthiness access to kills.count_documents
  Context: `total_kills = await self.db.kills.count_documents({"server_id": self.server_id, "is_suicide": False})`

- models/server.py:1130 - truthiness access to kills.count_documents
  Context: `total_suicides = await self.db.kills.count_documents({"server_id": self.server_id, "is_suicide": True})`

- models/server.py:521 - direct access to servers
  Context: `server_data = guild_doc["servers"][0]`

- models/guild.py:224 - truthiness access to guilds.update_one
  Context: `result = await self.db.guilds.update_one(
            {"guild_id": self.guild_id},
            {
                "$set": {
                    "servers": self.servers,
                    "updated_at": self.updated_at
                }
            }
        )`

- models/guild.py:242 - direct access to server_id
  Context: `server_result = await self.db.servers.update_one(
                {"server_id": server_data["server_id"]},
                {"$set": server_data},
                upsert=True  # Create if doesn't exist
            )`

- models/guild.py:250 - direct access to server_id
  Context: `game_server_result = await self.db.game_servers.update_one(
                {"server_id": server_data["server_id"]},
                {"$set": server_data},
                upsert=True
            )`

- models/guild.py:362 - truthiness access to guilds.update_one
  Context: `guild_result = await self.db.guilds.update_one(
            {"guild_id": self.guild_id},
            {
                "$set": {
                    "servers": self.servers,
                    "updated_at": self.updated_at
                }
            }
        )`

- models/guild.py:374 - truthiness access to servers.delete_many
  Context: `standalone_exact = await self.db.servers.delete_many({"server_id": standardized_server_id})`

- models/guild.py:378 - truthiness access to servers.delete_many
  Context: `standalone_result = await self.db.servers.delete_many(standalone_query)`

- models/guild.py:385 - truthiness access to servers.delete_many
  Context: `numeric_result = await self.db.servers.delete_many({"server_id": numeric_id})`

- models/guild.py:392 - truthiness access to game_servers.delete_many
  Context: `game_exact = await self.db.game_servers.delete_many({"server_id": standardized_server_id})`

- models/guild.py:396 - truthiness access to game_servers.delete_many
  Context: `game_regex = await self.db.game_servers.delete_many(game_servers_query)`

- models/guild.py:403 - truthiness access to game_servers.delete_many
  Context: `numeric_result = await self.db.game_servers.delete_many({"server_id": numeric_id})`

- models/guild.py:502 - truthiness access to guilds.find_one
  Context: `guild_doc = await self.db.guilds.find_one({"guild_id": str_guild_id})`

- models/guild.py:507 - truthiness access to guilds.find_one
  Context: `guild_doc = await self.db.guilds.find_one({"guild_id": int(str_guild_id)})`

- models/guild.py:633 - truthiness access to guilds.find_one
  Context: `document = await db.guilds.find_one(query)`

- models/guild.py:638 - truthiness access to guilds.find_one
  Context: `document = await db.guilds.find_one({"guild_id": {"$regex": f"^{string_guild_id}$", "$options": "i"}})`

- models/guild.py:686 - truthiness access to guilds.update_one
  Context: `result = await db.guilds.update_one(
                {"guild_id": self.guild_id},
                {"$set": {
                    "premium_tier": tier_int,  # Explicitly use tier_int for db storage
                    "updated_at": self.updated_at
                }}
            )`

- models/guild.py:719 - truthiness access to guilds.update_one
  Context: `result = await db.guilds.update_one(
            {"guild_id": self.guild_id},
            {"$set": {
                "admin_role_id": self.admin_role_id,
                "updated_at": self.updated_at
            }}
        )`

- models/guild.py:749 - truthiness access to guilds.update_one
  Context: `result = await db.guilds.update_one(
            {"guild_id": self.guild_id},
            {"$set": {
                "admin_users": self.admin_users,
                "updated_at": self.updated_at
            }}
        )`

- models/guild.py:776 - truthiness access to guilds.update_one
  Context: `result = await db.guilds.update_one(
            {"guild_id": self.guild_id},
            {"$set": {
                "admin_users": self.admin_users,
                "updated_at": self.updated_at
            }}
        )`

- models/guild.py:829 - truthiness access to guilds.update_one
  Context: `result = await db.guilds.update_one(
            {"guild_id": self.guild_id},
            {"$set": update_dict}
        )`

- models/guild.py:937 - truthiness access to guilds.insert_one
  Context: `result = await db.guilds.insert_one(document)`

- models/guild.py:515 - direct access to premium_tier
  Context: `db_tier = guild_doc['premium_tier']`

- models/guild.py:939 - direct access to _id
  Context: `document["_id"] = result.inserted_id`

- utils/auto_bounty.py:55 - truthiness access to kills.find
  Context: `cursor = db.kills.find({
                "server_id": server_id,
                "guild_id": guild_id,
                "timestamp": {"$gte": start_time, "$lte": end_time},
                "is_suicide": {"$ne": True}  # Exclude suicides
            })`

- utils/auto_bounty.py:159 - truthiness access to guilds.find_one
  Context: `guild_data = await bot.db.guilds.find_one({"guild_id": guild_id})`

- utils/auto_bounty.py:204 - truthiness access to game_servers.find_one
  Context: `server_data = await bot.db.game_servers.find_one({"server_id": server_id})`

- utils/auto_bounty.py:289 - truthiness access to bounties.count_documents
  Context: `active_auto_bounties = await db.bounties.count_documents({
                "guild_id": guild_id,
                "server_id": server_id,
                "source": AutoBountySystem.SOURCE_AUTO,
                "status": "active"
            })`

- utils/auto_bounty.py:317 - truthiness access to bounties.find
  Context: `cursor = db.bounties.find({
                "guild_id": guild_id,
                "server_id": server_id,
                "status": "active"
            })`

- utils/auto_bounty.py:409 - truthiness access to guilds.find
  Context: `premium_guilds = await bot.db.guilds.find({
                "premium_tier": {"$gte": 2}  # Tier 2 or higher
            }).to_list(None)`

- utils/auto_bounty.py:433 - truthiness access to game_servers.find
  Context: `servers = await bot.db.game_servers.find({
                    "guild_id": guild_id,
                    "active": True
                }).to_list(None)`

- utils/autocomplete.py:95 - truthiness access to guilds.find_one
  Context: `guild_data = await bot.db.guilds.find_one({"guild_id": interaction.guild_id})`

- utils/autocomplete.py:173 - truthiness access to servers.find
  Context: `server_docs = await db.servers.find({"guild_id": guild_id}).to_list(length=25)`

- utils/autocomplete.py:182 - truthiness access to game_servers.find
  Context: `game_server_docs = await db.game_servers.find({"guild_id": guild_id}).to_list(length=25)`

- utils/csv_processor_coordinator.py:126 - truthiness access to guilds.find_one
  Context: `guild_doc = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- utils/csv_processor_coordinator.py:132 - direct access to servers
  Context: `for server in guild_doc["servers"]:`

- utils/direct_csv_handler.py:336 - truthiness access to kills.insert_many
  Context: `result = await db.kills.insert_many(events)`

- utils/direct_csv_handler.py:372 - truthiness access to game_servers.find_one
  Context: `server_doc = await db.game_servers.find_one({"server_id": server_id})`

- utils/direct_csv_handler.py:680 - truthiness access to kills.find
  Context: `kill_cursor = db.kills.find({"server_id": server_id})`

- utils/direct_csv_handler.py:729 - truthiness access to players.find_one
  Context: `player = await db.players.find_one({
                'server_id': server_id,
                'player_id': player_id
            })`

- utils/direct_csv_handler.py:736 - direct access to _id
  Context: `result = await db.players.update_one(
                    {'_id': player['_id']},
                    {
                        '$set': {
                            'name': stats['name'],
                            'kills': stats['kills'],
                            'deaths': stats['deaths'],
                            'suicides': stats['suicides'],
                            'updated_at': datetime.now()`

- utils/direct_csv_handler.py:756 - truthiness access to players.insert_one
  Context: `result = await db.players.insert_one(stats)`

- utils/direct_csv_handler.py:783 - truthiness access to kills.find
  Context: `kill_cursor = db.kills.find({
            "server_id": server_id,
            "is_suicide": {"$ne": True}
        })`

- utils/direct_csv_handler.py:823 - direct access to killer_id
  Context: `rivalry = await db.rivalries.find_one({
                'server_id': server_id,
                'killer_id': data['killer_id'],
                'victim_id': data['victim_id']
            })`

- utils/direct_csv_handler.py:831 - direct access to _id
  Context: `result = await db.rivalries.update_one(
                    {'_id': rivalry['_id']},
                    {
                        '$set': {
                            'killer_name': data['killer_name'],
                            'victim_name': data['victim_name'],
                            'kills': data['kills'],
                            'updated_at': datetime.now()`

- utils/direct_csv_handler.py:850 - truthiness access to rivalries.insert_one
  Context: `result = await db.rivalries.insert_one(data)`

- utils/direct_csv_handler.py:374 - direct access to original_server_id
  Context: `original_server_id = server_doc["original_server_id"]`

- utils/discord_utils.py:31 - truthiness access to guilds.find_one
  Context: `guild_data = await db.db.guilds.find_one({"guild_id": guild_id})`

- utils/discord_utils.py:51 - truthiness access to servers.find_one
  Context: `server_data = await db.db.servers.find_one({"server_id": server})`

- utils/rivalry_tracker.py:73 - truthiness access to players.find_one
  Context: `killer_doc = await db.players.find_one({
                "server_id": server_id, 
                "player_id": killer_id
            })`

- utils/rivalry_tracker.py:83 - truthiness access to players.find_one
  Context: `victim_doc = await db.players.find_one({
                "server_id": server_id, 
                "player_id": victim_id
            })`

- utils/rivalry_tracker.py:163 - truthiness access to players.find_one
  Context: `victim_doc = await db.players.find_one({
                "server_id": server_id, 
                "player_id": victim_id
            })`

- utils/rivalry_tracker.py:173 - truthiness access to players.find_one
  Context: `killer_doc = await db.players.find_one({
                "server_id": server_id, 
                "player_id": killer_id
            })`

- utils/rivalry_tracker.py:251 - truthiness access to players.find_one
  Context: `player_doc = await db.players.find_one({
            "server_id": server_id,
            "player_id": player_id
        })`

- utils/rivalry_tracker.py:284 - truthiness access to players.find
  Context: `cursor = db.players.find({
            "server_id": server_id,
            "top_prey": {"$exists": True}
        })`

- utils/rivalry_tracker.py:330 - truthiness access to kills.find
  Context: `kill_cursor = db.kills.find({
            "server_id": server_id
        }).sort("timestamp", 1)  # Process in chronological order`

- utils/server_mapper.py:160 - truthiness access to server_mappings.find_one
  Context: `mapping = await self.db.server_mappings.find_one({"uuid": uuid})`

- utils/server_mapper.py:165 - truthiness access to servers.find_one
  Context: `server = await self.db.servers.find_one({"_id": uuid})`

- utils/server_mapper.py:170 - truthiness access to game_servers.find_one
  Context: `game_server = await self.db.game_servers.find_one({"server_id": uuid})`

- utils/server_mapper.py:212 - truthiness access to servers.find_one
  Context: `server = await self.db.servers.find_one(query)`

- utils/server_mapper.py:227 - truthiness access to game_servers.find_one
  Context: `game_server = await self.db.game_servers.find_one(game_query)`

- utils/server_mapper.py:257 - truthiness access to server_mappings.update_one
  Context: `await self.db.server_mappings.update_one(
                    {"uuid": uuid},
                    {"$set": {
                        "uuid": uuid,
                        "original_id": original_id,
                        "hostname": hostname,
                        "server_name": server_name,
                        "updated_at": datetime.now()`

- utils/server_mapper.py:271 - truthiness access to servers.update_one
  Context: `await self.db.servers.update_one(
                    {"_id": uuid},
                    {"$set": {
                        "original_id": original_id,
                        "updated_at": datetime.now()`

- utils/server_mapper.py:282 - truthiness access to game_servers.update_one
  Context: `await self.db.game_servers.update_one(
                    {"server_id": uuid},
                    {"$set": {
                        "original_id": original_id,
                        "updated_at": datetime.now()`

- utils/server_mapper.py:318 - truthiness access to servers.find
  Context: `async for server in self.db.servers.find({"original_id": {"$exists": False}}):`

- utils/server_mapper.py:326 - truthiness access to game_servers.find
  Context: `async for server in self.db.game_servers.find({"original_id": {"$exists": False}}):`

- utils/server_utils.py:273 - truthiness access to guilds.find_one
  Context: `guild_data = await db.guilds.find_one({
            "$or": [
                {"guild_id": str_guild_id},
                {"guild_id": int(str_guild_id) if str_guild_id.isdigit() else str_guild_id}`

- utils/server_utils.py:347 - truthiness access to guilds.find_one
  Context: `guild_data = await db.guilds.find_one({"guild_id": str_guild_id})`

- utils/server_utils.py:503 - truthiness access to guilds.aggregate
  Context: `cursor = db.guilds.aggregate(pipeline)`

- utils/server_utils.py:524 - truthiness access to guilds.find
  Context: `async for guild in db.guilds.find({}):`

- utils/server_utils.py:980 - truthiness access to guilds.find_one
  Context: `guild_data = await db.guilds.find_one({
                    "$or": [
                        {"guild_id": str_guild_id},
                        {"guild_id": int(str_guild_id) if str_guild_id.isdigit() else str_guild_id}`

- utils/server_utils.py:1199 - truthiness access to guilds.find_one
  Context: `guild_data = await db.guilds.find_one({
                "$or": [
                    {"guild_id": str_guild_id},
                    {"guild_id": int(str_guild_id) if str_guild_id.isdigit() else str_guild_id}`

- utils/update_bot_status.py:138 - truthiness access to bot_status.insert_one
  Context: `await db.bot_status.insert_one(status_data)`

- utils/update_bot_status.py:147 - truthiness access to command_logs.count_documents
  Context: `'commands_used': await db.command_logs.count_documents({}),`

- utils/update_bot_status.py:148 - truthiness access to active_users.count_documents
  Context: `'active_users': await db.active_users.count_documents({}),`

- utils/update_bot_status.py:149 - truthiness access to kills.count_documents
  Context: `'kills_tracked': await db.kills.count_documents({}),`

- utils/update_bot_status.py:150 - truthiness access to bounties.count_documents
  Context: `'bounties_placed': await db.bounties.count_documents({'status': 'active'}),`

- utils/update_bot_status.py:151 - truthiness access to bounties.count_documents
  Context: `'bounties_claimed': await db.bounties.count_documents({'status': 'claimed'})`

- utils/update_bot_status.py:154 - truthiness access to stats_snapshots.insert_one
  Context: `await db.stats_snapshots.insert_one(stats_data)`

- utils/update_bot_status.py:171 - truthiness access to error_logs.insert_one
  Context: `await db.error_logs.insert_one(error_log)`

- utils/update_guild_models.py:48 - truthiness access to guilds.find_one
  Context: `guild_model_code = f"\n{indent}# Get guild model for themed embed\n{indent}guild_data = None\n{indent}guild_model = None\n{indent}try:\n{indent}    guild_data = await self.bot.db.guilds.find_one({{\"guild_id\": ctx.guild.id}})\n{indent}    if guild_data is not None:\n{indent}        guild_model = Guild(self.bot.db, guild_data)\n{indent}except Exception as e:\n{indent}    logger.warning(f\"Error getting guild model: {{e}}\")\n"`

- utils/database.py:193 - truthiness access to guilds.create_index
  Context: `await self._db.guilds.create_index("guild_id", unique=True)`

- utils/database.py:196 - truthiness access to game_servers.create_index
  Context: `await self._db.game_servers.create_index("server_id", unique=True)`

- utils/database.py:197 - truthiness access to game_servers.create_index
  Context: `await self._db.game_servers.create_index("guild_id")`

- utils/database.py:200 - truthiness access to players.create_index
  Context: `await self._db.players.create_index("player_id", unique=True)`

- utils/database.py:201 - truthiness access to players.create_index
  Context: `await self._db.players.create_index("server_id")`

- utils/database.py:202 - truthiness access to players.create_index
  Context: `await self._db.players.create_index("name")`

- utils/database.py:203 - truthiness access to players.create_index
  Context: `await self._db.players.create_index([("server_id", 1), ("name", 1)])`

- utils/database.py:206 - truthiness access to player_links.create_index
  Context: `await self._db.player_links.create_index("link_id", unique=True)`

- utils/database.py:207 - truthiness access to player_links.create_index
  Context: `await self._db.player_links.create_index("player_id")`

- utils/database.py:208 - truthiness access to player_links.create_index
  Context: `await self._db.player_links.create_index("discord_id")`

- utils/database.py:209 - truthiness access to player_links.create_index
  Context: `await self._db.player_links.create_index([("player_id", 1), ("status", 1)])`

- utils/database.py:210 - truthiness access to player_links.create_index
  Context: `await self._db.player_links.create_index([("discord_id", 1), ("status", 1)])`

- utils/database.py:213 - truthiness access to economy.create_index
  Context: `await self._db.economy.create_index("player_id", unique=True)`

- utils/database.py:214 - truthiness access to economy.create_index
  Context: `await self._db.economy.create_index("discord_id")`

- utils/database.py:217 - truthiness access to bounties.create_index
  Context: `await self._db.bounties.create_index("bounty_id", unique=True)`

- utils/database.py:218 - truthiness access to bounties.create_index
  Context: `await self._db.bounties.create_index("target_id")`

- utils/database.py:219 - truthiness access to bounties.create_index
  Context: `await self._db.bounties.create_index("placed_by_id")`

- utils/database.py:220 - truthiness access to bounties.create_index
  Context: `await self._db.bounties.create_index("server_id")`

- utils/database.py:221 - truthiness access to bounties.create_index
  Context: `await self._db.bounties.create_index("status")`

- utils/database.py:222 - truthiness access to bounties.create_index
  Context: `await self._db.bounties.create_index([("target_id", 1), ("status", 1)])`

- utils/database.py:223 - truthiness access to bounties.create_index
  Context: `await self._db.bounties.create_index([("expires_at", 1), ("status", 1)])`

- utils/database.py:226 - truthiness access to kills.create_index
  Context: `await self._db.kills.create_index([("server_id", 1), ("timestamp", -1)])`

- utils/database.py:227 - truthiness access to kills.create_index
  Context: `await self._db.kills.create_index([("killer_id", 1), ("timestamp", -1)])`

- utils/database.py:228 - truthiness access to kills.create_index
  Context: `await self._db.kills.create_index([("victim_id", 1), ("timestamp", -1)])`

- utils/database.py:231 - truthiness access to historical_data.create_index
  Context: `await self._db.historical_data.create_index([("server_id", 1), ("date", -1)])`

- utils/database.py:232 - truthiness access to historical_data.create_index
  Context: `await self._db.historical_data.create_index([("server_id", 1), ("player_id", 1), ("date", -1)])`

- utils/database.py:266 - truthiness access to game_servers.find
  Context: `async for server_doc in self._db.game_servers.find(query):`

- utils/database.py:274 - truthiness access to servers.update_one
  Context: `await self._db.servers.update_one(
                        {"server_id": server_id},
                        {"$set": {
                            "original_server_id": original_id,
                            "updated_at": datetime.utcnow()`

- utils/database.py:287 - truthiness access to guilds.find_one
  Context: `guild_doc = await self._db.guilds.find_one({"guild_id": guild_id})`

- utils/database.py:316 - truthiness access to guilds.update_one
  Context: `await self._db.guilds.update_one(
                                {"guild_id": guild_id},
                                {"$set": {
                                    "servers": servers,
                                    "updated_at": datetime.utcnow()`

- utils/database.py:326 - truthiness access to servers.find
  Context: `async for server_doc in self._db.servers.find(query):`

- utils/database.py:334 - truthiness access to game_servers.update_one
  Context: `await self._db.game_servers.update_one(
                        {"server_id": server_id},
                        {"$set": {
                            "original_server_id": original_id,
                            "updated_at": datetime.utcnow()`

- utils/database.py:346 - truthiness access to guilds.find_one
  Context: `guild_doc = await self._db.guilds.find_one({"guild_id": guild_id})`

- utils/database.py:370 - truthiness access to guilds.update_one
  Context: `await self._db.guilds.update_one(
                                {"guild_id": guild_id},
                                {"$set": {
                                    "servers": servers,
                                    "updated_at": datetime.utcnow()`

- utils/database.py:417 - truthiness access to game_servers.update_one
  Context: `await self._db.game_servers.update_one(
                                {"server_id": server_id},
                                {"$set": {
                                    "original_server_id": original_id,
                                    "updated_at": datetime.utcnow()`

- utils/database.py:426 - truthiness access to servers.update_one
  Context: `await self._db.servers.update_one(
                                {"server_id": server_id},
                                {"$set": {
                                    "original_server_id": original_id,
                                    "updated_at": datetime.utcnow()`

- utils/database.py:441 - truthiness access to game_servers.update_one
  Context: `await self._db.game_servers.update_one(
                                {"server_id": server_id},
                                {"$set": {
                                    "original_server_id": server_id,
                                    "updated_at": datetime.utcnow()`

- utils/database.py:450 - truthiness access to servers.update_one
  Context: `await self._db.servers.update_one(
                                {"server_id": server_id},
                                {"$set": {
                                    "original_server_id": server_id,
                                    "updated_at": datetime.utcnow()`

- utils/database.py:461 - truthiness access to guilds.update_one
  Context: `await self._db.guilds.update_one(
                        {"guild_id": guild_id},
                        {"$set": {
                            "servers": servers,
                            "updated_at": datetime.utcnow()`

- utils/premium.py:257 - truthiness access to guilds.find_one
  Context: `guild_doc = await db.guilds.find_one(query, {"premium_tier": 1})`

- utils/premium.py:383 - truthiness access to guilds.find_one
  Context: `guild_doc = await db.guilds.find_one(query, {"premium_tier": 1})`

- utils/premium.py:1084 - truthiness access to guilds.find_one
  Context: `guild_doc = await db.guilds.find_one(query, {"premium_tier": 1, "premium_expires": 1})`

- utils/premium.py:1095 - truthiness access to guilds.find_one
  Context: `guild_doc = await db.guilds.find_one(query, {"premium_tier": 1, "premium_expires": 1})`

- utils/premium.py:1101 - truthiness access to guilds.find_one
  Context: `guild_doc = await db.guilds.find_one(query, {"premium_tier": 1, "premium_expires": 1})`

- utils/premium.py:1160 - direct access to _id
  Context: `await db.guilds.update_one(
                            {"_id": guild_doc["_id"]},
                            {"$set": {"premium_tier": premium_tier}}
                        )`

- utils/premium.py:1193 - direct access to _id
  Context: `await db.guilds.update_one(
                            {"_id": guild_doc["_id"]},
                            {"$set": {"premium_tier": 0}}
                        )`

- utils/premium.py:1304 - truthiness access to guilds.find_one
  Context: `guild_doc = await db.guilds.find_one({"guild_id": str_guild_id}, {"_id": 1})`

- utils/premium.py:1342 - truthiness access to guilds.find_one
  Context: `guild_doc = await db.guilds.find_one({"guild_id": str_guild_id})`

- utils/premium.py:1369 - truthiness access to guilds.find_one
  Context: `guild_doc = await db.guilds.find_one({"guild_id": int_guild_id})`

- utils/premium.py:1161 - direct access to _id
  Context: `{"_id": guild_doc["_id"]},`

- utils/premium.py:1194 - direct access to _id
  Context: `{"_id": guild_doc["_id"]},`

- utils/premium_mongodb_models.py:229 - truthiness access to premium_guilds.update_one
  Context: `result = await self.db.premium_guilds.update_one(
                    {"_id": self._id},
                    {"$set": data}
                )`

- utils/premium_mongodb_models.py:236 - truthiness access to premium_guilds.find_one
  Context: `existing = await self.db.premium_guilds.find_one({"guild_id": self.guild_id})`

- utils/premium_mongodb_models.py:240 - truthiness access to premium_guilds.update_one
  Context: `result = await self.db.premium_guilds.update_one(
                        {"_id": self._id},
                        {"$set": data}
                    )`

- utils/premium_mongodb_models.py:248 - truthiness access to premium_guilds.insert_one
  Context: `result = await self.db.premium_guilds.insert_one(data_without_id)`

- utils/premium_mongodb_models.py:313 - truthiness access to premium_guilds.find_one
  Context: `document = await db.premium_guilds.find_one({"guild_id": str_guild_id})`

- utils/premium_mongodb_models.py:514 - truthiness access to premium_servers.update_one
  Context: `result = await self.db.premium_servers.update_one(
                    {"_id": self._id},
                    {"$set": data}
                )`

- utils/premium_mongodb_models.py:521 - truthiness access to premium_servers.insert_one
  Context: `result = await self.db.premium_servers.insert_one(data)`

- utils/premium_utils.py:105 - truthiness access to guilds.find_one
  Context: `guild_doc = await db.guilds.find_one({"guild_id": guild_id_str})`

- utils/premium_utils.py:111 - truthiness access to guilds.find_one
  Context: `guild_doc = await db.guilds.find_one({"guild_id": guild_id_int})`

- utils/safe_mongodb.py:115 - direct access to key
  Context: `return key in self._document and self._document[key] is not None`

- .pythonlibs/lib/python3.11/site-packages/bson/regex.py:67 - truthiness access to collection.insert_one
  Context: `>>> db.collection.insert_one({'pattern': regex})`

- .pythonlibs/lib/python3.11/site-packages/bson/raw_bson.py:31 - truthiness access to test.insert_many
  Context: `>>> result = db.test.insert_many(
  ...     [{"_id": 1, "a": 1}, {"_id": 2, "b": 1}, {"_id": 3, "c": 1}, {"_id": 4, "d": 1}]
  ... )`

- .pythonlibs/lib/python3.11/site-packages/bson/raw_bson.py:35 - truthiness access to test.find
  Context: `>>> for doc in db.test.find():
  ...     print(f"raw document: {doc.raw}")`

- .pythonlibs/lib/python3.11/site-packages/bson/raw_bson.py:38 - truthiness access to test.insert_one
  Context: `...     result = replica_db.test.insert_one(doc)`

- .pythonlibs/lib/python3.11/site-packages/pymongo/operations.py:545 - direct access to collation
  Context: `self.__document["collation"] = collation`

- .pythonlibs/lib/python3.11/site-packages/pymongo/change_stream.py:290 - truthiness access to collection.watch
  Context: `with db.collection.watch(pipeline) as stream:`

- .pythonlibs/lib/python3.11/site-packages/pymongo/change_stream.py:305 - truthiness access to collection.watch
  Context: `with db.collection.watch(
                            pipeline, resume_after=resume_token) as stream:`

- .pythonlibs/lib/python3.11/site-packages/pymongo/change_stream.py:339 - truthiness access to collection.watch
  Context: `with db.collection.watch() as stream:
                while stream.alive:
                    change = stream.try_next()`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collection.py:494 - truthiness access to test.find
  Context: `>>> for doc in db.test.find({}):`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collection.py:504 - truthiness access to test.bulk_write
  Context: `>>> result = db.test.bulk_write(requests)`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collection.py:513 - truthiness access to test.find
  Context: `>>> for doc in db.test.find({}):`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collection.py:624 - truthiness access to test.count_documents
  Context: `>>> db.test.count_documents({'x': 1})`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collection.py:626 - truthiness access to test.insert_one
  Context: `>>> result = db.test.insert_one({'x': 1})`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collection.py:629 - truthiness access to test.find_one
  Context: `>>> db.test.find_one({'x': 1})`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collection.py:692 - truthiness access to test.count_documents
  Context: `>>> db.test.count_documents({})`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collection.py:694 - truthiness access to test.insert_many
  Context: `>>> result = db.test.insert_many([{'x': i} for i in range(2)])`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collection.py:697 - truthiness access to test.count_documents
  Context: `>>> db.test.count_documents({})`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collection.py:899 - truthiness access to test.find
  Context: `>>> for doc in db.test.find({}):`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collection.py:903 - truthiness access to test.replace_one
  Context: `>>> result = db.test.replace_one({'x': 1}, {'y': 1})`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collection.py:908 - truthiness access to test.find
  Context: `>>> for doc in db.test.find({}):`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collection.py:916 - truthiness access to test.replace_one
  Context: `>>> result = db.test.replace_one({'x': 1}, {'x': 1}, True)`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collection.py:923 - truthiness access to test.find_one
  Context: `>>> db.test.find_one({'x': 1})`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collection.py:1003 - truthiness access to test.find
  Context: `>>> for doc in db.test.find():
          ...     print(doc)`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collection.py:1009 - truthiness access to test.update_one
  Context: `>>> result = db.test.update_one({'x': 1}, {'$inc': {'x': 3}})`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collection.py:1014 - truthiness access to test.find
  Context: `>>> for doc in db.test.find():
          ...     print(doc)`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collection.py:1024 - truthiness access to test.update_one
  Context: `>>> result = db.test.update_one({'x': -10}, {'$inc': {'x': 3}}, upsert=True)`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collection.py:1031 - truthiness access to test.find_one
  Context: `>>> db.test.find_one(result.upserted_id)`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collection.py:1117 - truthiness access to test.find
  Context: `>>> for doc in db.test.find():
          ...     print(doc)`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collection.py:1123 - truthiness access to test.update_many
  Context: `>>> result = db.test.update_many({'x': 1}, {'$inc': {'x': 3}})`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collection.py:1128 - truthiness access to test.find
  Context: `>>> for doc in db.test.find():
          ...     print(doc)`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collection.py:1222 - truthiness access to foo.drop
  Context: `>>> db.foo.drop()
          >>> db.drop_collection("foo")`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collection.py:1352 - truthiness access to test.count_documents
  Context: `>>> db.test.count_documents({'x': 1})`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collection.py:1354 - truthiness access to test.delete_one
  Context: `>>> result = db.test.delete_one({'x': 1})`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collection.py:1357 - truthiness access to test.count_documents
  Context: `>>> db.test.count_documents({'x': 1})`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collection.py:1419 - truthiness access to test.count_documents
  Context: `>>> db.test.count_documents({'x': 1})`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collection.py:1421 - truthiness access to test.delete_many
  Context: `>>> result = db.test.delete_many({'x': 1})`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collection.py:1424 - truthiness access to test.count_documents
  Context: `>>> db.test.count_documents({'x': 1})`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collection.py:1516 - truthiness access to test.find
  Context: `>>> db.test.find({"hello": "world"})`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collection.py:1711 - truthiness access to test.find_raw_batches
  Context: `>>> cursor = db.test.find_raw_batches()
          >>> for batch in cursor:
          ...     print(bson.decode_all(batch))`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collection.py:1938 - truthiness access to test.create_indexes
  Context: `>>> db.test.create_indexes([index1, index2])`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collection.py:2248 - truthiness access to test.list_indexes
  Context: `>>> for index in db.test.list_indexes():
          ...     print(index)`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collection.py:2329 - truthiness access to test.create_index
  Context: `>>> db.test.create_index("x", unique=True)`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collection.py:2331 - truthiness access to test.index_information
  Context: `>>> db.test.index_information()
        {'_id_': {'key': [('_id', 1)]},`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collection.py:2749 - truthiness access to test.aggregate_raw_batches
  Context: `>>> cursor = db.test.aggregate_raw_batches([
          ...     {'$project': {'x': {'$multiply': [2, '$x']}}}])`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collection.py:2803 - truthiness access to collection.watch
  Context: `with db.collection.watch() as stream:
               for change in stream:
                   print(change)`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collection.py:2819 - truthiness access to collection.watch
  Context: `with db.collection.watch([{"$match": {"operationType": "insert"}}]) as stream:`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collection.py:3155 - truthiness access to test.count_documents
  Context: `>>> db.test.count_documents({'x': 1})`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collection.py:3157 - truthiness access to test.find_one_and_delete
  Context: `>>> db.test.find_one_and_delete({'x': 1})`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collection.py:3159 - truthiness access to test.count_documents
  Context: `>>> db.test.count_documents({'x': 1})`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collection.py:3164 - truthiness access to test.find
  Context: `>>> for doc in db.test.find({'x': 1}):`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collection.py:3170 - truthiness access to test.find_one_and_delete
  Context: `>>> db.test.find_one_and_delete(
          ...     {'x': 1}, sort=[('_id', pymongo.DESCENDING)])`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collection.py:3176 - truthiness access to test.find_one_and_delete
  Context: `>>> db.test.find_one_and_delete({'x': 1}, projection={'_id': False})`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collection.py:3253 - truthiness access to test.find
  Context: `>>> for doc in db.test.find({}):`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collection.py:3259 - truthiness access to test.find_one_and_replace
  Context: `>>> db.test.find_one_and_replace({'x': 1}, {'y': 1})`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collection.py:3261 - truthiness access to test.find
  Context: `>>> for doc in db.test.find({}):`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collection.py:3358 - truthiness access to test.find_one_and_update
  Context: `>>> db.test.find_one_and_update(
          ...    {'_id': 665}, {'$inc': {'count': 1}, '$set': {'done': True}})`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collection.py:3364 - truthiness access to test.find_one_and_update
  Context: `>>> db.test.find_one_and_update(
          ...    {'_exists': False}, {'$inc': {'count': 1}})`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collection.py:3374 - truthiness access to example.find_one_and_update
  Context: `>>> db.example.find_one_and_update(
          ...     {'_id': 'userid'},
          ...     {'$inc': {'seq': 1}},
          ...     return_document=ReturnDocument.AFTER)`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collection.py:3382 - truthiness access to example.find_one_and_update
  Context: `>>> db.example.find_one_and_update(
          ...     {'_id': 'userid'},
          ...     {'$inc': {'seq': 1}},
          ...     projection={'seq': True, '_id': False},
          ...     return_document=ReturnDocument.AFTER)`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collection.py:3392 - truthiness access to example.delete_many
  Context: `>>> db.example.delete_many({}).deleted_count`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collection.py:3394 - truthiness access to example.find_one_and_update
  Context: `>>> db.example.find_one_and_update(
          ...     {'_id': 'userid'},
          ...     {'$inc': {'seq': 1}},
          ...     projection={'seq': True, '_id': False},
          ...     upsert=True,
          ...     return_document=ReturnDocument.AFTER)`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collection.py:3404 - truthiness access to test.find
  Context: `>>> for doc in db.test.find({'done': True}):`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collection.py:3409 - truthiness access to test.find_one_and_update
  Context: `>>> db.test.find_one_and_update(
          ...     {'done': True},
          ...     {'$set': {'final': True}},
          ...     sort=[('_id', pymongo.DESCENDING)])`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collection.py:665 - direct access to _id
  Context: `document["_id"] = ObjectId()  # type: ignore[index]`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collection.py:748 - direct access to _id
  Context: `document["_id"] = ObjectId()  # type: ignore[index]`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collection.py:749 - direct access to _id
  Context: `inserted_ids.append(document["_id"])`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collection.py:1998 - direct access to name
  Context: `names.append(document["name"])`

- .pythonlibs/lib/python3.11/site-packages/pymongo/bulk.py:209 - direct access to _id
  Context: `document["_id"] = ObjectId()`

- .pythonlibs/lib/python3.11/site-packages/pymongo/__init__.py:129 - truthiness access to coll.insert_one
  Context: `client.db.coll.insert_one({})`

- .pythonlibs/lib/python3.11/site-packages/pymongo/__init__.py:130 - truthiness access to coll2.insert_one
  Context: `client.db.coll2.insert_one({})`

- .pythonlibs/lib/python3.11/site-packages/pymongo/__init__.py:138 - truthiness access to coll.insert_one
  Context: `client.db.coll.insert_one({})`

- .pythonlibs/lib/python3.11/site-packages/pymongo/__init__.py:142 - truthiness access to coll2.insert_one
  Context: `client.db.coll2.insert_one({})`

- .pythonlibs/lib/python3.11/site-packages/pymongo/write_concern.py:74 - direct access to wtimeout
  Context: `self.__document["wtimeout"] = wtimeout`

- .pythonlibs/lib/python3.11/site-packages/pymongo/write_concern.py:78 - direct access to j
  Context: `self.__document["j"] = j`

- .pythonlibs/lib/python3.11/site-packages/pymongo/write_concern.py:84 - direct access to fsync
  Context: `self.__document["fsync"] = fsync`

- .pythonlibs/lib/python3.11/site-packages/pymongo/write_concern.py:96 - direct access to w
  Context: `self.__document["w"] = w`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collation.py:173 - direct access to caseLevel
  Context: `self.__document["caseLevel"] = common.validate_boolean("caseLevel", caseLevel)`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collation.py:175 - direct access to caseFirst
  Context: `self.__document["caseFirst"] = common.validate_string("caseFirst", caseFirst)`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collation.py:177 - direct access to strength
  Context: `self.__document["strength"] = common.validate_integer("strength", strength)`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collation.py:179 - direct access to numericOrdering
  Context: `self.__document["numericOrdering"] = common.validate_boolean(`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collation.py:183 - direct access to alternate
  Context: `self.__document["alternate"] = common.validate_string("alternate", alternate)`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collation.py:185 - direct access to maxVariable
  Context: `self.__document["maxVariable"] = common.validate_string("maxVariable", maxVariable)`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collation.py:187 - direct access to normalization
  Context: `self.__document["normalization"] = common.validate_boolean(`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collation.py:191 - direct access to backwards
  Context: `self.__document["backwards"] = common.validate_boolean("backwards", backwards)`

- .pythonlibs/lib/python3.11/site-packages/pymongo/collation.py:206 - direct access to key
  Context: `return "Collation({})".format(", ".join(f"{key}={document[key]!r}" for key in document))`

- .pythonlibs/lib/python3.11/site-packages/pymongo/cursor.py:701 - truthiness access to collection.find
  Context: `cursor = db.collection.find()
            # Warning: This runs a new query for each document.
            # Don't do this!
            for idx in range(10):`

- .pythonlibs/lib/python3.11/site-packages/pymongo/cursor.py:859 - truthiness access to test.find
  Context: `cursor = db.test.find(
                {'$text': {'$search': 'some words'}},
                {'score': {'$meta': 'textScore'}})`

- .pythonlibs/lib/python3.11/site-packages/pymongo/cursor.py:997 - truthiness access to test.find
  Context: `for doc in db.test.find().where('this.a < (this.b + this.c)'):`

- .pythonlibs/lib/python3.11/site-packages/sqlalchemy/testing/profiling.py:95 - truthiness access to dialect._is_url_file_db
  Context: `if config.db.name == "sqlite" and config.db.dialect._is_url_file_db(
            config.db.url
        ):`

- .pythonlibs/lib/python3.11/site-packages/sqlalchemy/testing/exclusions.py:209 - truthiness access to url.get_driver_name
  Context: `config.db.url.get_driver_name() if config else "<no driver>"
            ),`

- .pythonlibs/lib/python3.11/site-packages/sqlalchemy/testing/exclusions.py:212 - truthiness access to url.get_backend_name
  Context: `config.db.url.get_backend_name() if config else "<no database>"
            ),`

- .pythonlibs/lib/python3.11/site-packages/sqlalchemy/testing/suite/test_dialect.py:46 - truthiness access to dialect.do_ping
  Context: `testing.db.dialect.do_ping(conn.connection.dbapi_connection)`

- .pythonlibs/lib/python3.11/site-packages/sqlalchemy/testing/suite/test_reflection.py:154 - truthiness access to dialect.has_table
  Context: `is_true(config.db.dialect.has_table(conn, "test_table"))`

- .pythonlibs/lib/python3.11/site-packages/sqlalchemy/testing/suite/test_reflection.py:155 - truthiness access to dialect.has_table
  Context: `is_false(config.db.dialect.has_table(conn, "test_table_s"))`

- .pythonlibs/lib/python3.11/site-packages/sqlalchemy/testing/suite/test_reflection.py:156 - truthiness access to dialect.has_table
  Context: `is_false(config.db.dialect.has_table(conn, "nonexistent_table"))`

- .pythonlibs/lib/python3.11/site-packages/sqlalchemy/testing/suite/test_reflection.py:175 - truthiness access to dialect.has_table
  Context: `config.db.dialect.has_table(
                    conn, "test_table", schema=config.test_schema
                )`

- .pythonlibs/lib/python3.11/site-packages/sqlalchemy/testing/suite/test_reflection.py:180 - truthiness access to dialect.has_table
  Context: `config.db.dialect.has_table(
                    conn, "test_table_s", schema=config.test_schema
                )`

- .pythonlibs/lib/python3.11/site-packages/sqlalchemy/testing/suite/test_reflection.py:185 - truthiness access to dialect.has_table
  Context: `config.db.dialect.has_table(
                    conn, "nonexistent_table", schema=config.test_schema
                )`

- .pythonlibs/lib/python3.11/site-packages/sqlalchemy/testing/suite/test_reflection.py:194 - truthiness access to dialect.has_table
  Context: `config.db.dialect.has_table(
                    conn, "test_table", schema="nonexistent_schema"
                )`

- .pythonlibs/lib/python3.11/site-packages/sqlalchemy/testing/suite/test_reflection.py:253 - truthiness access to dialect.has_index
  Context: `return lambda *a, **k: config.db.dialect.has_index(conn, *a, **k)`

- .pythonlibs/lib/python3.11/site-packages/motor/core.py:1018 - truthiness access to test.find_raw_batches
  Context: `cursor = db.test.find_raw_batches()
              async for batch in cursor:
                  print(bson.decode_all(batch))`

- .pythonlibs/lib/python3.11/site-packages/motor/core.py:1147 - truthiness access to test.aggregate_raw_batches
  Context: `cursor = db.test.aggregate_raw_batches()
              async for batch in cursor:
                  print(bson.decode_all(batch))`

- .pythonlibs/lib/python3.11/site-packages/motor/core.py:1202 - truthiness access to collection.watch
  Context: `async with db.collection.watch() as change_stream:
                  async for change in change_stream:
                      print(change)`

- .pythonlibs/lib/python3.11/site-packages/motor/core.py:1239 - truthiness access to collection.watch
  Context: `async with db.collection.watch(pipeline) as stream:`

- .pythonlibs/lib/python3.11/site-packages/motor/core.py:1333 - truthiness access to test.list_indexes
  Context: `async for index in db.test.list_indexes():
                  print(index)`

- .pythonlibs/lib/python3.11/site-packages/motor/core.py:2025 - truthiness access to collection.watch
  Context: `async with db.collection.watch(pipeline) as stream:`

- .pythonlibs/lib/python3.11/site-packages/motor/core.py:2041 - truthiness access to collection.watch
  Context: `async with db.collection.watch(
                                pipeline, resume_after=resume_token) as stream:`

- .pythonlibs/lib/python3.11/site-packages/motor/docstrings.py:151 - truthiness access to test.bulk_write
  Context: `result = await db.test.bulk_write(requests)`

- .pythonlibs/lib/python3.11/site-packages/motor/docstrings.py:159 - truthiness access to test.find
  Context: `async for doc in db.test.find():
          print(doc)`

- .pythonlibs/lib/python3.11/site-packages/motor/docstrings.py:290 - truthiness access to test.create_indexes
  Context: `print(await db.test.create_indexes([index1, index2]))`

- .pythonlibs/lib/python3.11/site-packages/motor/docstrings.py:379 - truthiness access to test.delete_many
  Context: `result = await db.test.delete_many({'x': 1})`

- .pythonlibs/lib/python3.11/site-packages/motor/docstrings.py:417 - truthiness access to test.delete_one
  Context: `result = await db.test.delete_one({'x': 1})`

- .pythonlibs/lib/python3.11/site-packages/motor/docstrings.py:454 - truthiness access to foo.drop
  Context: `await db.foo.drop()
  await db.drop_collection("foo")`

- .pythonlibs/lib/python3.11/site-packages/motor/docstrings.py:495 - truthiness access to test.count_documents
  Context: `print(await db.test.count_documents({'x': 1}))`

- .pythonlibs/lib/python3.11/site-packages/motor/docstrings.py:496 - truthiness access to test.find_one_and_delete
  Context: `doc = await db.test.find_one_and_delete({'x': 1})`

- .pythonlibs/lib/python3.11/site-packages/motor/docstrings.py:498 - truthiness access to test.count_documents
  Context: `print(await db.test.count_documents({'x': 1}))`

- .pythonlibs/lib/python3.11/site-packages/motor/docstrings.py:516 - truthiness access to test.find_one_and_delete
  Context: `doc = await db.test.find_one_and_delete(
          {'x': 1}, sort=[('_id', pymongo.DESCENDING)])`

- .pythonlibs/lib/python3.11/site-packages/motor/docstrings.py:526 - truthiness access to test.find_one_and_delete
  Context: `db.test.find_one_and_delete({'x': 1}, projection={'_id': False})`

- .pythonlibs/lib/python3.11/site-packages/motor/docstrings.py:587 - truthiness access to test.find_one_and_replace
  Context: `original_doc = await db.test.find_one_and_replace({'x': 1}, {'y': 1})`

- .pythonlibs/lib/python3.11/site-packages/motor/docstrings.py:590 - truthiness access to test.find
  Context: `async for doc in db.test.find():
          print(doc)`

- .pythonlibs/lib/python3.11/site-packages/motor/docstrings.py:656 - truthiness access to test.find_one_and_update
  Context: `print(await db.test.find_one_and_update(
          {'_id': 665}, {'$inc': {'count': 1}, '$set': {'done': True}}))`

- .pythonlibs/lib/python3.11/site-packages/motor/docstrings.py:669 - truthiness access to example.find_one_and_update
  Context: `print(await db.example.find_one_and_update(
          {'_id': 'userid'},
          {'$inc': {'seq': 1}},
          return_document=ReturnDocument.AFTER))`

- .pythonlibs/lib/python3.11/site-packages/motor/docstrings.py:681 - truthiness access to example.find_one_and_update
  Context: `print(await db.example.find_one_and_update(
          {'_id': 'userid'},
          {'$inc': {'seq': 1}},
          projection={'seq': True, '_id': False},
          return_document=ReturnDocument.AFTER))`

- .pythonlibs/lib/python3.11/site-packages/motor/docstrings.py:695 - truthiness access to example.find_one_and_update
  Context: `print(await db.example.find_one_and_update(
          {'_id': 'userid'},
          {'$inc': {'seq': 1}},
          projection={'seq': True, '_id': False},
          upsert=True,
          return_document=ReturnDocument.AFTER))`

- .pythonlibs/lib/python3.11/site-packages/motor/docstrings.py:715 - truthiness access to test.find_one_and_update
  Context: `print(await db.test.find_one_and_update(
          {'done': True},
          {'$set': {'final': True}},
          sort=[('_id', pymongo.DESCENDING)]))`

- .pythonlibs/lib/python3.11/site-packages/motor/docstrings.py:788 - truthiness access to test.create_index
  Context: `print(await db.test.create_index("x", unique=True))`

- .pythonlibs/lib/python3.11/site-packages/motor/docstrings.py:789 - truthiness access to test.index_information
  Context: `print(await db.test.index_information())`

- .pythonlibs/lib/python3.11/site-packages/motor/docstrings.py:807 - truthiness access to test.insert_many
  Context: `result = db.test.insert_many([{'x': i} for i in range(2)])`

- .pythonlibs/lib/python3.11/site-packages/motor/docstrings.py:847 - truthiness access to test.insert_one
  Context: `result = await db.test.insert_one({'x': 1})`

- .pythonlibs/lib/python3.11/site-packages/motor/docstrings.py:905 - truthiness access to test.map_reduce
  Context: `result = await db.test.map_reduce(map, reduce, "myresults", limit=2)`

- .pythonlibs/lib/python3.11/site-packages/motor/docstrings.py:931 - truthiness access to test.replace_one
  Context: `result = await db.test.replace_one({'x': 1}, {'y': 1})`

- .pythonlibs/lib/python3.11/site-packages/motor/docstrings.py:936 - truthiness access to test.find
  Context: `async for doc in db.test.find():
          print(doc)`

- .pythonlibs/lib/python3.11/site-packages/motor/docstrings.py:949 - truthiness access to test.replace_one
  Context: `result = await db.test.replace_one({'x': 1}, {'x': 1}, True)`

- .pythonlibs/lib/python3.11/site-packages/motor/docstrings.py:954 - truthiness access to test.find
  Context: `async for doc in db.test.find():
          print(doc)`

- .pythonlibs/lib/python3.11/site-packages/motor/docstrings.py:1012 - truthiness access to test.update_many
  Context: `result = await db.test.update_many({'x': 1}, {'$inc': {'x': 3}})`

- .pythonlibs/lib/python3.11/site-packages/motor/docstrings.py:1017 - truthiness access to test.find
  Context: `async for doc in db.test.find():
        print(doc)`

- .pythonlibs/lib/python3.11/site-packages/motor/docstrings.py:1079 - truthiness access to test.update_one
  Context: `result = await db.test.update_one({'x': 1}, {'$inc': {'x': 3}})`

- .pythonlibs/lib/python3.11/site-packages/motor/docstrings.py:1084 - truthiness access to test.find
  Context: `async for doc in db.test.find():
        print(doc)`

- .pythonlibs/lib/python3.11/site-packages/motor/docstrings.py:1287 - truthiness access to test.find
  Context: `async for doc in db.test.find().where('this.a < (this.b + this.c)'):`

- .pythonlibs/lib/python3.11/site-packages/flask_sqlalchemy/model.py:48 - truthiness access to session.query
  Context: `"""A SQLAlchemy query for a model. Equivalent to ``db.session.query(Model)``. Can be`

- premium_backup_1747015219/utils/premium.py:257 - truthiness access to guilds.find_one
  Context: `guild_doc = await db.guilds.find_one(query, {"premium_tier": 1})`

- premium_backup_1747015219/utils/premium.py:383 - truthiness access to guilds.find_one
  Context: `guild_doc = await db.guilds.find_one(query, {"premium_tier": 1})`

- premium_backup_1747015219/utils/premium.py:1084 - truthiness access to guilds.find_one
  Context: `guild_doc = await db.guilds.find_one(query, {"premium_tier": 1, "premium_expires": 1})`

- premium_backup_1747015219/utils/premium.py:1095 - truthiness access to guilds.find_one
  Context: `guild_doc = await db.guilds.find_one(query, {"premium_tier": 1, "premium_expires": 1})`

- premium_backup_1747015219/utils/premium.py:1101 - truthiness access to guilds.find_one
  Context: `guild_doc = await db.guilds.find_one(query, {"premium_tier": 1, "premium_expires": 1})`

- premium_backup_1747015219/utils/premium.py:1160 - direct access to _id
  Context: `await db.guilds.update_one(
                            {"_id": guild_doc["_id"]},
                            {"$set": {"premium_tier": premium_tier}}
                        )`

- premium_backup_1747015219/utils/premium.py:1193 - direct access to _id
  Context: `await db.guilds.update_one(
                            {"_id": guild_doc["_id"]},
                            {"$set": {"premium_tier": 0}}
                        )`

- premium_backup_1747015219/utils/premium.py:1304 - truthiness access to guilds.find_one
  Context: `guild_doc = await db.guilds.find_one({"guild_id": str_guild_id}, {"_id": 1})`

- premium_backup_1747015219/utils/premium.py:1342 - truthiness access to guilds.find_one
  Context: `guild_doc = await db.guilds.find_one({"guild_id": str_guild_id})`

- premium_backup_1747015219/utils/premium.py:1369 - truthiness access to guilds.find_one
  Context: `guild_doc = await db.guilds.find_one({"guild_id": int_guild_id})`

- premium_backup_1747015219/utils/premium.py:1161 - direct access to _id
  Context: `{"_id": guild_doc["_id"]},`

- premium_backup_1747015219/utils/premium.py:1194 - direct access to _id
  Context: `{"_id": guild_doc["_id"]},`

- premium_backup_1747015219/cogs/premium.py:41 - truthiness access to guilds.find_one
  Context: `string_doc = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- premium_backup_1747015219/cogs/premium.py:49 - truthiness access to guilds.find_one
  Context: `int_doc = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- premium_backup_1747015219/cogs/premium.py:83 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- premium_backup_1747015219/cogs/premium.py:86 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- premium_backup_1747015219/cogs/premium.py:605 - truthiness access to guilds.find_one
  Context: `int_lookup = await self.bot.db.guilds.find_one({"guild_id": int_id})`

- premium_backup_1747015219/cogs/premium.py:622 - truthiness access to guilds.find_one
  Context: `str_lookup = await self.bot.db.guilds.find_one({"guild_id": str_id})`

- premium_backup_1747015219/models/guild.py:224 - truthiness access to guilds.update_one
  Context: `result = await self.db.guilds.update_one(
            {"guild_id": self.guild_id},
            {
                "$set": {
                    "servers": self.servers,
                    "updated_at": self.updated_at
                }
            }
        )`

- premium_backup_1747015219/models/guild.py:242 - direct access to server_id
  Context: `server_result = await self.db.servers.update_one(
                {"server_id": server_data["server_id"]},
                {"$set": server_data},
                upsert=True  # Create if doesn't exist
            )`

- premium_backup_1747015219/models/guild.py:250 - direct access to server_id
  Context: `game_server_result = await self.db.game_servers.update_one(
                {"server_id": server_data["server_id"]},
                {"$set": server_data},
                upsert=True
            )`

- premium_backup_1747015219/models/guild.py:362 - truthiness access to guilds.update_one
  Context: `guild_result = await self.db.guilds.update_one(
            {"guild_id": self.guild_id},
            {
                "$set": {
                    "servers": self.servers,
                    "updated_at": self.updated_at
                }
            }
        )`

- premium_backup_1747015219/models/guild.py:374 - truthiness access to servers.delete_many
  Context: `standalone_exact = await self.db.servers.delete_many({"server_id": standardized_server_id})`

- premium_backup_1747015219/models/guild.py:378 - truthiness access to servers.delete_many
  Context: `standalone_result = await self.db.servers.delete_many(standalone_query)`

- premium_backup_1747015219/models/guild.py:385 - truthiness access to servers.delete_many
  Context: `numeric_result = await self.db.servers.delete_many({"server_id": numeric_id})`

- premium_backup_1747015219/models/guild.py:392 - truthiness access to game_servers.delete_many
  Context: `game_exact = await self.db.game_servers.delete_many({"server_id": standardized_server_id})`

- premium_backup_1747015219/models/guild.py:396 - truthiness access to game_servers.delete_many
  Context: `game_regex = await self.db.game_servers.delete_many(game_servers_query)`

- premium_backup_1747015219/models/guild.py:403 - truthiness access to game_servers.delete_many
  Context: `numeric_result = await self.db.game_servers.delete_many({"server_id": numeric_id})`

- premium_backup_1747015219/models/guild.py:502 - truthiness access to guilds.find_one
  Context: `guild_doc = await self.db.guilds.find_one({"guild_id": str_guild_id})`

- premium_backup_1747015219/models/guild.py:507 - truthiness access to guilds.find_one
  Context: `guild_doc = await self.db.guilds.find_one({"guild_id": int(str_guild_id)})`

- premium_backup_1747015219/models/guild.py:633 - truthiness access to guilds.find_one
  Context: `document = await db.guilds.find_one(query)`

- premium_backup_1747015219/models/guild.py:638 - truthiness access to guilds.find_one
  Context: `document = await db.guilds.find_one({"guild_id": {"$regex": f"^{string_guild_id}$", "$options": "i"}})`

- premium_backup_1747015219/models/guild.py:686 - truthiness access to guilds.update_one
  Context: `result = await db.guilds.update_one(
                {"guild_id": self.guild_id},
                {"$set": {
                    "premium_tier": tier_int,  # Explicitly use tier_int for db storage
                    "updated_at": self.updated_at
                }}
            )`

- premium_backup_1747015219/models/guild.py:719 - truthiness access to guilds.update_one
  Context: `result = await db.guilds.update_one(
            {"guild_id": self.guild_id},
            {"$set": {
                "admin_role_id": self.admin_role_id,
                "updated_at": self.updated_at
            }}
        )`

- premium_backup_1747015219/models/guild.py:749 - truthiness access to guilds.update_one
  Context: `result = await db.guilds.update_one(
            {"guild_id": self.guild_id},
            {"$set": {
                "admin_users": self.admin_users,
                "updated_at": self.updated_at
            }}
        )`

- premium_backup_1747015219/models/guild.py:776 - truthiness access to guilds.update_one
  Context: `result = await db.guilds.update_one(
            {"guild_id": self.guild_id},
            {"$set": {
                "admin_users": self.admin_users,
                "updated_at": self.updated_at
            }}
        )`

- premium_backup_1747015219/models/guild.py:829 - truthiness access to guilds.update_one
  Context: `result = await db.guilds.update_one(
            {"guild_id": self.guild_id},
            {"$set": update_dict}
        )`

- premium_backup_1747015219/models/guild.py:937 - truthiness access to guilds.insert_one
  Context: `result = await db.guilds.insert_one(document)`

- premium_backup_1747015219/models/guild.py:515 - direct access to premium_tier
  Context: `db_tier = guild_doc['premium_tier']`

- premium_backup_1747015219/models/guild.py:939 - direct access to _id
  Context: `document["_id"] = result.inserted_id`

- premium_fix_backups/stats.py:88 - truthiness access to players.find
  Context: `players_cursor = interaction.client.db.players.find(
                    {"server_id": str(server_id), "active": True},`

- premium_fix_backups/stats.py:588 - truthiness access to kills.aggregate
  Context: `cursor = self.bot.db.kills.aggregate(pipeline)`

- premium_fix_backups/stats.py:675 - truthiness access to kills.aggregate
  Context: `cursor = self.bot.db.kills.aggregate(pipeline)`

- premium_fix_backups/stats.py:789 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- premium_fix_backups/stats.py:792 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- premium_fix_backups/stats.py:805 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- premium_fix_backups/stats.py:808 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- premium_fix_backups/stats.py:1069 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- premium_fix_backups/stats.py:1072 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- premium_fix_backups/stats.py:1152 - truthiness access to kills.aggregate
  Context: `cursor = self.bot.db.kills.aggregate(pipeline)`

- premium_fix_backups/stats.py:1249 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- premium_fix_backups/stats.py:1252 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- premium_fix_backups/stats.py:1265 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- premium_fix_backups/stats.py:1268 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- premium_fix_backups/stats.py:1335 - truthiness access to kills.aggregate
  Context: `cursor = self.bot.db.kills.aggregate(pipeline)`

- premium_fix_backups/stats.py:1379 - truthiness access to kills.aggregate
  Context: `top_users_cursor = self.bot.db.kills.aggregate(top_users_pipeline)`

- comprehensive_fix_backups/premium_utils.py:105 - truthiness access to guilds.find_one
  Context: `guild_doc = await db.guilds.find_one({"guild_id": guild_id_str})`

- comprehensive_fix_backups/premium_utils.py:111 - truthiness access to guilds.find_one
  Context: `guild_doc = await db.guilds.find_one({"guild_id": guild_id_int})`

- comprehensive_fix_backups/premium_utils.py:112 - truthiness access to unknown
  Context: `if guild_doc:`

- comprehensive_fix_backups/premium_utils.py:117 - truthiness access to unknown
  Context: `if guild_doc:`

- comprehensive_fix_backups/admin.py:56 - truthiness access to guilds.insert_one
  Context: `await self.bot.db.guilds.insert_one(guild.to_dict())`

- comprehensive_fix_backups/admin.py:134 - truthiness access to guilds.insert_one
  Context: `await self.bot.db.guilds.insert_one(target_guild.to_dict())`

- comprehensive_fix_backups/admin.py:223 - truthiness access to game_servers.count_documents
  Context: `server_count = await self.bot.db.game_servers.count_documents({})`

- comprehensive_fix_backups/admin.py:224 - truthiness access to players.count_documents
  Context: `player_count = await self.bot.db.players.count_documents({})`

- comprehensive_fix_backups/admin.py:225 - truthiness access to kills.count_documents
  Context: `kill_count = await self.bot.db.kills.count_documents({})`

- comprehensive_fix_backups/admin.py:288 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- comprehensive_fix_backups/admin.py:291 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- comprehensive_fix_backups/admin.py:321 - truthiness access to bot_config.update_one
  Context: `await self.bot.db.bot_config.update_one(
                    {"key": "home_guild_id"}, 
                    {"$set": {"key": "home_guild_id", "value": str(ctx.guild.id)}},`

- comprehensive_fix_backups/admin.py:390 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- comprehensive_fix_backups/admin.py:393 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- comprehensive_fix_backups/bounties.py:96 - truthiness access to guilds.find
  Context: `guilds_cursor = db.db.guilds.find({})`

- comprehensive_fix_backups/bounties.py:228 - truthiness access to guilds.find_one
  Context: `guild_data = await db.db.guilds.find_one({"guild_id": str(guild_id)})`

- comprehensive_fix_backups/bounties.py:231 - truthiness access to guilds.find_one
  Context: `guild_data = await db.db.guilds.find_one({"guild_id": int(guild_id)})`

- comprehensive_fix_backups/bounties.py:420 - truthiness access to players.find_one
  Context: `player_data = await db.db.players.find_one(player_query)`

- comprehensive_fix_backups/bounties.py:428 - truthiness access to players.find_one
  Context: `player_data = await db.db.players.find_one(player_query)`

- comprehensive_fix_backups/bounties.py:451 - truthiness access to player_links.find_one
  Context: `self_link = await db.db.player_links.find_one(link_query)`

- comprehensive_fix_backups/bounties.py:793 - truthiness access to guilds.find_one
  Context: `guild_data = await db.db.guilds.find_one({"guild_id": str(guild_id)})`

- comprehensive_fix_backups/bounties.py:796 - truthiness access to guilds.find_one
  Context: `guild_data = await db.db.guilds.find_one({"guild_id": int(guild_id)})`

- comprehensive_fix_backups/bounties.py:892 - truthiness access to guilds.update_one
  Context: `await db.db.guilds.update_one(
                {"guild_id": guild_id},
                {"$set": update}
            )`

- comprehensive_fix_backups/csv_processor.py:127 - truthiness access to csv_processor_state.find
  Context: `server_states_cursor = self.bot.db.csv_processor_state.find({})`

- comprehensive_fix_backups/csv_processor.py:169 - truthiness access to bot_config.find_one
  Context: `legacy_state = await self.bot.db.bot_config.find_one({"key": "csv_processor_state"})`

- comprehensive_fix_backups/csv_processor.py:193 - truthiness access to bot_config.delete_one
  Context: `await self.bot.db.bot_config.delete_one({"key": "csv_processor_state"})`

- comprehensive_fix_backups/csv_processor.py:235 - truthiness access to csv_processor_state.update_one
  Context: `await self.bot.db.csv_processor_state.update_one(
                    {"server_id": server_id},
                    {"$set": state},
                    upsert=True
                )`

- comprehensive_fix_backups/csv_processor.py:613 - truthiness access to servers.find
  Context: `servers_cursor = self.bot.db.servers.find({
                "$and": [
                    {"sftp_host": {"$exists": True}},
                    {"sftp_username": {"$exists": True}},
                    {"sftp_password": {"$exists": True}}
                ]
            })`

- comprehensive_fix_backups/csv_processor.py:652 - truthiness access to game_servers.find
  Context: `game_servers_cursor = self.bot.db.game_servers.find({
                "$and": [
                    {"sftp_host": {"$exists": True}},
                    {"sftp_username": {"$exists": True}},
                    {"sftp_password": {"$exists": True}}
                ]
            })`

- comprehensive_fix_backups/csv_processor.py:686 - truthiness access to guilds.find
  Context: `guilds_cursor = self.bot.db.guilds.find({})`

- comprehensive_fix_backups/csv_processor.py:2434 - truthiness access to kills.insert_many
  Context: `result = await self.bot.db.kills.insert_many(kill_docs, ordered=False)`

- comprehensive_fix_backups/csv_processor.py:2469 - truthiness access to kills.insert_many
  Context: `result = await self.bot.db.kills.insert_many(suicide_docs, ordered=False)`

- comprehensive_fix_backups/csv_processor.py:2549 - truthiness access to kills.insert_many
  Context: `result = await self.bot.db.kills.insert_many(suicide_docs, ordered=False)`

- comprehensive_fix_backups/csv_processor.py:2577 - truthiness access to kills.insert_many
  Context: `result = await self.bot.db.kills.insert_many(kill_docs, ordered=False)`

- comprehensive_fix_backups/csv_processor.py:2816 - truthiness access to kills.delete_many
  Context: `kill_result = await self.bot.db.kills.delete_many({"server_id": server_id})`

- comprehensive_fix_backups/csv_processor.py:2823 - truthiness access to players.update_many
  Context: `player_result = await self.bot.db.players.update_many(
                    {"server_id": server_id},
                    {"$set": {
                        "kills": 0,
                        "deaths": 0,
                        "last_updated": datetime.now(),`

- comprehensive_fix_backups/csv_processor.py:2838 - truthiness access to rivalries.delete_many
  Context: `rivalry_result = await self.bot.db.rivalries.delete_many({"server_id": server_id})`

- comprehensive_fix_backups/csv_processor.py:2968 - truthiness access to kills.delete_many
  Context: `kill_result = await self.bot.db.kills.delete_many({"server_id": resolved_server_id})`

- comprehensive_fix_backups/csv_processor.py:2975 - truthiness access to players.update_many
  Context: `player_reset = await self.bot.db.players.update_many(
                            {"server_id": resolved_server_id},
                            {"$set": {"kills": 0, "deaths": 0, "suicides": 0, "updated_at": datetime.utcnow()}}`

- comprehensive_fix_backups/csv_processor.py:2985 - truthiness access to rivalries.delete_many
  Context: `rivalry_result = await self.bot.db.rivalries.delete_many({"server_id": resolved_server_id})`

- comprehensive_fix_backups/csv_processor.py:3098 - truthiness access to csv_processor_state.delete_one
  Context: `state_result = await self.bot.db.csv_processor_state.delete_one({"server_id": server_id})`

- comprehensive_fix_backups/csv_processor.py:3112 - truthiness access to kills.delete_many
  Context: `kill_result = await self.bot.db.kills.delete_many({"server_id": server_id})`

- comprehensive_fix_backups/csv_processor.py:3116 - truthiness access to players.update_many
  Context: `player_reset = await self.bot.db.players.update_many(
                {"server_id": server_id},
                {"$set": {"kills": 0, "deaths": 0, "suicides": 0, "updated_at": datetime.utcnow()}}`

- comprehensive_fix_backups/csv_processor.py:3123 - truthiness access to rivalries.delete_many
  Context: `rivalry_result = await self.bot.db.rivalries.delete_many({"server_id": server_id})`

- comprehensive_fix_backups/csv_processor.py:3202 - truthiness access to guilds.find_one
  Context: `guild_doc = await self.bot.db.guilds.find_one({"guild_id": guild_id})`

- comprehensive_fix_backups/csv_processor.py:3354 - truthiness access to guilds.find_one
  Context: `guild_doc = await self.bot.db.guilds.find_one({"guild_id": guild_id})`

- comprehensive_fix_backups/csv_processor.py:3421 - truthiness access to kills.count_documents
  Context: `kills_count = await self.bot.db.kills.count_documents({
                        "server_id": server_id,
                        "is_suicide": False,
                        "timestamp": {"$gte": datetime.now() - timedelta(days=safe_days)}`

- comprehensive_fix_backups/csv_processor.py:3427 - truthiness access to kills.count_documents
  Context: `suicides_count = await self.bot.db.kills.count_documents({
                        "server_id": server_id,
                        "is_suicide": True,
                        "timestamp": {"$gte": datetime.now() - timedelta(days=safe_days)}`

- comprehensive_fix_backups/csv_processor.py:3446 - truthiness access to kills.aggregate
  Context: `result = await self.bot.db.kills.aggregate(pipeline).to_list(length=1)`

- comprehensive_fix_backups/csv_processor.py:3753 - truthiness access to kills.insert_one
  Context: `await self.bot.db.kills.insert_one(suicide_doc)`

- comprehensive_fix_backups/csv_processor.py:3792 - truthiness access to kills.insert_one
  Context: `await self.bot.db.kills.insert_one(kill_doc)`

- comprehensive_fix_backups/csv_processor.py:3876 - truthiness access to players.update_one
  Context: `result = await self.bot.db.players.update_one(
                {"player_id": player_id},  # Match by player_id
                {
                    "$set": player_data,
                    "$setOnInsert": {
                        "created_at": now,  # Only set on new records
                        "kills": 0,
                        "deaths": 0, 
                        "suicides": 0
                    }
                },
                upsert=True  # Create if doesn't exist
            )`

- comprehensive_fix_backups/csv_processor.py:3938 - truthiness access to csv_processor_state.delete_one
  Context: `state_result = await self.bot.db.csv_processor_state.delete_one({"server_id": server_id})`

- comprehensive_fix_backups/csv_processor_backup.py:139 - truthiness access to servers.find
  Context: `servers_cursor = self.bot.db.servers.find({
                "$and": [
                    {"sftp_host": {"$exists": True}},
                    {"sftp_username": {"$exists": True}},
                    {"sftp_password": {"$exists": True}}
                ]
            })`

- comprehensive_fix_backups/csv_processor_backup.py:165 - truthiness access to game_servers.find
  Context: `game_servers_cursor = self.bot.db.game_servers.find({
                "$and": [
                    {"sftp_host": {"$exists": True}},
                    {"sftp_username": {"$exists": True}},
                    {"sftp_password": {"$exists": True}}
                ]
            })`

- comprehensive_fix_backups/csv_processor_backup.py:196 - truthiness access to guilds.find
  Context: `guilds_cursor = self.bot.db.guilds.find({})`

- comprehensive_fix_backups/csv_processor_backup.py:1001 - truthiness access to guilds.find_one
  Context: `guild_doc = await self.bot.db.guilds.find_one({"guild_id": guild_id})`

- comprehensive_fix_backups/csv_processor_backup.py:1143 - truthiness access to guilds.find_one
  Context: `guild_doc = await self.bot.db.guilds.find_one({"guild_id": guild_id})`

- comprehensive_fix_backups/csv_processor_backup.py:1378 - truthiness access to kills.insert_one
  Context: `await self.bot.db.kills.insert_one(kill_doc)`

- comprehensive_fix_backups/csv_processor_backup.py:1415 - truthiness access to players.insert_one
  Context: `await self.bot.db.players.insert_one(player.__dict__)`

- comprehensive_fix_backups/csv_processor_backup.py:1003 - direct access to default_server_id
  Context: `raw_server_id = guild_doc["default_server_id"]`

- comprehensive_fix_backups/csv_processor_backup.py:1145 - direct access to default_server_id
  Context: `raw_server_id = guild_doc["default_server_id"]`

- comprehensive_fix_backups/economy.py:936 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- comprehensive_fix_backups/economy.py:939 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- comprehensive_fix_backups/events.py:51 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- comprehensive_fix_backups/events.py:54 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- comprehensive_fix_backups/events.py:140 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- comprehensive_fix_backups/events.py:143 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- comprehensive_fix_backups/events.py:160 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- comprehensive_fix_backups/events.py:163 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- comprehensive_fix_backups/events.py:263 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- comprehensive_fix_backups/events.py:266 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- comprehensive_fix_backups/events.py:327 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- comprehensive_fix_backups/events.py:330 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- comprehensive_fix_backups/events.py:343 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- comprehensive_fix_backups/events.py:346 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- comprehensive_fix_backups/events.py:454 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- comprehensive_fix_backups/events.py:457 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- comprehensive_fix_backups/events.py:476 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- comprehensive_fix_backups/events.py:479 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- comprehensive_fix_backups/events.py:600 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- comprehensive_fix_backups/events.py:603 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- comprehensive_fix_backups/events.py:616 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- comprehensive_fix_backups/events.py:619 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- comprehensive_fix_backups/events.py:730 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- comprehensive_fix_backups/events.py:733 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- comprehensive_fix_backups/events.py:864 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- comprehensive_fix_backups/events.py:867 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- comprehensive_fix_backups/events.py:989 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- comprehensive_fix_backups/events.py:992 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- comprehensive_fix_backups/events.py:1136 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"servers.server_id": server_id})`

- comprehensive_fix_backups/events.py:1179 - truthiness access to guilds.count_documents
  Context: `if await bot.db.guilds.count_documents({"guild_id": guild_id, "servers": {"$exists": True, "$ne": []}}) == 0:`

- comprehensive_fix_backups/events.py:1626 - truthiness access to guilds.find_one
  Context: `guild_data = await bot.db.guilds.find_one({"servers.server_id": server.server_id})`

- comprehensive_fix_backups/events.py:1687 - truthiness access to guilds.find_one
  Context: `guild_data = await bot.db.guilds.find_one({"servers.server_id": server.server_id})`

- comprehensive_fix_backups/killfeed.py:54 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- comprehensive_fix_backups/killfeed.py:57 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- comprehensive_fix_backups/killfeed.py:74 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- comprehensive_fix_backups/killfeed.py:77 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- comprehensive_fix_backups/killfeed.py:170 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- comprehensive_fix_backups/killfeed.py:173 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- comprehensive_fix_backups/killfeed.py:231 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- comprehensive_fix_backups/killfeed.py:234 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- comprehensive_fix_backups/killfeed.py:247 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- comprehensive_fix_backups/killfeed.py:250 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- comprehensive_fix_backups/killfeed.py:359 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"servers.server_id": server_id})`

- comprehensive_fix_backups/killfeed.py:402 - truthiness access to guilds.count_documents
  Context: `if await bot.db.guilds.count_documents({"guild_id": guild_id, "servers": {"$exists": True, "$ne": []}}) == 0:`

- comprehensive_fix_backups/killfeed.py:771 - truthiness access to kills.insert_one
  Context: `await bot.db.kills.insert_one(kill_event)`

- comprehensive_fix_backups/killfeed.py:784 - truthiness access to guilds.find_one
  Context: `guild_data = await bot.db.guilds.find_one({"servers.server_id": server.server_id})`

- comprehensive_fix_backups/killfeed.py:921 - truthiness access to guilds.find_one
  Context: `guild_data = await bot.db.guilds.find_one({"servers.server_id": server_id})`

- comprehensive_fix_backups/log_processor.py:532 - truthiness access to servers.find_one
  Context: `server_doc = await self.bot.db.servers.find_one({"_id": server_id})`

- comprehensive_fix_backups/log_processor.py:570 - truthiness access to servers.find
  Context: `server_docs = await self.bot.db.servers.find({"original_server_id": {"$exists": True}}).to_list(10)`

- comprehensive_fix_backups/log_processor.py:1106 - truthiness access to kills.insert_one
  Context: `await self.bot.db.kills.insert_one(kill_doc)`

- comprehensive_fix_backups/log_processor.py:1163 - truthiness access to connections.insert_one
  Context: `await self.bot.db.connections.insert_one(connection_doc)`

- comprehensive_fix_backups/log_processor.py:1214 - truthiness access to missions.insert_one
  Context: `await self.bot.db.missions.insert_one(mission_doc)`

- comprehensive_fix_backups/log_processor.py:1228 - truthiness access to game_events.insert_one
  Context: `await self.bot.db.game_events.insert_one(game_event_doc)`

- comprehensive_fix_backups/log_processor.py:1267 - truthiness access to players.insert_one
  Context: `await self.bot.db.players.insert_one(player.__dict__)`

- comprehensive_fix_backups/log_processor.py:534 - direct access to original_server_id
  Context: `path_server_id = server_doc["original_server_id"]`

- comprehensive_fix_backups/new_csv_processor.py:209 - truthiness access to servers.find
  Context: `async for server in self.bot.db.servers.find({"sftp_enabled": True}):`

- comprehensive_fix_backups/new_csv_processor.py:220 - truthiness access to game_servers.find
  Context: `async for server in self.bot.db.game_servers.find({"sftp_enabled": True}):`

- comprehensive_fix_backups/new_csv_processor.py:231 - truthiness access to guilds.find
  Context: `async for guild in self.bot.db.guilds.find({}):`

- comprehensive_fix_backups/new_csv_processor.py:741 - truthiness access to kills.insert_one
  Context: `await self.bot.db.kills.insert_one(kill_record)`

- comprehensive_fix_backups/new_csv_processor.py:748 - direct access to _id
  Context: `await self.bot.db.players.update_stats(killer["_id"], "kills")`

- comprehensive_fix_backups/new_csv_processor.py:749 - direct access to _id
  Context: `await self.bot.db.players.update_stats(victim["_id"], "deaths")`

- comprehensive_fix_backups/new_csv_processor.py:752 - direct access to _id
  Context: `await self.bot.db.rivalries.update_nemesis_and_prey(
                    killer_id=killer["_id"],
                    victim_id=victim["_id"],
                    server_id=server_id
                )`

- comprehensive_fix_backups/new_csv_processor.py:782 - truthiness access to players.find_one
  Context: `player = await self.bot.db.players.find_one({
                "player_id": player_id,
                "server_id": server_id
            })`

- comprehensive_fix_backups/new_csv_processor.py:796 - direct access to _id
  Context: `await self.bot.db.players.update_one(
                        {"_id": player["_id"]},
                        {"$set": {"name": player_name, "known_aliases": known_aliases}}
                    )`

- comprehensive_fix_backups/new_csv_processor.py:815 - truthiness access to players.insert_one
  Context: `result = await self.bot.db.players.insert_one(new_player)`

- comprehensive_fix_backups/new_csv_processor.py:818 - truthiness access to players.find_one
  Context: `return await self.bot.db.players.find_one({"_id": result.inserted_id})`

- comprehensive_fix_backups/setup.py:375 - truthiness access to servers.find_one
  Context: `server_doc = await self.bot.db.servers.find_one({"server_id": server_id})`

- comprehensive_fix_backups/setup.py:387 - truthiness access to game_servers.find_one
  Context: `server_doc = await self.bot.db.game_servers.find_one({"server_id": server_id})`

- comprehensive_fix_backups/setup.py:401 - truthiness access to guilds.find_one
  Context: `guild_doc = await self.bot.db.guilds.find_one({"guild_id": guild_id_str})`

- comprehensive_fix_backups/setup.py:441 - truthiness access to guilds.update_one
  Context: `await self.bot.db.guilds.update_one(
                                        {"guild_id": guild_id_str, "servers.server_id": server_id},
                                        {"$set": {"servers.$.historical_parse_done": True}}
                                    )`

- comprehensive_fix_backups/setup.py:634 - truthiness access to guilds.update_one
  Context: `await self.bot.db.guilds.update_one(
                                {"guild_id": guild_id_val, "servers.server_id": std_server_id},
                                {"$set": {"servers.$.historical_parse_done": False}}
                            )`

- comprehensive_fix_backups/setup.py:641 - truthiness access to servers.update_one
  Context: `await self.bot.db.servers.update_one(
                                {"server_id": std_server_id},
                                {"$set": {"historical_parse_done": False}}
                            )`

- comprehensive_fix_backups/setup.py:657 - truthiness access to game_servers.delete_many
  Context: `result = await self.bot.db.game_servers.delete_many({"server_id": std_server_id})`

- comprehensive_fix_backups/setup.py:661 - truthiness access to servers.delete_many
  Context: `result = await self.bot.db.servers.delete_many({"server_id": std_server_id})`

- comprehensive_fix_backups/setup.py:665 - truthiness access to players.update_many
  Context: `player_result = await self.bot.db.players.update_many(
                                {"server_id": std_server_id},
                                {"$set": {"active": False, "updated_at": datetime.utcnow()}}`

- comprehensive_fix_backups/setup.py:672 - truthiness access to kills.delete_many
  Context: `kills_result = await self.bot.db.kills.delete_many({"server_id": std_server_id})`

- comprehensive_fix_backups/setup.py:676 - truthiness access to rivalries.delete_many
  Context: `rivalries_result = await self.bot.db.rivalries.delete_many({"server_id": std_server_id})`

- comprehensive_fix_backups/setup.py:691 - truthiness access to csv_processor_state.delete_one
  Context: `state_result = await self.bot.db.csv_processor_state.delete_one({"server_id": std_server_id})`

- comprehensive_fix_backups/stats.py:88 - truthiness access to players.find
  Context: `players_cursor = interaction.client.db.players.find(
                    {"server_id": str(server_id), "active": True},`

- comprehensive_fix_backups/stats.py:588 - truthiness access to kills.aggregate
  Context: `cursor = self.bot.db.kills.aggregate(pipeline)`

- comprehensive_fix_backups/stats.py:675 - truthiness access to kills.aggregate
  Context: `cursor = self.bot.db.kills.aggregate(pipeline)`

- comprehensive_fix_backups/stats.py:789 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- comprehensive_fix_backups/stats.py:792 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- comprehensive_fix_backups/stats.py:805 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- comprehensive_fix_backups/stats.py:808 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- comprehensive_fix_backups/stats.py:1069 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- comprehensive_fix_backups/stats.py:1072 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- comprehensive_fix_backups/stats.py:1152 - truthiness access to kills.aggregate
  Context: `cursor = self.bot.db.kills.aggregate(pipeline)`

- comprehensive_fix_backups/stats.py:1249 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- comprehensive_fix_backups/stats.py:1252 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- comprehensive_fix_backups/stats.py:1265 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- comprehensive_fix_backups/stats.py:1268 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- comprehensive_fix_backups/stats.py:1335 - truthiness access to kills.aggregate
  Context: `cursor = self.bot.db.kills.aggregate(pipeline)`

- comprehensive_fix_backups/stats.py:1379 - truthiness access to kills.aggregate
  Context: `top_users_cursor = self.bot.db.kills.aggregate(top_users_pipeline)`

- lsp_fixes_backups/admin.py:56 - truthiness access to guilds.insert_one
  Context: `await self.bot.db.guilds.insert_one(guild.to_dict())`

- lsp_fixes_backups/admin.py:134 - truthiness access to guilds.insert_one
  Context: `await self.bot.db.guilds.insert_one(target_guild.to_dict())`

- lsp_fixes_backups/admin.py:223 - truthiness access to game_servers.count_documents
  Context: `server_count = await self.bot.db.game_servers.count_documents({})`

- lsp_fixes_backups/admin.py:224 - truthiness access to players.count_documents
  Context: `player_count = await self.bot.db.players.count_documents({})`

- lsp_fixes_backups/admin.py:225 - truthiness access to kills.count_documents
  Context: `kill_count = await self.bot.db.kills.count_documents({})`

- lsp_fixes_backups/admin.py:288 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- lsp_fixes_backups/admin.py:291 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- lsp_fixes_backups/admin.py:321 - truthiness access to bot_config.update_one
  Context: `await self.bot.db.bot_config.update_one(
                    {"key": "home_guild_id"}, 
                    {"$set": {"key": "home_guild_id", "value": str(ctx.guild.id)}},`

- lsp_fixes_backups/admin.py:390 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- lsp_fixes_backups/admin.py:393 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- lsp_fixes_backups/bounties.py:96 - truthiness access to guilds.find
  Context: `guilds_cursor = db.db.guilds.find({})`

- lsp_fixes_backups/bounties.py:228 - truthiness access to guilds.find_one
  Context: `guild_data = await db.db.guilds.find_one({"guild_id": str(guild_id)})`

- lsp_fixes_backups/bounties.py:231 - truthiness access to guilds.find_one
  Context: `guild_data = await db.db.guilds.find_one({"guild_id": int(guild_id)})`

- lsp_fixes_backups/bounties.py:420 - truthiness access to players.find_one
  Context: `player_data = await db.db.players.find_one(player_query)`

- lsp_fixes_backups/bounties.py:428 - truthiness access to players.find_one
  Context: `player_data = await db.db.players.find_one(player_query)`

- lsp_fixes_backups/bounties.py:451 - truthiness access to player_links.find_one
  Context: `self_link = await db.db.player_links.find_one(link_query)`

- lsp_fixes_backups/bounties.py:793 - truthiness access to guilds.find_one
  Context: `guild_data = await db.db.guilds.find_one({"guild_id": str(guild_id)})`

- lsp_fixes_backups/bounties.py:796 - truthiness access to guilds.find_one
  Context: `guild_data = await db.db.guilds.find_one({"guild_id": int(guild_id)})`

- lsp_fixes_backups/bounties.py:892 - truthiness access to guilds.update_one
  Context: `await db.db.guilds.update_one(
                {"guild_id": guild_id},
                {"$set": update}
            )`

- lsp_fixes_backups/csv_processor.py:127 - truthiness access to csv_processor_state.find
  Context: `server_states_cursor = self.bot.db.csv_processor_state.find({})`

- lsp_fixes_backups/csv_processor.py:169 - truthiness access to bot_config.find_one
  Context: `legacy_state = await self.bot.db.bot_config.find_one({"key": "csv_processor_state"})`

- lsp_fixes_backups/csv_processor.py:193 - truthiness access to bot_config.delete_one
  Context: `await self.bot.db.bot_config.delete_one({"key": "csv_processor_state"})`

- lsp_fixes_backups/csv_processor.py:235 - truthiness access to csv_processor_state.update_one
  Context: `await self.bot.db.csv_processor_state.update_one(
                    {"server_id": server_id},
                    {"$set": state},
                    upsert=True
                )`

- lsp_fixes_backups/csv_processor.py:613 - truthiness access to servers.find
  Context: `servers_cursor = self.bot.db.servers.find({
                "$and": [
                    {"sftp_host": {"$exists": True}},
                    {"sftp_username": {"$exists": True}},
                    {"sftp_password": {"$exists": True}}
                ]
            })`

- lsp_fixes_backups/csv_processor.py:652 - truthiness access to game_servers.find
  Context: `game_servers_cursor = self.bot.db.game_servers.find({
                "$and": [
                    {"sftp_host": {"$exists": True}},
                    {"sftp_username": {"$exists": True}},
                    {"sftp_password": {"$exists": True}}
                ]
            })`

- lsp_fixes_backups/csv_processor.py:686 - truthiness access to guilds.find
  Context: `guilds_cursor = self.bot.db.guilds.find({})`

- lsp_fixes_backups/csv_processor.py:2434 - truthiness access to kills.insert_many
  Context: `result = await self.bot.db.kills.insert_many(kill_docs, ordered=False)`

- lsp_fixes_backups/csv_processor.py:2469 - truthiness access to kills.insert_many
  Context: `result = await self.bot.db.kills.insert_many(suicide_docs, ordered=False)`

- lsp_fixes_backups/csv_processor.py:2549 - truthiness access to kills.insert_many
  Context: `result = await self.bot.db.kills.insert_many(suicide_docs, ordered=False)`

- lsp_fixes_backups/csv_processor.py:2577 - truthiness access to kills.insert_many
  Context: `result = await self.bot.db.kills.insert_many(kill_docs, ordered=False)`

- lsp_fixes_backups/csv_processor.py:2816 - truthiness access to kills.delete_many
  Context: `kill_result = await self.bot.db.kills.delete_many({"server_id": server_id})`

- lsp_fixes_backups/csv_processor.py:2823 - truthiness access to players.update_many
  Context: `player_result = await self.bot.db.players.update_many(
                    {"server_id": server_id},
                    {"$set": {
                        "kills": 0,
                        "deaths": 0,
                        "last_updated": datetime.now(),`

- lsp_fixes_backups/csv_processor.py:2838 - truthiness access to rivalries.delete_many
  Context: `rivalry_result = await self.bot.db.rivalries.delete_many({"server_id": server_id})`

- lsp_fixes_backups/csv_processor.py:2968 - truthiness access to kills.delete_many
  Context: `kill_result = await self.bot.db.kills.delete_many({"server_id": resolved_server_id})`

- lsp_fixes_backups/csv_processor.py:2975 - truthiness access to players.update_many
  Context: `player_reset = await self.bot.db.players.update_many(
                            {"server_id": resolved_server_id},
                            {"$set": {"kills": 0, "deaths": 0, "suicides": 0, "updated_at": datetime.utcnow()}}`

- lsp_fixes_backups/csv_processor.py:2985 - truthiness access to rivalries.delete_many
  Context: `rivalry_result = await self.bot.db.rivalries.delete_many({"server_id": resolved_server_id})`

- lsp_fixes_backups/csv_processor.py:3098 - truthiness access to csv_processor_state.delete_one
  Context: `state_result = await self.bot.db.csv_processor_state.delete_one({"server_id": server_id})`

- lsp_fixes_backups/csv_processor.py:3112 - truthiness access to kills.delete_many
  Context: `kill_result = await self.bot.db.kills.delete_many({"server_id": server_id})`

- lsp_fixes_backups/csv_processor.py:3116 - truthiness access to players.update_many
  Context: `player_reset = await self.bot.db.players.update_many(
                {"server_id": server_id},
                {"$set": {"kills": 0, "deaths": 0, "suicides": 0, "updated_at": datetime.utcnow()}}`

- lsp_fixes_backups/csv_processor.py:3123 - truthiness access to rivalries.delete_many
  Context: `rivalry_result = await self.bot.db.rivalries.delete_many({"server_id": server_id})`

- lsp_fixes_backups/csv_processor.py:3202 - truthiness access to guilds.find_one
  Context: `guild_doc = await self.bot.db.guilds.find_one({"guild_id": guild_id})`

- lsp_fixes_backups/csv_processor.py:3354 - truthiness access to guilds.find_one
  Context: `guild_doc = await self.bot.db.guilds.find_one({"guild_id": guild_id})`

- lsp_fixes_backups/csv_processor.py:3421 - truthiness access to kills.count_documents
  Context: `kills_count = await self.bot.db.kills.count_documents({
                        "server_id": server_id,
                        "is_suicide": False,
                        "timestamp": {"$gte": datetime.now() - timedelta(days=safe_days)}`

- lsp_fixes_backups/csv_processor.py:3427 - truthiness access to kills.count_documents
  Context: `suicides_count = await self.bot.db.kills.count_documents({
                        "server_id": server_id,
                        "is_suicide": True,
                        "timestamp": {"$gte": datetime.now() - timedelta(days=safe_days)}`

- lsp_fixes_backups/csv_processor.py:3446 - truthiness access to kills.aggregate
  Context: `result = await self.bot.db.kills.aggregate(pipeline).to_list(length=1)`

- lsp_fixes_backups/csv_processor.py:3753 - truthiness access to kills.insert_one
  Context: `await self.bot.db.kills.insert_one(suicide_doc)`

- lsp_fixes_backups/csv_processor.py:3792 - truthiness access to kills.insert_one
  Context: `await self.bot.db.kills.insert_one(kill_doc)`

- lsp_fixes_backups/csv_processor.py:3876 - truthiness access to players.update_one
  Context: `result = await self.bot.db.players.update_one(
                {"player_id": player_id},  # Match by player_id
                {
                    "$set": player_data,
                    "$setOnInsert": {
                        "created_at": now,  # Only set on new records
                        "kills": 0,
                        "deaths": 0, 
                        "suicides": 0
                    }
                },
                upsert=True  # Create if doesn't exist
            )`

- lsp_fixes_backups/csv_processor.py:3938 - truthiness access to csv_processor_state.delete_one
  Context: `state_result = await self.bot.db.csv_processor_state.delete_one({"server_id": server_id})`

- lsp_fixes_backups/csv_processor_backup.py:139 - truthiness access to servers.find
  Context: `servers_cursor = self.bot.db.servers.find({
                "$and": [
                    {"sftp_host": {"$exists": True}},
                    {"sftp_username": {"$exists": True}},
                    {"sftp_password": {"$exists": True}}
                ]
            })`

- lsp_fixes_backups/csv_processor_backup.py:165 - truthiness access to game_servers.find
  Context: `game_servers_cursor = self.bot.db.game_servers.find({
                "$and": [
                    {"sftp_host": {"$exists": True}},
                    {"sftp_username": {"$exists": True}},
                    {"sftp_password": {"$exists": True}}
                ]
            })`

- lsp_fixes_backups/csv_processor_backup.py:196 - truthiness access to guilds.find
  Context: `guilds_cursor = self.bot.db.guilds.find({})`

- lsp_fixes_backups/csv_processor_backup.py:1001 - truthiness access to guilds.find_one
  Context: `guild_doc = await self.bot.db.guilds.find_one({"guild_id": guild_id})`

- lsp_fixes_backups/csv_processor_backup.py:1143 - truthiness access to guilds.find_one
  Context: `guild_doc = await self.bot.db.guilds.find_one({"guild_id": guild_id})`

- lsp_fixes_backups/csv_processor_backup.py:1378 - truthiness access to kills.insert_one
  Context: `await self.bot.db.kills.insert_one(kill_doc)`

- lsp_fixes_backups/csv_processor_backup.py:1415 - truthiness access to players.insert_one
  Context: `await self.bot.db.players.insert_one(player.__dict__)`

- lsp_fixes_backups/csv_processor_backup.py:1003 - direct access to default_server_id
  Context: `raw_server_id = guild_doc["default_server_id"]`

- lsp_fixes_backups/csv_processor_backup.py:1145 - direct access to default_server_id
  Context: `raw_server_id = guild_doc["default_server_id"]`

- lsp_fixes_backups/economy.py:975 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- lsp_fixes_backups/economy.py:978 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- lsp_fixes_backups/events.py:90 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- lsp_fixes_backups/events.py:93 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- lsp_fixes_backups/events.py:179 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- lsp_fixes_backups/events.py:182 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- lsp_fixes_backups/events.py:199 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- lsp_fixes_backups/events.py:202 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- lsp_fixes_backups/events.py:302 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- lsp_fixes_backups/events.py:305 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- lsp_fixes_backups/events.py:366 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- lsp_fixes_backups/events.py:369 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- lsp_fixes_backups/events.py:382 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- lsp_fixes_backups/events.py:385 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- lsp_fixes_backups/events.py:493 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- lsp_fixes_backups/events.py:496 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- lsp_fixes_backups/events.py:515 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- lsp_fixes_backups/events.py:518 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- lsp_fixes_backups/events.py:639 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- lsp_fixes_backups/events.py:642 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- lsp_fixes_backups/events.py:655 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- lsp_fixes_backups/events.py:658 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- lsp_fixes_backups/events.py:769 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- lsp_fixes_backups/events.py:772 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- lsp_fixes_backups/events.py:903 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- lsp_fixes_backups/events.py:906 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- lsp_fixes_backups/events.py:1028 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- lsp_fixes_backups/events.py:1031 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- lsp_fixes_backups/events.py:1218 - truthiness access to guilds.count_documents
  Context: `if await bot.db.guilds.count_documents({"guild_id": guild_id, "servers": {"$exists": True, "$ne": []}}) == 0:`

- lsp_fixes_backups/killfeed.py:54 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- lsp_fixes_backups/killfeed.py:57 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- lsp_fixes_backups/killfeed.py:74 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- lsp_fixes_backups/killfeed.py:77 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- lsp_fixes_backups/killfeed.py:170 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- lsp_fixes_backups/killfeed.py:173 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- lsp_fixes_backups/killfeed.py:231 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- lsp_fixes_backups/killfeed.py:234 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- lsp_fixes_backups/killfeed.py:247 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- lsp_fixes_backups/killfeed.py:250 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- lsp_fixes_backups/killfeed.py:402 - truthiness access to guilds.count_documents
  Context: `if await bot.db.guilds.count_documents({"guild_id": guild_id, "servers": {"$exists": True, "$ne": []}}) == 0:`

- lsp_fixes_backups/killfeed.py:771 - truthiness access to kills.insert_one
  Context: `await bot.db.kills.insert_one(kill_event)`

- lsp_fixes_backups/log_processor.py:532 - truthiness access to servers.find_one
  Context: `server_doc = await self.bot.db.servers.find_one({"_id": server_id})`

- lsp_fixes_backups/log_processor.py:570 - truthiness access to servers.find
  Context: `server_docs = await self.bot.db.servers.find({"original_server_id": {"$exists": True}}).to_list(10)`

- lsp_fixes_backups/log_processor.py:1106 - truthiness access to kills.insert_one
  Context: `await self.bot.db.kills.insert_one(kill_doc)`

- lsp_fixes_backups/log_processor.py:1163 - truthiness access to connections.insert_one
  Context: `await self.bot.db.connections.insert_one(connection_doc)`

- lsp_fixes_backups/log_processor.py:1214 - truthiness access to missions.insert_one
  Context: `await self.bot.db.missions.insert_one(mission_doc)`

- lsp_fixes_backups/log_processor.py:1228 - truthiness access to game_events.insert_one
  Context: `await self.bot.db.game_events.insert_one(game_event_doc)`

- lsp_fixes_backups/log_processor.py:1267 - truthiness access to players.insert_one
  Context: `await self.bot.db.players.insert_one(player.__dict__)`

- lsp_fixes_backups/log_processor.py:534 - direct access to original_server_id
  Context: `path_server_id = server_doc["original_server_id"]`

- lsp_fixes_backups/new_csv_processor.py:209 - truthiness access to servers.find
  Context: `async for server in self.bot.db.servers.find({"sftp_enabled": True}):`

- lsp_fixes_backups/new_csv_processor.py:220 - truthiness access to game_servers.find
  Context: `async for server in self.bot.db.game_servers.find({"sftp_enabled": True}):`

- lsp_fixes_backups/new_csv_processor.py:231 - truthiness access to guilds.find
  Context: `async for guild in self.bot.db.guilds.find({}):`

- lsp_fixes_backups/new_csv_processor.py:741 - truthiness access to kills.insert_one
  Context: `await self.bot.db.kills.insert_one(kill_record)`

- lsp_fixes_backups/new_csv_processor.py:748 - direct access to _id
  Context: `await self.bot.db.players.update_stats(killer["_id"], "kills")`

- lsp_fixes_backups/new_csv_processor.py:749 - direct access to _id
  Context: `await self.bot.db.players.update_stats(victim["_id"], "deaths")`

- lsp_fixes_backups/new_csv_processor.py:752 - direct access to _id
  Context: `await self.bot.db.rivalries.update_nemesis_and_prey(
                    killer_id=killer["_id"],
                    victim_id=victim["_id"],
                    server_id=server_id
                )`

- lsp_fixes_backups/new_csv_processor.py:782 - truthiness access to players.find_one
  Context: `player = await self.bot.db.players.find_one({
                "player_id": player_id,
                "server_id": server_id
            })`

- lsp_fixes_backups/new_csv_processor.py:796 - direct access to _id
  Context: `await self.bot.db.players.update_one(
                        {"_id": player["_id"]},
                        {"$set": {"name": player_name, "known_aliases": known_aliases}}
                    )`

- lsp_fixes_backups/new_csv_processor.py:815 - truthiness access to players.insert_one
  Context: `result = await self.bot.db.players.insert_one(new_player)`

- lsp_fixes_backups/new_csv_processor.py:818 - truthiness access to players.find_one
  Context: `return await self.bot.db.players.find_one({"_id": result.inserted_id})`

- lsp_fixes_backups/setup.py:375 - truthiness access to servers.find_one
  Context: `server_doc = await self.bot.db.servers.find_one({"server_id": server_id})`

- lsp_fixes_backups/setup.py:387 - truthiness access to game_servers.find_one
  Context: `server_doc = await self.bot.db.game_servers.find_one({"server_id": server_id})`

- lsp_fixes_backups/setup.py:401 - truthiness access to guilds.find_one
  Context: `guild_doc = await self.bot.db.guilds.find_one({"guild_id": guild_id_str})`

- lsp_fixes_backups/setup.py:641 - truthiness access to servers.update_one
  Context: `await self.bot.db.servers.update_one(
                                {"server_id": std_server_id},
                                {"$set": {"historical_parse_done": False}}
                            )`

- lsp_fixes_backups/setup.py:657 - truthiness access to game_servers.delete_many
  Context: `result = await self.bot.db.game_servers.delete_many({"server_id": std_server_id})`

- lsp_fixes_backups/setup.py:661 - truthiness access to servers.delete_many
  Context: `result = await self.bot.db.servers.delete_many({"server_id": std_server_id})`

- lsp_fixes_backups/setup.py:665 - truthiness access to players.update_many
  Context: `player_result = await self.bot.db.players.update_many(
                                {"server_id": std_server_id},
                                {"$set": {"active": False, "updated_at": datetime.utcnow()}}`

- lsp_fixes_backups/setup.py:672 - truthiness access to kills.delete_many
  Context: `kills_result = await self.bot.db.kills.delete_many({"server_id": std_server_id})`

- lsp_fixes_backups/setup.py:676 - truthiness access to rivalries.delete_many
  Context: `rivalries_result = await self.bot.db.rivalries.delete_many({"server_id": std_server_id})`

- lsp_fixes_backups/setup.py:691 - truthiness access to csv_processor_state.delete_one
  Context: `state_result = await self.bot.db.csv_processor_state.delete_one({"server_id": std_server_id})`

- lsp_fixes_backups/stats.py:88 - truthiness access to players.find
  Context: `players_cursor = interaction.client.db.players.find(
                    {"server_id": str(server_id), "active": True},`

- lsp_fixes_backups/stats.py:627 - truthiness access to kills.aggregate
  Context: `cursor = self.bot.db.kills.aggregate(pipeline)`

- lsp_fixes_backups/stats.py:714 - truthiness access to kills.aggregate
  Context: `cursor = self.bot.db.kills.aggregate(pipeline)`

- lsp_fixes_backups/stats.py:828 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- lsp_fixes_backups/stats.py:831 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- lsp_fixes_backups/stats.py:844 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- lsp_fixes_backups/stats.py:847 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- lsp_fixes_backups/stats.py:1108 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- lsp_fixes_backups/stats.py:1111 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- lsp_fixes_backups/stats.py:1191 - truthiness access to kills.aggregate
  Context: `cursor = self.bot.db.kills.aggregate(pipeline)`

- lsp_fixes_backups/stats.py:1288 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- lsp_fixes_backups/stats.py:1291 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- lsp_fixes_backups/stats.py:1304 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": str(guild_id)})`

- lsp_fixes_backups/stats.py:1307 - truthiness access to guilds.find_one
  Context: `guild_data = await self.bot.db.guilds.find_one({"guild_id": int(guild_id)})`

- lsp_fixes_backups/stats.py:1374 - truthiness access to kills.aggregate
  Context: `cursor = self.bot.db.kills.aggregate(pipeline)`

- lsp_fixes_backups/stats.py:1418 - truthiness access to kills.aggregate
  Context: `top_users_cursor = self.bot.db.kills.aggregate(top_users_pipeline)`

- lsp_fixes_backups/debug_premium_system.py:94 - truthiness access to guilds.find_one
  Context: `guild_doc = await db.guilds.find_one({"guild_id": TEST_GUILD_ID})`

- lsp_fixes_backups/debug_premium_system.py:108 - truthiness access to premium_guilds.find_one
  Context: `premium_guild_doc = await db.premium_guilds.find_one({"guild_id": TEST_GUILD_ID})`

- lsp_fixes_backups/debug_premium_system.py:96 - truthiness access to unknown
  Context: `if guild_doc:`

- lsp_fixes_backups/direct_premium_diagnostic.py:134 - truthiness access to guilds.find_one
  Context: `guild_doc = await db.guilds.find_one({"guild_id": TEST_GUILD_ID})`

- lsp_fixes_backups/direct_premium_diagnostic.py:135 - truthiness access to premium_guilds.find_one
  Context: `premium_guild_doc = await db.premium_guilds.find_one({"guild_id": TEST_GUILD_ID})`

- lsp_fixes_backups/direct_premium_diagnostic.py:88 - direct access to servers
  Context: `logger.info(f"Servers count: {len(guild_doc['servers'])}")`

- lsp_fixes_backups/direct_premium_diagnostic.py:118 - direct access to features_enabled
  Context: `logger.info(f"Features enabled: {premium_guild_doc['features_enabled']}")`

- lsp_fixes_backups/direct_premium_diagnostic.py:77 - truthiness access to unknown
  Context: `if guild_doc:`

- lsp_fixes_backups/direct_premium_diagnostic.py:96 - truthiness access to unknown
  Context: `if guild_doc:`

- lsp_fixes_backups/premium_diagnostics.py:502 - truthiness access to unknown
  Context: `if guild_doc:`

- lsp_fixes_backups/premium_trace.py:48 - truthiness access to guilds.find_one
  Context: `guild_doc = await db.guilds.find_one({"guild_id": TEST_GUILD_ID})`

- lsp_fixes_backups/premium_trace.py:49 - truthiness access to unknown
  Context: `if guild_doc:`

- lsp_fixes_backups/premium_mongodb_models.py:229 - truthiness access to premium_guilds.update_one
  Context: `result = await self.db.premium_guilds.update_one(
                    {"_id": self._id},
                    {"$set": data}
                )`

- lsp_fixes_backups/premium_mongodb_models.py:236 - truthiness access to premium_guilds.find_one
  Context: `existing = await self.db.premium_guilds.find_one({"guild_id": self.guild_id})`

- lsp_fixes_backups/premium_mongodb_models.py:240 - truthiness access to premium_guilds.update_one
  Context: `result = await self.db.premium_guilds.update_one(
                        {"_id": self._id},
                        {"$set": data}
                    )`

- lsp_fixes_backups/premium_mongodb_models.py:248 - truthiness access to premium_guilds.insert_one
  Context: `result = await self.db.premium_guilds.insert_one(data_without_id)`

- lsp_fixes_backups/premium_mongodb_models.py:313 - truthiness access to premium_guilds.find_one
  Context: `document = await db.premium_guilds.find_one({"guild_id": str_guild_id})`

- lsp_fixes_backups/premium_mongodb_models.py:514 - truthiness access to premium_servers.update_one
  Context: `result = await self.db.premium_servers.update_one(
                    {"_id": self._id},
                    {"$set": data}
                )`

- lsp_fixes_backups/premium_mongodb_models.py:521 - truthiness access to premium_servers.insert_one
  Context: `result = await self.db.premium_servers.insert_one(data)`

- lsp_fixes_backups/premium_mongodb_models.py:52 - truthiness access to unknown
  Context: `if document:`

- lsp_fixes_backups/premium_mongodb_models.py:315 - truthiness access to unknown
  Context: `if document:`

- lsp_fixes_backups/premium_mongodb_models.py:408 - truthiness access to unknown
  Context: `if document:`

- lsp_fixes_backups/premium_utils.py:105 - truthiness access to guilds.find_one
  Context: `guild_doc = await db.guilds.find_one({"guild_id": guild_id_str})`

- lsp_fixes_backups/premium_utils.py:111 - truthiness access to guilds.find_one
  Context: `guild_doc = await db.guilds.find_one({"guild_id": guild_id_int})`

- lsp_fixes_backups/premium_utils.py:112 - truthiness access to unknown
  Context: `if guild_doc:`

- lsp_fixes_backups/premium_utils.py:117 - truthiness access to unknown
  Context: `if guild_doc:`

## Inconsistent Premium Checks

### Feature: UNKNOWN

- models_sql.py:99 - comparison
  Context: `if self.premium_tier == 0 or not self.premium_expires_at:`

- models_sql.py:104 - comparison
  Context: `self.premium_tier = 0`

- premium_migration.py:33 - comparison
  Context: `premium_tier = 0`

- premium_migration.py:53 - comparison
  Context: `premium_tier = 0`

- premium_migration.py:60 - comparison
  Context: `premium_tier = 0`

- premium_migration.py:70 - comparison
  Context: `if premium_tier > 0:`

- premium_migration.py:117 - comparison
  Context: `if premium_tier > 0:`

- premium_mongodb_models.py:28 - comparison
  Context: `self.premium_tier = 0  # Default to Free tier`

- premium_mongodb_models.py:198 - comparison
  Context: `if self.premium_tier == 0 or not self.premium_expires_at:`

- premium_mongodb_models.py:204 - comparison
  Context: `self.premium_tier = 0`

- premium_mongodb_models.py:338 - comparison
  Context: `guild.premium_tier = 0  # Start with Free tier`

- ensure_premium_compatibility.py:77 - utility
  Context: `result = await premium_compatibility.check_premium(self.db, self.guild_id, self, feature_name, False)`

- premium_diagnostics.py:252 - utility
  Context: `result = await verify_premium_for_feature(db, command["guild_id"], guild, feature_name, error_message=False)`

- premium_diagnostics.py:269 - utility
  Context: `result = await verify_premium_for_feature(db, command["guild_id"], guild, feature_name, error_message=False)`

- premium_diagnostics.py:331 - utility
  Context: `result = await stats_cog.verify_premium(guild.guild_id, subcommand if subcommand else "default")`

- premium_diagnostics.py:558 - utility
  Context: `old_result = await verify_premium_for_feature(db, guild_id, guild, feature, error_message=False)`

- premium_diagnostics.py:559 - utility
  Context: `new_result = await verify_premium_for_feature(db, guild_id, guild, feature, error_message=False)`

- premium_trace.py:65 - utility
  Context: `async def trace_verify_premium_for_feature(db, guild_id, guild_model, feature_name, error_message=True):`

- premium_trace.py:67 - utility
  Context: `logger.info(f"TRACE: verify_premium_for_feature({guild_id}, {getattr(guild_model, 'name', 'None')}, {feature_name}, {error_message})")`

- premium_trace.py:69 - utility
  Context: `result = await original_verify_premium_for_feature(db, guild_id, guild_model, feature_name, error_message)`

- premium_trace.py:107 - utility
  Context: `result = await premium.verify_premium_for_feature(db, TEST_GUILD_ID, guild, feature, error_message=False)`

- premium_trace.py:113 - utility
  Context: `compat_result = await premium_compatibility.verify_premium_for_feature(db, TEST_GUILD_ID, guild, feature, error_message=False)`

- premium_trace.py:123 - utility
  Context: `mapped_result = await premium_compatibility.verify_premium_for_feature(db, TEST_GUILD_ID, guild, mapped_feature, error_message=False)`

- premium_trace.py:179 - utility
  Context: `result = await stats_cog.verify_premium(TEST_GUILD_ID, feature)`

- direct_premium_diagnostic.py:233 - comparison
  Context: `premium_tier = 0`

- debug_premium_system.py:183 - utility
  Context: `old_access, old_error = await old_premium.verify_premium_for_feature(db, TEST_GUILD_ID, None, feature)`

- debug_premium_system.py:240 - utility
  Context: `access = await stats_cog.verify_premium(TEST_GUILD_ID, subcommand)`

- apply_premium_fix.py:143 - utility
  Context: `has_access = await premium_utils.verify_premium_for_feature(db, guild_id, feature)`

- comprehensive_premium_fix.py:295 - utility
  Context: `async def verify_premium_for_feature(
    db: Any, 
    guild_id: Union[str, int],
    feature_name: str
) -> bool:`

- comprehensive_premium_fix.py:407 - utility
  Context: `async def verify_premium(self, guild_id: Union[str, int], feature_name: str = None) -> bool:`

- comprehensive_premium_fix.py:432 - utility
  Context: `has_access = await premium_utils.verify_premium_for_feature(
                self.bot.db, guild_id_str, feature_name
            )`

- comprehensive_premium_fix.py:491 - utility
  Context: `premium_check += f"{indent}    if not await self.verify_premium(ctx.guild.id, "
                            
                            if feature_name:
                                premium_check += f"\"{feature_name}\""
                            else:
                                premium_check += "None"
                                
                            premium_check += "):\n"`

- comprehensive_premium_fix.py:685 - utility
  Context: `has_access = await premium_utils.verify_premium_for_feature(db, guild_id, feature)`

- comprehensive_premium_fix.py:257 - comparison
  Context: `premium_tier = 0`

- verify_premium_fixes.py:122 - utility
  Context: `has_access = await premium_utils.verify_premium_for_feature(db, guild_id, feature)`

- verify_premium_fixes.py:91 - comparison
  Context: `premium_tier = 0`

- fix_premium_lsp_errors.py:51 - utility
  Context: `r"check_premium\(": "verify_premium_for_feature(",
    
    # Check if object is None
    r"if\s+not\s+(\w+)(\s*\.\s*\w+)*\s*:": lambda match: f"if {match.group(1)}{match.group(2) or ''} is None:",`

- fix_premium_lsp_errors.py:260 - utility
  Context: `async def fix_verify_premium_for_feature():`

- fix_premium_lsp_errors.py:351 - utility
  Context: `"async def verify_premium(self, guild_id: Union[str, int], subcommand: str = None)",`

- fix_premium_lsp_errors.py:352 - utility
  Context: `"async def verify_premium(self, guild_id: Union[str, int], feature_name: str = None)"`

- fix_premium_lsp_errors.py:433 - utility
  Context: `await fix_verify_premium_for_feature()`

- premium_dashboard.py:149 - utility
  Context: `has_access = await self.premium_utils.verify_premium_for_feature(self.db, guild_id, feature_name)`

- premium_dashboard.py:113 - comparison
  Context: `premium_tier = 0`

- check_premium_feature.py:83 - utility
  Context: `has_access = await premium_utils.verify_premium_for_feature(db, guild_id, feature_name)`

- command_analyzer.py:135 - utility
  Context: `r'verify_premium(?:_for_feature)?\((.*?)(?:,\s*feature_name=([\'\"]?\w+[\'\"]?))?(.*?)\)',  # Verify premium`

- command_analyzer.py:136 - utility
  Context: `r'check_premium(?:_feature)?\((.*?)(?:,\s*feature_name=([\'\"]?\w+[\'\"]?))?(.*?)\)',  # Check premium`

- temp_extract/Premdebug-main/cogs/bounties.py:110 - comparison
  Context: `if guild.premium_tier < 2:  # Auto-bounty requires premium tier 2+`

- temp_extract/Premdebug-main/cogs/economy.py:141 - comparison
  Context: `if premium_tier >= 2:`

- temp_extract/Premdebug-main/cogs/economy.py:143 - comparison
  Context: `if premium_tier >= 3:`

- temp_extract/Premdebug-main/cogs/premium.py:195 - comparison
  Context: `if guild.premium_tier < 4:  # 4 is Overseer tier`

- temp_extract/Premdebug-main/cogs/premium.py:249 - comparison
  Context: `if guild.premium_tier >= 4:  # Overseer is tier 4`

- temp_extract/Premdebug-main/utils/premium.py:947 - comparison
  Context: `premium_tier = 0`

- temp_extract/Premdebug-main/utils/premium.py:950 - comparison
  Context: `if premium_tier < 0 or premium_tier > 5:`

- temp_extract/Premdebug-main/utils/premium.py:950 - comparison
  Context: `if premium_tier < 0 or premium_tier > 5:`

- temp_extract/Premdebug-main/utils/premium.py:957 - comparison
  Context: `if not isinstance(premium_tier_raw, int) and premium_tier > 0:`

- temp_extract/Premdebug-main/utils/premium.py:969 - comparison
  Context: `premium_tier = 0  # Safe default`

- temp_extract/Premdebug-main/utils/premium.py:989 - comparison
  Context: `premium_tier = 0`

- temp_extract/Premdebug-main/utils/premium.py:1005 - comparison
  Context: `premium_tier = 0`

- temp_extract/Premdebug-main/utils/server_utils.py:1080 - comparison
  Context: `if premium_tier >= 2:`

- temp_extract/Premdebug-main/utils/server_utils.py:1100 - comparison
  Context: `if premium_tier >= 1:`

- cogs/bounties.py:110 - comparison
  Context: `if guild.premium_tier < 2:  # Auto-bounty requires premium tier 2+`

- cogs/rivalries.py:36 - utility
  Context: `async def verify_premium(self, guild_id: Union[str, int], feature_name: str = None) -> bool:`

- cogs/rivalries.py:61 - utility
  Context: `has_access = await premium_utils.verify_premium_for_feature(
                self.bot.db, guild_id_str, feature_name
            )`

- cogs/stats.py:285 - utility
  Context: `async def verify_premium(self, guild_id: Union[str, int], feature_name: str = None) -> bool:`

- cogs/stats.py:310 - utility
  Context: `has_access = await premium_utils.verify_premium_for_feature(
                self.bot.db, guild_id_str, feature_name
            )`

- cogs/premium_new.py:24 - utility
  Context: `async def verify_premium(self, guild_id: Union[str, int], feature_name: str = None) -> bool:`

- cogs/premium_new.py:49 - utility
  Context: `has_access = await premium_utils.verify_premium_for_feature(
                self.bot.db, guild_id_str, feature_name
            )`

- cogs/premium_new.py:474 - comparison
  Context: `if len(guild.servers) >= max_servers and guild.premium_tier < 4:`

- cogs/stats_premium_fix.py:31 - utility
  Context: `async def verify_premium(self, guild_id: Union[str, int], subcommand: Optional[str] = None) -> bool:`

- cogs/stats_premium_fix.py:57 - utility
  Context: `has_access = await premium_utils.verify_premium_for_feature(
                    self.bot.db, guild_id_str, feature_name
                )`

- cogs/stats_premium_fix.py:83 - utility
  Context: `if not await self.verify_premium(ctx.guild.id, "server"):`

- cogs/stats_premium_fix.py:94 - utility
  Context: `if not await self.verify_premium(ctx.guild.id, "leaderboard"):`

- cogs/player_links.py:32 - utility
  Context: `async def verify_premium(self, guild_id: Union[str, int], feature_name: str = None) -> bool:`

- cogs/player_links.py:57 - utility
  Context: `has_access = await premium_utils.verify_premium_for_feature(
                self.bot.db, guild_id_str, feature_name
            )`

- cogs/premium.py:24 - utility
  Context: `async def verify_premium(self, guild_id: Union[str, int], feature_name: str = None) -> bool:`

- cogs/premium.py:49 - utility
  Context: `has_access = await premium_utils.verify_premium_for_feature(
                self.bot.db, guild_id_str, feature_name
            )`

- cogs/premium.py:475 - comparison
  Context: `if len(guild.servers) >= max_servers and guild.premium_tier < 4:`

- cogs/factions.py:34 - utility
  Context: `async def verify_premium(self, guild_id: Union[str, int], feature_name: str = None) -> bool:`

- cogs/factions.py:59 - utility
  Context: `has_access = await premium_utils.verify_premium_for_feature(
                self.bot.db, guild_id_str, feature_name
            )`

- cogs/events.py:30 - utility
  Context: `async def verify_premium(self, guild_id: Union[str, int], feature_name: str = None) -> bool:`

- cogs/events.py:55 - utility
  Context: `has_access = await premium_utils.verify_premium_for_feature(
                self.bot.db, guild_id_str, feature_name
            )`

- cogs/economy.py:37 - utility
  Context: `async def verify_premium(self, guild_id: Union[str, int], feature_name: str = None) -> bool:`

- cogs/economy.py:62 - utility
  Context: `has_access = await premium_utils.verify_premium_for_feature(
                self.bot.db, guild_id_str, feature_name
            )`

- cogs/economy.py:180 - comparison
  Context: `if premium_tier >= 2:`

- cogs/economy.py:182 - comparison
  Context: `if premium_tier >= 3:`

- models/guild.py:77 - comparison
  Context: `self.premium_tier = 0`

- models/guild.py:80 - comparison
  Context: `self.premium_tier = 0`

- models/guild.py:83 - comparison
  Context: `if self.premium_tier < 0 or self.premium_tier > 4:`

- models/guild.py:83 - comparison
  Context: `if self.premium_tier < 0 or self.premium_tier > 4:`

- models/guild.py:1064 - comparison
  Context: `instance.premium_tier = 0`

- utils/server_utils.py:1080 - comparison
  Context: `if premium_tier >= 2:`

- utils/server_utils.py:1100 - comparison
  Context: `if premium_tier >= 1:`

- utils/premium.py:1147 - comparison
  Context: `premium_tier = 0`

- utils/premium.py:1150 - comparison
  Context: `if premium_tier < 0 or premium_tier > 5:`

- utils/premium.py:1150 - comparison
  Context: `if premium_tier < 0 or premium_tier > 5:`

- utils/premium.py:1157 - comparison
  Context: `if not isinstance(premium_tier_raw, int) and premium_tier > 0:`

- utils/premium.py:1169 - comparison
  Context: `premium_tier = 0  # Safe default`

- utils/premium.py:1189 - comparison
  Context: `premium_tier = 0`

- utils/premium.py:1205 - comparison
  Context: `premium_tier = 0`

- utils/premium_mongodb_models.py:28 - comparison
  Context: `self.premium_tier = 0  # Default to Free tier`

- utils/premium_mongodb_models.py:198 - comparison
  Context: `if self.premium_tier == 0 or not self.premium_expires_at:`

- utils/premium_mongodb_models.py:204 - comparison
  Context: `self.premium_tier = 0`

- utils/premium_mongodb_models.py:350 - comparison
  Context: `guild.premium_tier = 0  # Start with Free tier`

- utils/premium_debug.py:394 - utility
  Context: `access, error_msg = await verify_premium_for_feature(db, guild_id, None, feature_name)`

- utils/premium_debug.py:415 - utility
  Context: `access, error_msg = await verify_premium_for_feature(db, guild_id, None, feature_name)`

- utils/premium_debug.py:425 - utility
  Context: `mapped_access, mapped_error_msg = await verify_premium_for_feature(db, guild_id, None, mapped_feature)`

- utils/premium_debug.py:462 - utility
  Context: `access = await stats_cog.verify_premium(guild_id, subcommand)`

- utils/premium_utils.py:164 - utility
  Context: `async def verify_premium_for_feature(
    db: Any, 
    guild_id: Union[str, int],
    feature_name: str
) -> bool:`

- utils/premium_utils.py:126 - comparison
  Context: `premium_tier = 0`

- premium_backup_1747015219/utils/premium.py:1147 - comparison
  Context: `premium_tier = 0`

- premium_backup_1747015219/utils/premium.py:1150 - comparison
  Context: `if premium_tier < 0 or premium_tier > 5:`

- premium_backup_1747015219/utils/premium.py:1150 - comparison
  Context: `if premium_tier < 0 or premium_tier > 5:`

- premium_backup_1747015219/utils/premium.py:1157 - comparison
  Context: `if not isinstance(premium_tier_raw, int) and premium_tier > 0:`

- premium_backup_1747015219/utils/premium.py:1169 - comparison
  Context: `premium_tier = 0  # Safe default`

- premium_backup_1747015219/utils/premium.py:1189 - comparison
  Context: `premium_tier = 0`

- premium_backup_1747015219/utils/premium.py:1205 - comparison
  Context: `premium_tier = 0`

- premium_backup_1747015219/cogs/premium.py:569 - utility
  Context: `async def verify_premium(self, ctx, feature_name: str = None):`

- premium_backup_1747015219/cogs/premium.py:235 - comparison
  Context: `if guild.premium_tier < 4:  # 4 is Overseer tier`

- premium_backup_1747015219/cogs/premium.py:289 - comparison
  Context: `if guild.premium_tier >= 4:  # Overseer is tier 4`

- premium_backup_1747015219/models/guild.py:77 - comparison
  Context: `self.premium_tier = 0`

- premium_backup_1747015219/models/guild.py:80 - comparison
  Context: `self.premium_tier = 0`

- premium_backup_1747015219/models/guild.py:83 - comparison
  Context: `if self.premium_tier < 0 or self.premium_tier > 4:`

- premium_backup_1747015219/models/guild.py:83 - comparison
  Context: `if self.premium_tier < 0 or self.premium_tier > 4:`

- premium_backup_1747015219/models/guild.py:1064 - comparison
  Context: `instance.premium_tier = 0`

- comprehensive_fix_backups/premium_utils.py:164 - utility
  Context: `async def verify_premium_for_feature(
    db: Any, 
    guild_id: Union[str, int],
    feature_name: str
) -> bool:`

- comprehensive_fix_backups/premium_utils.py:126 - comparison
  Context: `premium_tier = 0`

- comprehensive_fix_backups/ensure_premium_compatibility.py:77 - utility
  Context: `result = await premium_compatibility.check_premium(self.db, self.guild_id, self, feature_name, False)`

- comprehensive_fix_backups/bounties.py:110 - comparison
  Context: `if guild.premium_tier < 2:  # Auto-bounty requires premium tier 2+`

- comprehensive_fix_backups/economy.py:141 - comparison
  Context: `if premium_tier >= 2:`

- comprehensive_fix_backups/economy.py:143 - comparison
  Context: `if premium_tier >= 3:`

- comprehensive_fix_backups/premium.py:435 - comparison
  Context: `if len(guild.servers) >= max_servers and guild.premium_tier < 4:`

- comprehensive_fix_backups/premium_new.py:435 - comparison
  Context: `if len(guild.servers) >= max_servers and guild.premium_tier < 4:`

- comprehensive_fix_backups/stats_premium_fix.py:31 - utility
  Context: `async def verify_premium(self, guild_id: Union[str, int], subcommand: Optional[str] = None) -> bool:`

- comprehensive_fix_backups/stats_premium_fix.py:57 - utility
  Context: `has_access = await premium_utils.verify_premium_for_feature(
                    self.bot.db, guild_id_str, feature_name
                )`

- comprehensive_fix_backups/stats_premium_fix.py:83 - utility
  Context: `if not await self.verify_premium(ctx.guild.id, "server"):`

- comprehensive_fix_backups/stats_premium_fix.py:94 - utility
  Context: `if not await self.verify_premium(ctx.guild.id, "leaderboard"):`

- lsp_fixes_backups/bounties.py:110 - comparison
  Context: `if guild.premium_tier < 2:  # Auto-bounty requires premium tier 2+`

- lsp_fixes_backups/economy.py:37 - utility
  Context: `async def verify_premium(self, guild_id: Union[str, int], feature_name: str = None) -> bool:`

- lsp_fixes_backups/economy.py:62 - utility
  Context: `has_access = await premium_utils.verify_premium_for_feature(
                self.bot.db, guild_id_str, feature_name
            )`

- lsp_fixes_backups/economy.py:180 - comparison
  Context: `if premium_tier >= 2:`

- lsp_fixes_backups/economy.py:182 - comparison
  Context: `if premium_tier >= 3:`

- lsp_fixes_backups/events.py:29 - utility
  Context: `async def verify_premium(self, guild_id: Union[str, int], feature_name: str = None) -> bool:`

- lsp_fixes_backups/events.py:54 - utility
  Context: `has_access = await premium_utils.verify_premium_for_feature(
                self.bot.db, guild_id_str, feature_name
            )`

- lsp_fixes_backups/factions.py:33 - utility
  Context: `async def verify_premium(self, guild_id: Union[str, int], feature_name: str = None) -> bool:`

- lsp_fixes_backups/factions.py:58 - utility
  Context: `has_access = await premium_utils.verify_premium_for_feature(
                self.bot.db, guild_id_str, feature_name
            )`

- lsp_fixes_backups/player_links.py:31 - utility
  Context: `async def verify_premium(self, guild_id: Union[str, int], feature_name: str = None) -> bool:`

- lsp_fixes_backups/player_links.py:56 - utility
  Context: `has_access = await premium_utils.verify_premium_for_feature(
                self.bot.db, guild_id_str, feature_name
            )`

- lsp_fixes_backups/premium.py:24 - utility
  Context: `async def verify_premium(self, guild_id: Union[str, int], feature_name: str = None) -> bool:`

- lsp_fixes_backups/premium.py:49 - utility
  Context: `has_access = await premium_utils.verify_premium_for_feature(
                self.bot.db, guild_id_str, feature_name
            )`

- lsp_fixes_backups/premium.py:474 - comparison
  Context: `if len(guild.servers) >= max_servers and guild.premium_tier < 4:`

- lsp_fixes_backups/premium_new.py:24 - utility
  Context: `async def verify_premium(self, guild_id: Union[str, int], feature_name: str = None) -> bool:`

- lsp_fixes_backups/premium_new.py:49 - utility
  Context: `has_access = await premium_utils.verify_premium_for_feature(
                self.bot.db, guild_id_str, feature_name
            )`

- lsp_fixes_backups/premium_new.py:474 - comparison
  Context: `if len(guild.servers) >= max_servers and guild.premium_tier < 4:`

- lsp_fixes_backups/rivalries.py:36 - utility
  Context: `async def verify_premium(self, guild_id: Union[str, int], feature_name: str = None) -> bool:`

- lsp_fixes_backups/rivalries.py:61 - utility
  Context: `has_access = await premium_utils.verify_premium_for_feature(
                self.bot.db, guild_id_str, feature_name
            )`

- lsp_fixes_backups/stats.py:285 - utility
  Context: `async def verify_premium(self, guild_id: Union[str, int], feature_name: str = None) -> bool:`

- lsp_fixes_backups/stats.py:310 - utility
  Context: `has_access = await premium_utils.verify_premium_for_feature(
                self.bot.db, guild_id_str, feature_name
            )`

- lsp_fixes_backups/stats_premium_fix.py:31 - utility
  Context: `async def verify_premium(self, guild_id: Union[str, int], subcommand: Optional[str] = None) -> bool:`

- lsp_fixes_backups/stats_premium_fix.py:57 - utility
  Context: `has_access = await premium_utils.verify_premium_for_feature(
                    self.bot.db, guild_id_str, feature_name
                )`

- lsp_fixes_backups/stats_premium_fix.py:83 - utility
  Context: `if not await self.verify_premium(ctx.guild.id, "server"):`

- lsp_fixes_backups/stats_premium_fix.py:94 - utility
  Context: `if not await self.verify_premium(ctx.guild.id, "leaderboard"):`

- lsp_fixes_backups/debug_premium_system.py:240 - utility
  Context: `access = await stats_cog.verify_premium(TEST_GUILD_ID, subcommand)`

- lsp_fixes_backups/debug_premium_system.py:183 - utility
  Context: `old_access, old_error = await old_premium.check_premium_feature(db, TEST_GUILD_ID, None, feature)`

- lsp_fixes_backups/direct_premium_diagnostic.py:233 - comparison
  Context: `premium_tier = 0`

- lsp_fixes_backups/premium_diagnostics.py:331 - utility
  Context: `result = await stats_cog.verify_premium(guild.guild_id, subcommand if subcommand else "default")`

- lsp_fixes_backups/premium_diagnostics.py:252 - utility
  Context: `result = await check_premium_feature(db, command["guild_id"], guild, feature_name, error_message=False)`

- lsp_fixes_backups/premium_diagnostics.py:269 - utility
  Context: `result = await check_premium(db, command["guild_id"], guild, feature_name, error_message=False)`

- lsp_fixes_backups/premium_diagnostics.py:558 - utility
  Context: `old_result = await check_premium_feature(db, guild_id, guild, feature, error_message=False)`

- lsp_fixes_backups/premium_diagnostics.py:559 - utility
  Context: `new_result = await check_premium(db, guild_id, guild, feature, error_message=False)`

- lsp_fixes_backups/premium_trace.py:179 - utility
  Context: `result = await stats_cog.verify_premium(TEST_GUILD_ID, feature)`

- lsp_fixes_backups/premium_trace.py:65 - utility
  Context: `async def trace_check_premium_feature(db, guild_id, guild_model, feature_name, error_message=True):`

- lsp_fixes_backups/premium_trace.py:67 - utility
  Context: `logger.info(f"TRACE: check_premium_feature({guild_id}, {getattr(guild_model, 'name', 'None')}, {feature_name}, {error_message})")`

- lsp_fixes_backups/premium_trace.py:69 - utility
  Context: `result = await original_check_premium_feature(db, guild_id, guild_model, feature_name, error_message)`

- lsp_fixes_backups/premium_trace.py:107 - utility
  Context: `result = await premium.check_premium_feature(db, TEST_GUILD_ID, guild, feature, error_message=False)`

- lsp_fixes_backups/premium_trace.py:113 - utility
  Context: `compat_result = await premium_compatibility.check_premium(db, TEST_GUILD_ID, guild, feature, error_message=False)`

- lsp_fixes_backups/premium_trace.py:123 - utility
  Context: `mapped_result = await premium_compatibility.check_premium(db, TEST_GUILD_ID, guild, mapped_feature, error_message=False)`

- lsp_fixes_backups/premium_debug.py:462 - utility
  Context: `access = await stats_cog.verify_premium(guild_id, subcommand)`

- lsp_fixes_backups/premium_debug.py:394 - utility
  Context: `access, error_msg = await check_premium_feature(db, guild_id, None, feature_name)`

- lsp_fixes_backups/premium_debug.py:415 - utility
  Context: `access, error_msg = await check_premium(db, guild_id, None, feature_name)`

- lsp_fixes_backups/premium_debug.py:425 - utility
  Context: `mapped_access, mapped_error_msg = await check_premium(db, guild_id, None, mapped_feature)`

- lsp_fixes_backups/premium_mongodb_models.py:28 - comparison
  Context: `self.premium_tier = 0  # Default to Free tier`

- lsp_fixes_backups/premium_mongodb_models.py:198 - comparison
  Context: `if self.premium_tier == 0 or not self.premium_expires_at:`

- lsp_fixes_backups/premium_mongodb_models.py:204 - comparison
  Context: `self.premium_tier = 0`

- lsp_fixes_backups/premium_mongodb_models.py:350 - comparison
  Context: `guild.premium_tier = 0  # Start with Free tier`

- lsp_fixes_backups/premium_utils.py:164 - utility
  Context: `async def verify_premium_for_feature(
    db: Any, 
    guild_id: Union[str, int],
    feature_name: str
) -> bool:`

- lsp_fixes_backups/premium_utils.py:126 - comparison
  Context: `premium_tier = 0`

